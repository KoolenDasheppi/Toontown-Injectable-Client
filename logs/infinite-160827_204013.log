TTLocalizer: Running in language: english
from toontown.toonbase.TTLocalizerEnglish import *
OTPLocalizer: Running in language: english
from otp.otpbase.OTPLocalizerEnglish import *
Preloading suits...
Preloading Toon heads...
Preloading avatars...
Traceback (most recent call last):
  File "D:\Documents\ToontownSourcecode\src\toontown\toonbase\ClientStart.py", line 240, in loadScripts
    execfile('mods/'+scriptName,globals())
  File "mods/Compilation.txt", line 206, in <module>
    toonAnywhere = DirectButton(text = ("Enable Toonup anywhere", "ENABLE TOONUP ANYWHERE", "enable toonup anywhere", "enable toonup anywhere"), scale=.06, pos = (-1,-0,-.3), command=ToonupAnywhere.toonUpSetUp)
NameError: name 'ToonupAnywhere' is not defined

phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['FndsLst_ScrollUp', 'FndsLst_ScrollDN', 'FndsLst_ScrollUp_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['FndsLst_ScrollUp', 'FndsLst_ScrollDN', 'FndsLst_ScrollUp_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3.5/models/gui/friendslist_gui.bam
['Horiz_Arrow_UP', 'Horiz_Arrow_DN', 'Horiz_Arrow_Rllvr']
phase_3/models/gui/quit_button.bam
['QuitBtn_UP', 'QuitBtn_DN', 'QuitBtn_RLVR']
phase_3/models/gui/quit_button.bam
['QuitBtn_UP', 'QuitBtn_DN', 'QuitBtn_RLVR']
phase_3/models/gui/quit_button.bam
['QuitBtn_UP', 'QuitBtn_DN', 'QuitBtn_RLVR']
phase_3/models/gui/quit_button.bam
['QuitBtn_UP', 'QuitBtn_DN', 'QuitBtn_RLVR']
test2
{414000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785AD0>, 406000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E7858F0>, 407000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785968>, 416000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785AF8>, 409000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E7859E0>, 401000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E4B7300>, 402000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E772918>, 419000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785B70>, 411000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785A08>, 404000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785940>, 413000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785AA8>, 415000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785A80>, 408000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E7859B8>, 417000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785B98>, 410000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785B48>, 418000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785B20>, 403000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E4B4328>, 412000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785A58>, 405000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E7858A0>, 420000001: <toontown.distributed.ToontownDistrict.ToontownDistrict instance at 0x1E785BC0>}
__handleAvatarChooserDone: 100000013, 'Little Zippy', ('rsl', 'ls', 'l', 'm', 19, 0, 19, 19, 10, 9, 0, 9, 7, 0), 1
2
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_4/dna/storage_TT.pdna
Reading DNA file... phase_4/dna/storage_TT_sz.pdna
Reading DNA file... phase_4/dna/toontown_central_sz.pdna
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_6/dna/storage_MM.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_6/dna/storage_MM_town.pdna
Reading DNA file... phase_6/dna/minnies_melody_land_4100.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_6/dna/storage_MM_town.pdna
Reading DNA file... phase_6/dna/minnies_melody_land_4200.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_6/dna/storage_MM_town.pdna
Reading DNA file... phase_6/dna/minnies_melody_land_4300.pdna
Battle Event localtoon-battle-event-3
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_4/dna/storage_TT.pdna
Reading DNA file... phase_4/dna/storage_TT_sz.pdna
Reading DNA file... phase_4/dna/toontown_central_sz.pdna
Doing building quest
starting
Teleporting back
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_8/dna/storage_BR.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-9
Battle Event localtoon-battle-event-14
Battle Event localtoon-battle-event-19
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
frame rate: 17.2 fps|0.213d|3 avs||441|444||0x1002|0x6738|513.2MB|539.2MB|16330.4MB|953|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Battle Event localtoon-battle-event-24
Battle Event localtoon-battle-event-29
Battle Event localtoon-battle-event-34
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-39
Battle Event localtoon-battle-event-44
Battle Event localtoon-battle-event-49
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-54
Battle Event localtoon-battle-event-59
Battle Event localtoon-battle-event-64
Battle Event localtoon-battle-event-69
Battle Event localtoon-battle-event-74
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
frame rate: 24.4 fps|0.021d|0 avs||741|744||0x1002|0x6738|565.5MB|590.9MB|16330.4MB|978|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Battle Event localtoon-battle-event-79
Battle Event localtoon-battle-event-84
Battle Event localtoon-battle-event-89
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-94
Battle Event localtoon-battle-event-99
Battle Event localtoon-battle-event-104
Battle Event localtoon-battle-event-109
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-114
Battle Event localtoon-battle-event-120
Battle Event localtoon-battle-event-126
Battle Event localtoon-battle-event-132
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-138
Battle Event localtoon-battle-event-144
Battle Event localtoon-battle-event-150
Battle Event localtoon-battle-event-156
Battle Event localtoon-battle-event-162
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-168
Battle Event localtoon-battle-event-174
Battle Event localtoon-battle-event-180
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-186
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-192
Battle Event localtoon-battle-event-198
Battle Event localtoon-battle-event-204
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-210
Battle Event localtoon-battle-event-216
Battle Event localtoon-battle-event-222
Battle Event localtoon-battle-event-228
Battle Event localtoon-battle-event-234
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-240
Battle Event localtoon-battle-event-246
Battle Event localtoon-battle-event-252
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-258
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Battle Event localtoon-battle-event-264
Battle Event localtoon-battle-event-270
Battle Event localtoon-battle-event-276
Battle Event localtoon-battle-event-282
Battle Event localtoon-battle-event-288
Battle Event localtoon-battle-event-294
Battle Event localtoon-battle-event-300
Battle Event localtoon-battle-event-306
Battle Event localtoon-battle-event-312
Battle Event localtoon-battle-event-318
starting
Teleporting back
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_8/dna/storage_BR.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Battle Event localtoon-battle-event-324
Battle Event localtoon-battle-event-329
Battle Event localtoon-battle-event-334
Battle Event localtoon-battle-event-339
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Battle Event localtoon-battle-event-344
Battle Event localtoon-battle-event-349
frame rate: 20.4 fps|0.072d|2 avs||1447|1449||0x1002|0x6738|607.7MB|738.5MB|16330.4MB|1310|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Battle Event localtoon-battle-event-354
Battle Event localtoon-battle-event-359
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3300.pdna
Battle Event localtoon-battle-event-364
Battle Event localtoon-battle-event-369
Battle Event localtoon-battle-event-374
Battle Event localtoon-battle-event-379
Battle Event localtoon-battle-event-384
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3300.pdna
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_8/dna/storage_BR.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Battle Event localtoon-battle-event-389
Battle Event localtoon-battle-event-394
Battle Event localtoon-battle-event-399
Battle Event localtoon-battle-event-404
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Battle Event localtoon-battle-event-409
Battle Event localtoon-battle-event-414
Battle Event localtoon-battle-event-419
Battle Event localtoon-battle-event-424
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Teleporting back
frame rate: 13.5 fps|0.122d|5 avs||2044|2047||0x1002|0x6738|704.8MB|862.6MB|16330.4MB|1461|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3300.pdna
Battle Event localtoon-battle-event-429
Battle Event localtoon-battle-event-434
Battle Event localtoon-battle-event-439
Battle Event localtoon-battle-event-444
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3300.pdna
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_8/dna/storage_BR.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Battle Event localtoon-battle-event-449
Battle Event localtoon-battle-event-454
Battle Event localtoon-battle-event-459
Battle Event localtoon-battle-event-464
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Battle Event localtoon-battle-event-469
Battle Event localtoon-battle-event-474
Battle Event localtoon-battle-event-479
Battle Event localtoon-battle-event-484
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
starting
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
frame rate: 11.7 fps|0.258d|6 avs||2526|2529||0x1002|0x6738|757.0MB|965.2MB|16330.4MB|1593|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Battle Event localtoon-battle-event-489
Battle Event localtoon-battle-event-494
Battle Event localtoon-battle-event-499
Battle Event localtoon-battle-event-504
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-509
Battle Event localtoon-battle-event-514
Battle Event localtoon-battle-event-519
Battle Event localtoon-battle-event-524
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-529
Battle Event localtoon-battle-event-534
Battle Event localtoon-battle-event-539
Battle Event localtoon-battle-event-544
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
frame rate: 17.3 fps|0.088d|1 avs||2827|2830||0x1002|0x6738|786.8MB|1018.6MB|16330.4MB|1624|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-549
Battle Event localtoon-battle-event-554
Battle Event localtoon-battle-event-559
Battle Event localtoon-battle-event-564
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-569
Battle Event localtoon-battle-event-574
Battle Event localtoon-battle-event-579
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Traceback (most recent call last):
  File "<string>", line 4, in <module>
  File "<string>", line 1
    print(dir(base.localAvatar)
                              ^
SyntaxError: unexpected EOF while parsing

Teleporting back
Traceback (most recent call last):
  File "<string>", line 4, in <module>
  File "<string>", line 1
    print(dir(base.localAvatar)
                              ^
SyntaxError: unexpected EOF while parsing

Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
['ActiveAvatars', 'Actor_initialized', 'AnimDef', 'Avatar_initialized', 'BroadcastTypes', 'DISLid', 'DISLname', 'DelayDeleteSerialGen', 'DistributedActor_initialized', 'DistributedAvatar_announced', 'DistributedAvatar_initialized', 'DistributedNode_initialized', 'DistributedObject_initialized', 'DistributedPlayer_initialized', 'DistributedSmoothNode_initialized', 'DistributedToon_initialized', 'DtoolClassDict', 'DtoolGetSuperBase', 'ETFail', 'ETNotFound', 'ETOk', 'ETRemoved', 'ET_fail', 'ET_not_found', 'ET_ok', 'ET_removed', 'EyesAngryClosed', 'EyesAngryOpen', 'EyesClosed', 'EyesOpen', 'EyesSadClosed', 'EyesSadOpen', 'EyesSurprised', 'GetPlayerDeleteEvent', 'GetPlayerGenerateEvent', 'GetPlayerNetworkDeleteEvent', 'HpTextEnabled', 'HpTextGenerator', 'LeftA', 'LeftAD', 'LeftB', 'LeftBC', 'LeftC', 'LeftD', 'LocalAvatar_initialized', 'LocalToon_initialized', 'ManagesNametagAmbientLightChanged', 'Muzzle', 'MuzzleSurprised', 'NPCFriendsDict', 'PartDef', 'RightA', 'RightAD', 'RightB', 'RightBC', 'RightC', 'RightD', 'Sng', 'SubpartDef', 'TeleportFailureTimeout', 'ToonHead_initialized', 'Toon_initialized', '_Actor__LODAnimation', '_Actor__LODCenter', '_Actor__LODNode', '_Actor__animControlDict', '_Actor__bindAnimToPart', '_Actor__commonBundleHandles', '_Actor__copyAnimControls', '_Actor__copyPartBundles', '_Actor__copySubpartDict', '_Actor__doListJoints', '_Actor__geomNode', '_Actor__getPartJoints', '_Actor__hasLOD', '_Actor__partBundleDict', '_Actor__prepareBundle', '_Actor__sortedLODNames', '_Actor__subpartDict', '_Actor__subpartsComplete', '_Actor__updateSortedLODNames', '_Avatar__chatAddressee', '_Avatar__chatDialogueList', '_Avatar__chatFlags', '_Avatar__chatLocal', '_Avatar__chatMessage', '_Avatar__chatPageNumber', '_Avatar__chatParagraph', '_Avatar__chatQuitButton', '_Avatar__chatSet', '_Avatar__currentDialogue', '_Avatar__font', '_Avatar__nameVisible', '_Avatar__updatePageChat', '_DistributedAvatar__nameTagShowAvId', '_DistributedAvatar__nameTagShowName', '_DistributedAvatar__setTags', '_DistributedObject__barrierContext', '_DistributedObject__callbacks', '_DistributedObject__nextContext', '_DistributedPlayer__teleportAvailable', '_DistributedSmoothNodeBase__broadcastPeriod', '_DistributedToon__currentDialogue', '_DistributedToon__refreshNameCallBack', '_DistributedToon__starSpin', '_DistributedToon__starSpin1', '_LocalAvatar__camCollCanMove', '_LocalAvatar__cameraHasBeenMoved', '_LocalAvatar__curLookAt', '_LocalAvatar__disableSmartCam', '_LocalAvatar__enableMarkerPlacement', '_LocalAvatar__floorDetected', '_LocalAvatar__friendOffline', '_LocalAvatar__friendOnline', '_LocalAvatar__geom', '_LocalAvatar__idealCameraObstructed', '_LocalAvatar__idealCameraPos', '_LocalAvatar__instantaneousCamPos', '_LocalAvatar__lastHprWrtRender', '_LocalAvatar__lastPosWrtRender', '_LocalAvatar__onLevelGround', '_LocalAvatar__playerOffline', '_LocalAvatar__playerOnline', '_LocalToon__beginTossPie', '_LocalToon__beginTossPieMouse', '_LocalToon__catalogNotifyDialog', '_LocalToon__clarabelleButton', '_LocalToon__clarabelleFlash', '_LocalToon__endTossPie', '_LocalToon__endTossPieMouse', '_LocalToon__expressState', '_LocalToon__finishPieTrack', '_LocalToon__furnitureGui', '_LocalToon__gardeningGui', '_LocalToon__gardeningGuiFake', '_LocalToon__getPiePower', '_LocalToon__handleClarabelleButton', '_LocalToon__handleEndPlantInteraction', '_LocalToon__handlePurchase', '_LocalToon__handleSwimExitTeleport', '_LocalToon__lerpFurnitureButton', '_LocalToon__pieBubble', '_LocalToon__pieButton', '_LocalToon__pieButtonCount', '_LocalToon__pieButtonType', '_LocalToon__pieHit', '_LocalToon__pieInHand', '_LocalToon__piePowerMeter', '_LocalToon__piePowerMeterSequence', '_LocalToon__pieSequence', '_LocalToon__placeMarker', '_LocalToon__presentingPie', '_LocalToon__shovelButton', '_LocalToon__shovelButtonClicked', '_LocalToon__startMoveFurniture', '_LocalToon__stopPresentPie', '_LocalToon__toonMoved', '_LocalToon__updatePiePower', '_LocalToon__wateringCanButtonClicked', '_MSGRmessengerId', '_ShadowCaster__globalDropShadowFlagChanged', '_ShadowCaster__globalDropShadowGrayLevelChanged', '_ToonHead__angryMuzzles', '_ToonHead__blinkCloseEyes', '_ToonHead__blinkName', '_ToonHead__blinkOpenEyes', '_ToonHead__defaultStarePoint', '_ToonHead__eyelashClosed', '_ToonHead__eyelashOpen', '_ToonHead__eyelashesHiddenByGlasses', '_ToonHead__eyes', '_ToonHead__eyesClosed', '_ToonHead__eyesOpen', '_ToonHead__fixEyes', '_ToonHead__fixHeadLongLong', '_ToonHead__fixHeadLongShort', '_ToonHead__fixHeadShortLong', '_ToonHead__fixHeadShortShort', '_ToonHead__fixPumpkin', '_ToonHead__height', '_ToonHead__laughMuzzles', '_ToonHead__lod250Eyes', '_ToonHead__lod250lPupil', '_ToonHead__lod250rPupil', '_ToonHead__lod500Eyes', '_ToonHead__lod500lPupil', '_ToonHead__lod500rPupil', '_ToonHead__lookAround', '_ToonHead__lookHeadAt', '_ToonHead__lookName', '_ToonHead__lookPupilsAt', '_ToonHead__lpupil', '_ToonHead__muzzle', '_ToonHead__muzzles', '_ToonHead__rpupil', '_ToonHead__sadMuzzles', '_ToonHead__setPupilDirection', '_ToonHead__smileMuzzles', '_ToonHead__stareAt', '_ToonHead__stareAtName', '_ToonHead__stareAtNode', '_ToonHead__stareAtPoint', '_ToonHead__stareAtTime', '_ToonHead__surpriseMuzzles', '_Toon__bookActors', '_Toon__colorScaleToonMuzzle', '_Toon__colorToonEars', '_Toon__colorToonGloves', '_Toon__colorToonSkin', '_Toon__doBigAndWhite', '_Toon__doCheesyEffect', '_Toon__doGreenToon', '_Toon__doHeadScale', '_Toon__doLegsScale', '_Toon__doPartsColorScale', '_Toon__doPumpkinHeadSwitch', '_Toon__doSnowManHeadSwitch', '_Toon__doToonColor', '_Toon__doToonGhostColorScale', '_Toon__doToonScale', '_Toon__doUnVirtual', '_Toon__doVirtual', '_Toon__finishEmote', '_Toon__handleAfkExitTeleport', '_Toon__handleAfkTimeout', '_Toon__holeActors', '_Toon__pieModelType', '_Toon__returnToLastAnim', '_Toon__swapToonClothes', '_Toon__undoCheesyEffect', '__autoLerp', '__class__', '__cmp__', '__copy__', '__deepcopy__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lerp', '__lt__', '__module__', '__ne__', '__new__', '__nonzero__', '__reduce__', '__reduce_ex__', '__reduce_persist__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_addTask', '_autoInterestHandle', '_checkResume', '_clearTask', '_deactivateDO', '_delayDeleteForceAllow', '_delayDeleted', '_destroyDO', '_districtWeAreGeneratedOn', '_gmType', '_handleClientCleanup', '_handleGMName', '_isGM', '_isValidWhisperSource', '_limits', '_posHprBroadcast', '_retrieveCachedData', '_smartCamEnabled', '_smoothWrtReparents', '_telemetryLimiterId', '_token2delayDeleteName', '_zoneId', 'accept', 'acceptNametagAmbientLightChange', 'acceptOnce', 'acceptingNewFriends', 'acceptingNonFriendWhispers', 'accessories', 'accountName', 'achievementGui', 'achievements', 'acquireDelayDelete', 'activateSmoothing', 'activeShadow', 'activeState', 'actorInterval', 'addActive', 'addCameraPosition', 'addEventsPage', 'addGolfPage', 'addHash', 'addInterest', 'addKartPage', 'addLOD', 'addNewsPage', 'addShovelRelatedDoId', 'addTIPPage', 'addTask', 'addTelemetryLimit', 'add_hash', 'adjustAllPriorities', 'adjustNametag3d', 'adjust_all_priorities', 'adminAccess', 'advancePageNumber', 'afkTimeout', 'allowAsyncBind', 'allowHardLand', 'allowPies', 'analyze', 'angryEyes', 'animFSM', 'animLoaderOptions', 'animMultiplier', 'animPanel', 'announceBingo', 'announceGenerate', 'announcePartyStarted', 'anyPath', 'any_path', 'applyBuffs', 'applyCheesyEffect', 'applyTextureColors', 'apply_texture_colors', 'arrivedOnDistrict', 'askAvOnShard', 'assign', 'atLocation', 'attach', 'attachCamera', 'attachCollisionRay', 'attachCollisionSegment', 'attachCollisionSphere', 'attachNewNode', 'attachShovel', 'attachWateringCan', 'attach_new_node', 'autoInterests', 'autoRun', 'autoSetActivePlot', 'auxCameraPositions', 'avatarControlsEnabled', 'avatarType', 'awardMailboxContents', 'awardNotify', 'bFake', 'bFishBingoMarkTutorialDone', 'bFishBingoTutorialDone', 'bFriendsList', 'bPetTutorialDone', 'b_clearSmoothing', 'b_setAnimState', 'b_setChat', 'b_setEmoteState', 'b_setHouseId', 'b_setLocation', 'b_setParent', 'b_setSC', 'b_setSCCustom', 'b_setSCEmote', 'b_setSCSinging', 'b_setSCToontask', 'b_setSpeedChatStyleIndex', 'b_setTunnelIn', 'b_setTunnelOut', 'b_squish', 'b_teleportGreeting', 'backCatalog', 'backpack', 'backpackList', 'backpackNodes', 'bankMoney', 'battleId', 'battleSOS', 'battleTube', 'battleTubeHeight', 'battleTubeRadius', 'beginAllowPies', 'bindAllAnims', 'bindAnim', 'blinkEyes', 'boardingParty', 'book', 'broadcastType', 'buffs', 'buildingRadar', 'cTrav', 'cacheable', 'calcTightBounds', 'calc_tight_bounds', 'camCollisionQueue', 'camFloorCollisionBroadcaster', 'camFloorCollisionQueue', 'camFloorRayNode', 'camPusher', 'camPusher2', 'cameraIndex', 'cameraPositions', 'cameraZOffset', 'canChat', 'canEarnAchievements', 'cantLeaveGame', 'catalogGenAccessories', 'catalogGenClothes', 'catalogNotify', 'catalogScheduleCurrentWeek', 'catalogScheduleNextTime', 'ccLine', 'ccLineBitMask', 'ccLineNode', 'ccLineNodePath', 'ccPusherTrav', 'ccRay', 'ccRay2', 'ccRay2BitMask', 'ccRay2MoveNodePath', 'ccRay2Node', 'ccRay2NodePath', 'ccRayBitMask', 'ccRayNode', 'ccRayNodePath', 'ccSphere', 'ccSphere2', 'ccSphereNode', 'ccSphereNode2', 'ccSphereNodePath', 'ccSphereNodePath2', 'ccTrav', 'ccTravFloor', 'ccTravOnFloor', 'changeButtonText', 'chatGarbler', 'chatMgr', 'cheatCogdoMazeGame', 'checkGagBonus', 'cheesyEffect', 'children', 'clarabelleButtonObscured', 'clarabelleNewsPageCollision', 'classTree', 'cleanUpSoundList', 'cleanup', 'cleanupPieInHand', 'cleanupPieModel', 'cleanupPies', 'clearAntialias', 'clearAttrib', 'clearAudioVolume', 'clearBillboard', 'clearBin', 'clearChat', 'clearCheesyEffect', 'clearClipPlane', 'clearColor', 'clearColorScale', 'clearCompass', 'clearDepthOffset', 'clearDepthTest', 'clearDepthWrite', 'clearEffect', 'clearEffects', 'clearFog', 'clearLODAnimation', 'clearLight', 'clearMat', 'clearMaterial', 'clearModelNodes', 'clearNormalMap', 'clearOccluder', 'clearPageUpDown', 'clearPlantToWater', 'clearProjectTexture', 'clearPythonData', 'clearPythonTag', 'clearRenderMode', 'clearScissor', 'clearShader', 'clearShaderInput', 'clearSmoothing', 'clearTag', 'clearTexGen', 'clearTexProjector', 'clearTexTransform', 'clearTexture', 'clearTransform', 'clearTransparency', 'clearTwoSided', 'clear_antialias', 'clear_attrib', 'clear_audio_volume', 'clear_billboard', 'clear_bin', 'clear_clip_plane', 'clear_color', 'clear_color_scale', 'clear_compass', 'clear_depth_offset', 'clear_depth_test', 'clear_depth_write', 'clear_effect', 'clear_effects', 'clear_fog', 'clear_light', 'clear_mat', 'clear_material', 'clear_model_nodes', 'clear_normal_map', 'clear_occluder', 'clear_project_texture', 'clear_python_tag', 'clear_render_mode', 'clear_scissor', 'clear_shader', 'clear_shader_input', 'clear_tag', 'clear_tex_gen', 'clear_tex_projector', 'clear_tex_transform', 'clear_texture', 'clear_transform', 'clear_transparency', 'clear_two_sided', 'clickedNametag', 'clickedWhisper', 'closeEyes', 'closestObstructionDistance', 'clothesBottomsList', 'clothesTopsList', 'cnode', 'cogCounts', 'cogLevels', 'cogMerits', 'cogParts', 'cogRadar', 'cogSummonsEarned', 'cogSummonsResponse', 'cogTypes', 'cogs', 'collTube', 'collisionsOff', 'collisionsOn', 'colorInterval', 'colorScaleInterval', 'commonChatFlags', 'compareTo', 'compare_to', 'composeColorScale', 'compose_color_scale', 'confirmAvOnShard', 'considerUnderstandable', 'controlJoint', 'controlManager', 'copyActor', 'copyTo', 'copy_to', 'countNumDescendants', 'count_num_descendants', 'cr', 'createSystemMsgAckGui', 'customMessages', 'd_battleSOS', 'd_broadcastPosHpr', 'd_broadcastPositionNow', 'd_clearSmoothing', 'd_friendsNotify', 'd_playSplashEffect', 'd_reqCogSummons', 'd_reqSCResistance', 'd_requestDeleteQuest', 'd_returnResync', 'd_setAnimState', 'd_setChat', 'd_setEmoteState', 'd_setH', 'd_setHouseId', 'd_setHpr', 'd_setLocation', 'd_setP', 'd_setParent', 'd_setPos', 'd_setPosHpr', 'd_setR', 'd_setSC', 'd_setSCCustom', 'd_setSCSinging', 'd_setSCToontask', 'd_setSpeedChatStyleIndex', 'd_setTunnelIn', 'd_setTunnelOut', 'd_setWhisperIgnored', 'd_setX', 'd_setXY', 'd_setXYH', 'd_setXYZH', 'd_setXZ', 'd_setY', 'd_setZ', 'd_squish', 'd_suggestResync', 'd_teleportGiveup', 'd_teleportGreeting', 'd_teleportQuery', 'd_teleportResponse', 'd_updateGMNameTag', 'dclass', 'decodeFromBamStream', 'decode_from_bam_stream', 'defaultColorScale', 'defaultShard', 'defaultZone', 'delayDelete', 'delete', 'deleteCollisions', 'deleteDropShadow', 'deleteNametag3d', 'deleteOrDelay', 'deleteSmartCameraCollisions', 'deliveryboxContentsContents', 'deselect', 'detachCamera', 'detachNode', 'detachShovel', 'detachWateringCan', 'detach_node', 'detectLeaks', 'died', 'disable', 'disableAndAnnounce', 'disableAnnounceAndDelete', 'disableAvatarControls', 'disableBlend', 'disableBodyCollisions', 'disableRun', 'disableSmartCameraViews', 'disguisePage', 'disguisePageFlag', 'displaySystemClickableWhisper', 'displayTalk', 'displayTalkAccount', 'displayTalkWhisper', 'displayWhisper', 'displayWhisperPlayer', 'doBillboardAxis', 'doBillboardPointEye', 'doBillboardPointWorld', 'doCallbackContext', 'doEmote', 'doIHaveRequiredTrees', 'doId', 'doLookAroundToStareAt', 'doMethodLater', 'doSmoothTask', 'doTeleportResponse', 'doToonColorScale', 'do_billboard_axis', 'do_billboard_point_eye', 'do_billboard_point_world', 'do_setParent', 'doneBarrier', 'drawInFront', 'dropShadow', 'earnedExperience', 'effect', 'effectTrack', 'elevatorNotifier', 'emblems', 'emote', 'emoteAccess', 'emoteTrack', 'enableAvatarControls', 'enableBlend', 'enablePumpkins', 'enableRun', 'enableSmartCameraViews', 'enableSnowMen', 'encodeToBamStream', 'encode_to_bam_stream', 'endAllowPies', 'enforceTelemetryLimits', 'enterCatchEating', 'enterCatching', 'enterCloseBook', 'enterCogThiefRunning', 'enterCringe', 'enterDied', 'enterDive', 'enterEmote', 'enterEyelidsClosed', 'enterEyelidsOff', 'enterEyelidsOpen', 'enterEyelidsSurprised', 'enterFallDown', 'enterFlattened', 'enterGolfBadPutt', 'enterGolfGoodPutt', 'enterGolfPuttLoop', 'enterGolfPuttSwing', 'enterGolfRotateLeft', 'enterGolfRotateRight', 'enterHappy', 'enterJump', 'enterJumpAirborne', 'enterJumpLand', 'enterJumpSquat', 'enterNeutral', 'enterOff', 'enterOpenBook', 'enterPush', 'enterReadBook', 'enterRun', 'enterSad', 'enterScientistEmcee', 'enterScientistJealous', 'enterScientistLessWork', 'enterScientistPlay', 'enterScientistWork', 'enterSit', 'enterSitStart', 'enterSleep', 'enterSquish', 'enterSwim', 'enterSwimHold', 'enterTeleportIn', 'enterTeleportOut', 'enterTeleportedOut', 'enterVictory', 'enterWalk', 'estate', 'eventsPage', 'execCommand', 'exitCatchEating', 'exitCatching', 'exitCloseBook', 'exitCogThiefRunning', 'exitCringe', 'exitDied', 'exitDive', 'exitEmote', 'exitEyelidsClosed', 'exitEyelidsOff', 'exitEyelidsOpen', 'exitEyelidsSurprised', 'exitFallDown', 'exitFlattened', 'exitGolfBadPutt', 'exitGolfGoodPutt', 'exitGolfPuttLoop', 'exitGolfPuttSwing', 'exitGolfRotateLeft', 'exitGolfRotateRight', 'exitHappy', 'exitJump', 'exitJumpAirborne', 'exitJumpLand', 'exitJumpSquat', 'exitNeutral', 'exitOff', 'exitOpenBook', 'exitPush', 'exitReadBook', 'exitRun', 'exitSad', 'exitScientistEmcee', 'exitScientistJealous', 'exitScientistLessWork', 'exitScientistPlay', 'exitScientistWork', 'exitSit', 'exitSitStart', 'exitSleep', 'exitSquish', 'exitSwim', 'exitSwimHold', 'exitTeleportIn', 'exitTeleportOut', 'exitTeleportedOut', 'exitVictory', 'exitWalk', 'experience', 'explore', 'exposeJoint', 'eyelids', 'faceAwayFromViewer', 'faceTowardsViewer', 'fail', 'failedTeleportMessageOk', 'find', 'findAllMatches', 'findAllMaterials', 'findAllPathsTo', 'findAllTexcoords', 'findAllTextureStages', 'findAllTextures', 'findAllVertexColumns', 'findMaterial', 'findNetPythonTag', 'findNetTag', 'findPathTo', 'findSomethingToLookAt', 'findTexture', 'findTextureStage', 'find_all_matches', 'find_all_materials', 'find_all_paths_to', 'find_all_texcoords', 'find_all_texture_stages', 'find_all_textures', 'find_all_vertex_columns', 'find_material', 'find_net_python_tag', 'find_net_tag', 'find_path_to', 'find_texture', 'find_texture_stage', 'finishDied', 'finishTeleportOut', 'fishCollection', 'fishPage', 'fishTank', 'fishingRod', 'fishingTrophies', 'fitAndCenterHead', 'fixBounds', 'fixBounds_old', 'flattenLight', 'flattenMedium', 'flattenMultitex', 'flattenStrong', 'flatten_light', 'flatten_medium', 'flatten_strong', 'flowerBasket', 'flowerCollection', 'flush', 'flushCachedData', 'forceAllowDelayDelete', 'forceGotoSleep', 'forceJumpIdle', 'forceRecomputeBounds', 'forceToTruePosition', 'force_recompute_bounds', 'forwardSpeed', 'fov', 'frameTimeWeArrivedOnDistrict', 'freezeJoint', 'friendsList', 'friendsListButtonActive', 'friendsListButtonObscured', 'friendsNotify', 'furnitureDirector', 'furnitureManager', 'gameAccess', 'garbleChat', 'gardenPage', 'gardenSpecials', 'gardenStarted', 'gardenTrophies', 'generate', 'generateBackpack', 'generateGlasses', 'generateHat', 'generateInit', 'generateShoes', 'generateToon', 'generateToonAccessories', 'generateToonClothes', 'generateToonColor', 'generateToonHead', 'generateToonLegs', 'generateToonTorso', 'getAccessoryByType', 'getAccountDays', 'getActorInfo', 'getAdminAccess', 'getAirborneHeight', 'getAllAccepting', 'getAncestor', 'getAncestors', 'getAncestry', 'getAngryMuzzles', 'getAnimBlends', 'getAnimControl', 'getAnimControlDict', 'getAnimControls', 'getAnimFilename', 'getAnimMultiplier', 'getAnimNames', 'getAntialias', 'getArrivedOnDistrictEvent', 'getAttrib', 'getAudioVolume', 'getAutoInterests', 'getAutoRun', 'getAvIdName', 'getAvPosStr', 'getAvatarScale', 'getBackpack', 'getBackpackList', 'getBankMoney', 'getBarrierData', 'getBaseFrameRate', 'getBinDrawOrder', 'getBinName', 'getBodyScale', 'getBookActors', 'getBounds', 'getBoxCapability', 'getCacheable', 'getCachedData', 'getCallPetIval', 'getCallback', 'getCallbackArgs', 'getCallbackContext', 'getChild', 'getChildren', 'getChildrenAsList', 'getClampedAvatarHeight', 'getClassType', 'getClothesBottomsList', 'getClothesTopsList', 'getCogLevels', 'getCogParts', 'getCogSummonsEarned', 'getCogTypes', 'getCollideMask', 'getColor', 'getColorScale', 'getCommonAncestor', 'getComponentH', 'getComponentL', 'getComponentP', 'getComponentR', 'getComponentT', 'getComponentX', 'getComponentY', 'getComponentZ', 'getCompromiseCameraPos', 'getCurrentAnim', 'getCurrentContexts', 'getCurrentFrame', 'getDelayDeleteCount', 'getDelayDeleteEvent', 'getDelayDeleteNames', 'getDepthOffset', 'getDepthTest', 'getDepthWrite', 'getDialogueArray', 'getDialogueSfx', 'getDiedInterval', 'getDisableEvent', 'getDistance', 'getDoId', 'getDuration', 'getEffect', 'getEffects', 'getEmblems', 'getErrorType', 'getFeedPetIval', 'getFishCollection', 'getFishTank', 'getFishingRod', 'getFishingTrophies', 'getFlowerBasket', 'getFlowerCollection', 'getFog', 'getFont', 'getFrameRate', 'getFrameTime', 'getFriendsList', 'getGameAccess', 'getGardenSpecials', 'getGardenStarted', 'getGardenTrophies', 'getGeomNode', 'getGlasses', 'getGlassesList', 'getGolfCourseBest', 'getGolfCups', 'getGolfHistory', 'getGolfHoleBest', 'getGolfTrophies', 'getGuiConflict', 'getH', 'getHat', 'getHatList', 'getHeadParts', 'getHeight', 'getHiddenAncestor', 'getHipsParts', 'getHoleActors', 'getHouseId', 'getHp', 'getHpr', 'getIdealCameraPos', 'getInstanceCount', 'getInviteForPartyId', 'getInvitesToShowInMailbox', 'getJar', 'getJointTransform', 'getJointTransformState', 'getJoints', 'getJumpDuration', 'getKartAccessoriesOwned', 'getKartAccessoryColor', 'getKartBackWheelWellType', 'getKartBodyColor', 'getKartBodyType', 'getKartDNA', 'getKartDecalType', 'getKartEngineBlockType', 'getKartFrontWheelWellType', 'getKartRimType', 'getKartSpoilerType', 'getKartingHistory', 'getKartingPersonalBest', 'getKartingPersonalBest2', 'getKartingPersonalBestAll', 'getKartingTrophies', 'getKey', 'getLOD', 'getLODIndex', 'getLODNames', 'getLODNode', 'getLastTimeReadNews', 'getLaughMuzzles', 'getLeftHands', 'getLegsParts', 'getLocation', 'getLookAtPoint', 'getMat', 'getMaterial', 'getMaxAccessories', 'getMaxBankMoney', 'getMaxCarry', 'getMaxClothes', 'getMaxFishTank', 'getMaxFlowerBasket', 'getMaxHp', 'getMaxMoney', 'getMaxNPCFriends', 'getMaxSearchDepth', 'getMoney', 'getMuzzles', 'getMyTrees', 'getNPCFriendsDict', 'getName', 'getNameVisible', 'getNametagJoints', 'getNametagScale', 'getNametagStyle', 'getNearbyPlayers', 'getNetAudioVolume', 'getNetPrevTransform', 'getNetPythonTag', 'getNetState', 'getNetTag', 'getNetTransform', 'getNeverDisable', 'getNode', 'getNodes', 'getNumChildren', 'getNumDescendants', 'getNumFrames', 'getNumInvitesToShowInMailbox', 'getNumNodes', 'getOnePartyInvitedTo', 'getOverlappingJoints', 'getP', 'getParent', 'getParentObj', 'getPart', 'getPartBundle', 'getPartBundleDict', 'getPartBundles', 'getPartNames', 'getPetId', 'getPieBubble', 'getPieModel', 'getPieSplatInterval', 'getPieces', 'getPinkSlips', 'getPlayRate', 'getPos', 'getPosDelta', 'getPosHprBroadcastPeriod', 'getPosHprBroadcastTaskName', 'getPosIndex', 'getPresentPieInterval', 'getPrevTransform', 'getPythonTag', 'getPythonTagKeys', 'getQuat', 'getQuestCarryLimit', 'getQuestHistory', 'getR', 'getRadius', 'getRandomForwardLookAtPoint', 'getRelativePoint', 'getRelativeVector', 'getRenderMode', 'getRenderModePerspective', 'getRenderModeThickness', 'getRequestID', 'getResistanceMessageCharges', 'getRewardHistory', 'getRightHands', 'getSa', 'getSadMuzzles', 'getSb', 'getScale', 'getScavengerHunt', 'getScratchPetIval', 'getSg', 'getShader', 'getShaderInput', 'getShadowJoint', 'getShear', 'getShoes', 'getShoesList', 'getShovelModel', 'getShxy', 'getShxz', 'getShyz', 'getSmileMuzzles', 'getSmoothWrtReparents', 'getSort', 'getSoundTeleport', 'getSpeedChatStyleIndex', 'getSr', 'getStareAtNodeAndOffset', 'getStashedAncestor', 'getStashedChildren', 'getState', 'getStyle', 'getSubpartsComplete', 'getSurpriseMuzzles', 'getSx', 'getSy', 'getSz', 'getTag', 'getTagKeys', 'getTelemetryLimiterId', 'getTeleportAccess', 'getTeleportAvailable', 'getTeleportInTrack', 'getTeleportOutTrack', 'getTexGen', 'getTexGenLight', 'getTexHpr', 'getTexOffset', 'getTexPos', 'getTexProjectorFrom', 'getTexProjectorTo', 'getTexRotate', 'getTexScale', 'getTexScale3d', 'getTexTransform', 'getTexture', 'getTickets', 'getTightBounds', 'getTop', 'getTopNode', 'getTorsoParts', 'getTossPieInterval', 'getTotalMoney', 'getTrackAccess', 'getTrackBonusLevel', 'getTrackProgress', 'getTrackProgressAsArray', 'getTransform', 'getTransparency', 'getTunnelInToonTrack', 'getTunnelOutToonTrack', 'getTwoSided', 'getType', 'getUnlimitedSwing', 'getVisibilityPoint', 'getWake', 'getWateringCanModel', 'getX', 'getY', 'getZ', 'getZoneId', 'get_ancestor', 'get_ancestors', 'get_antialias', 'get_attrib', 'get_audio_volume', 'get_bin_draw_order', 'get_bin_name', 'get_bounds', 'get_child', 'get_children', 'get_class_type', 'get_collide_mask', 'get_color', 'get_color_scale', 'get_common_ancestor', 'get_depth_offset', 'get_depth_test', 'get_depth_write', 'get_distance', 'get_effect', 'get_effects', 'get_error_type', 'get_fog', 'get_h', 'get_hidden_ancestor', 'get_hpr', 'get_instance_count', 'get_key', 'get_mat', 'get_material', 'get_max_search_depth', 'get_name', 'get_net_audio_volume', 'get_net_prev_transform', 'get_net_python_tag', 'get_net_state', 'get_net_tag', 'get_net_transform', 'get_node', 'get_nodes', 'get_num_children', 'get_num_nodes', 'get_p', 'get_parent', 'get_pos', 'get_pos_delta', 'get_prev_transform', 'get_python_tag', 'get_python_tag_keys', 'get_quat', 'get_r', 'get_relative_point', 'get_relative_vector', 'get_render_mode', 'get_render_mode_perspective', 'get_render_mode_thickness', 'get_sa', 'get_sb', 'get_scale', 'get_sg', 'get_shader', 'get_shader_input', 'get_shear', 'get_shxy', 'get_shxz', 'get_shyz', 'get_sort', 'get_sr', 'get_stashed_ancestor', 'get_stashed_children', 'get_state', 'get_sx', 'get_sy', 'get_sz', 'get_tag', 'get_tag_keys', 'get_tex_gen', 'get_tex_gen_light', 'get_tex_hpr', 'get_tex_offset', 'get_tex_pos', 'get_tex_projector_from', 'get_tex_projector_to', 'get_tex_rotate', 'get_tex_scale', 'get_tex_scale_3d', 'get_tex_transform', 'get_texture', 'get_tight_bounds', 'get_top', 'get_top_node', 'get_transform', 'get_transparency', 'get_two_sided', 'get_x', 'get_y', 'get_z', 'ghostMode', 'glasses', 'glassesList', 'glassesNodes', 'glitchCount', 'glitchKiller', 'glitchOkay', 'glitchX', 'glitchY', 'glitchZ', 'gmNameTag', 'gmNameTagColor', 'gmNameTagEnabled', 'gmNameTagString', 'gmState', 'gmToonLockStyle', 'golfCourseBest', 'golfCups', 'golfHistory', 'golfHoleBest', 'golfTrophies', 'gotCatalogNotify', 'gotName', 'gotStringParentToken', 'gotoNode', 'gotoSleep', 'gridParent', 'guiConflict', 'handleAllGardeningButtonsHidden', 'handleCameraFloorInteraction', 'handleCameraObstruction', 'handleChildArrive', 'handleChildArriveZone', 'handleChildLeave', 'handleChildLeaveZone', 'handleEndPlantInteraction', 'handlePlayerFriendWhisper', 'handleQueryObjectChildrenLocalDone', 'handleTunnelIn', 'handleTunnelOut', 'hasActiveBoardingGroup', 'hasAntialias', 'hasAttrib', 'hasAudioVolume', 'hasBillboard', 'hasBin', 'hasCachedData', 'hasClipPlane', 'hasClipPlaneOff', 'hasCogSummons', 'hasColor', 'hasColorScale', 'hasCompass', 'hasDepthOffset', 'hasDepthTest', 'hasDepthWrite', 'hasEffect', 'hasFog', 'hasFogOff', 'hasKart', 'hasLOD', 'hasLight', 'hasLightOff', 'hasMat', 'hasMaterial', 'hasNetPythonTag', 'hasNetTag', 'hasOccluder', 'hasParent', 'hasParentingRules', 'hasPet', 'hasPlant', 'hasPlayedGolf', 'hasPythonTag', 'hasRenderMode', 'hasScissor', 'hasTag', 'hasTeleportAccess', 'hasTexGen', 'hasTexProjector', 'hasTexTransform', 'hasTexcoord', 'hasTexture', 'hasTextureOff', 'hasTrackAccess', 'hasTrackAnimToSpeed', 'hasTransparency', 'hasTwoSided', 'hasVertexColumn', 'has_antialias', 'has_attrib', 'has_audio_volume', 'has_billboard', 'has_bin', 'has_clip_plane', 'has_clip_plane_off', 'has_color', 'has_color_scale', 'has_compass', 'has_depth_offset', 'has_depth_test', 'has_depth_write', 'has_effect', 'has_fog', 'has_fog_off', 'has_light', 'has_light_off', 'has_mat', 'has_material', 'has_net_python_tag', 'has_net_tag', 'has_occluder', 'has_parent', 'has_python_tag', 'has_render_mode', 'has_scissor', 'has_tag', 'has_tex_gen', 'has_tex_projector', 'has_tex_transform', 'has_texcoord', 'has_texture', 'has_texture_off', 'has_transparency', 'has_two_sided', 'has_vertex_column', 'hat', 'hatList', 'hatNodes', 'headParts', 'headsUp', 'heads_up', 'height', 'hide', 'hideAllBounds', 'hideAngryMuzzle', 'hideBooks', 'hideBounds', 'hideCS', 'hideClarabelleGui', 'hideEars', 'hideEyelashes', 'hideFurnitureGui', 'hideGardeningGui', 'hideHpText', 'hideLaughMuzzle', 'hideName', 'hideNametag2d', 'hideNametag3d', 'hideNormalMuzzle', 'hidePart', 'hideSadMuzzle', 'hideShadow', 'hideShovelButton', 'hideShovelButtonFake', 'hideSiblings', 'hideSmileMuzzle', 'hideSurpriseMuzzle', 'hideSystemMsgAckGui', 'hideWateringCanButton', 'hideWateringCanButtonFake', 'hide_bounds', 'hipsParts', 'holeClipPath', 'hoodsVisited', 'hostedParties', 'houseId', 'hp', 'hpChange', 'hpText', 'hpTextNode', 'hprInterval', 'hprScaleInterval', 'iHpr', 'iPos', 'iPosHpr', 'iPosHprScale', 'iScale', 'id', 'ignore', 'ignoreAll', 'ignoreAnimationEvents', 'ignoreList', 'ignoreMouse', 'ignoreNametagAmbientLightChange', 'inGardenAction', 'initAnimsOnAllLODs', 'initCameraPositions', 'initInterface', 'initializeBodyCollisions', 'initializeCollisions', 'initializeDropShadow', 'initializeNametag3d', 'initializeSmartCamera', 'initializeSmartCameraCollisions', 'instance', 'instanceTo', 'instanceUnderNode', 'instance_to', 'instance_under_node', 'interruptPie', 'invPage', 'inventory', 'inviteMailNotify', 'invites', 'isAccepting', 'isAncestorOf', 'isAvFriend', 'isClosetFull', 'isCog', 'isDisabled', 'isDisguised', 'isEmpty', 'isEnoughEmblemsToBuy', 'isEnoughMoneyAndEmblemsToBuy', 'isFishTankFull', 'isFlowerBasketFull', 'isGM', 'isGenerated', 'isGeneratedOnDistrict', 'isGridParent', 'isHidden', 'isIgnoreCheesyEffect', 'isIgnoring', 'isInView', 'isInWater', 'isIt', 'isLocal', 'isLockedDown', 'isPageDown', 'isPageUp', 'isPet', 'isProxy', 'isReadingNews', 'isSameGraph', 'isSingleton', 'isStashed', 'isStunned', 'isTeleportAllowed', 'isTreePlanted', 'isTrunkFull', 'isUnderstandable', 'is_ancestor_of', 'is_empty', 'is_hidden', 'is_same_graph', 'is_singleton', 'is_stashed', 'isolate', 'jar', 'jumpHardLand', 'jumpLand', 'jumpLandAnimFix', 'jumpLandAnimFixTask', 'jumpStart', 'kart', 'kartDNA', 'kartingHistory', 'kartingPersonalBest', 'kartingPersonalBest2', 'kartingTrophies', 'laffMeter', 'lastAction', 'lastElevatorLeft', 'lastFailedTeleportMessage', 'lastHood', 'lastMoved', 'lastNeedH', 'lastState', 'lastSuggestResync', 'lastTeleportQuery', 'lastTimeReadNews', 'lastTossedPie', 'lastWakeTime', 'leftHand', 'leftHands', 'legsParts', 'lerpCameraFov', 'lerpColor', 'lerpColorRGBA', 'lerpColorRGBARGBA', 'lerpColorScale', 'lerpColorScaleRGBA', 'lerpColorScaleRGBARGBA', 'lerpColorScaleVBase4', 'lerpColorScaleVBase4VBase4', 'lerpColorVBase4', 'lerpColorVBase4VBase4', 'lerpHpr', 'lerpHprHPR', 'lerpHprVBase3', 'lerpLookAt', 'lerpPos', 'lerpPosHpr', 'lerpPosHprPoint3VBase3', 'lerpPosHprScale', 'lerpPosHprXYZHPR', 'lerpPosPoint3', 'lerpPosXYZ', 'lerpScale', 'lerpScaleVBase3', 'lerpScaleXYZ', 'levelShovel', 'levelWater', 'listJoints', 'listTags', 'list_tags', 'loadAnims', 'loadAnimsOnAllLODs', 'loadClarabelleGui', 'loadDisguisePages', 'loadFurnitureGui', 'loadGardenPages', 'loadGardeningGui', 'loadModel', 'loadPhase55Stuff', 'loadPumpkin', 'loadSnowMan', 'loadSosPages', 'localControl', 'localPresentPie', 'localTossPie', 'lock', 'lockGardeningButtons', 'lockedDown', 'lookAt', 'lookAtPositionCallbackArgs', 'lookAtTrack', 'look_at', 'loop', 'ls', 'lsNames', 'lsNamesRecurse', 'mail', 'mailboxContents', 'mailboxNotify', 'makePiePowerMeter', 'makeSubpart', 'makeWaiter', 'mapPage', 'maxAccessories', 'maxBankMoney', 'maxCarry', 'maxClothes', 'maxFishTank', 'maxFlowerBasket', 'maxHp', 'maxMoney', 'maxNPCFriends', 'mergeLODBundles', 'modelLoaderOptions', 'money', 'monthlyCatalog', 'motion', 'moveFurnitureButtonObscured', 'movingFlag', 'name', 'nametag', 'nametag3d', 'nametagAmbientLightChanged', 'nametagNodePath', 'nametagScale', 'nametagStyle', 'networkDelete', 'neverDisable', 'newCatalogNotify', 'newsButtonMgr', 'nextCameraPos', 'node', 'normalEyes', 'notFound', 'not_found', 'notify', 'nudgeCamera', 'numFlowers', 'numPies', 'obscureClarabelleButton', 'obscureFriendsListButton', 'obscureMoveFurnitureButton', 'oldFriendsList', 'oldPos', 'onAwardOrder', 'onGiftOrder', 'onOrder', 'openEyes', 'optionsPage', 'osdAnimBlends', 'output', 'pPrintString', 'pageDown', 'pageUp', 'parentId', 'parentToonParts', 'partPrefix', 'partiesInvitedTo', 'partyNotify', 'partyReplyInfoBases', 'pauseGlitchKiller', 'peerToPeerResync', 'petId', 'physControls', 'pieFinishedFlying', 'pieFinishedSplatting', 'pieModel', 'piePowerExponent', 'piePowerSpeed', 'pieScale', 'pieSplat', 'pieThrowType', 'pieTracks', 'pieType', 'pingpong', 'pinkSlips', 'pivotAngle', 'place', 'plantToWater', 'play', 'playCurrentDialogue', 'playDialogue', 'playDialogueForString', 'playSplashEffect', 'playerType', 'playingAnim', 'playingRate', 'popCameraToDest', 'posCamera', 'posHprBroadcastStarted', 'posHprInterval', 'posHprScaleInterval', 'posHprScaleShearInterval', 'posIndex', 'posInterval', 'posQuatInterval', 'posQuatScaleInterval', 'posQuatScaleShearInterval', 'pose', 'positionCameraWithPusher', 'positionExaminer', 'postFlatten', 'postGenerateMessage', 'pprint', 'premungeScene', 'premunge_scene', 'prepareScene', 'prepare_scene', 'presentPie', 'prevToonIdx', 'printAnimBlends', 'printCamPos', 'printCameraPosition', 'printCameraPositions', 'printChildren', 'printHpr', 'printLOD', 'printPos', 'printPosHpr', 'printPosHprScale', 'printScale', 'printTransform', 'projectTexture', 'project_texture', 'promoteShovel', 'promoteShovelSkill', 'promoteWateringCan', 'promotionStatus', 'pumpkins', 'putCameraFloorRayOnAvatar', 'putCameraFloorRayOnCamera', 'putOnSuit', 'quatInterval', 'quatScaleInterval', 'questCarryLimit', 'questHistory', 'questMap', 'questPage', 'quests', 'r_constructCollisionTree', 'r_subdivideCollisions', 'randGen', 'reactivateShovel', 'reactivateWater', 'readyForPromotion', 'reapplyCheesyEffect', 'recalcCameraSphere', 'reconsiderCheesyEffect', 'refreshName', 'refreshOnscreenButtons', 'releaseDelayDelete', 'releaseJoint', 'releaseKart', 'reloadPosition', 'remove', 'removeActive', 'removeAllTasks', 'removeAnimControlDict', 'removeCameraPosition', 'removeChildren', 'removeFancyNametag', 'removeGMIcon', 'removeInterest', 'removeJar', 'removeNode', 'removeNonCollisions', 'removePart', 'removeShovelRelatedDoId', 'removeTask', 'removeTelemetryLimit', 'remove_node', 'removed', 'renamePartBundles', 'reparentTo', 'reparent_to', 'replaceBadWords', 'requestAddOwnedAccessory', 'requestKartDNAFieldUpdate', 'requestRemoveOwnedAccessory', 'rescaleToon', 'resetCameraPosition', 'resetHeight', 'resetLOD', 'resetShovelText', 'resetWaterText', 'resistanceMessages', 'restoreDefaultColorScale', 'returnResync', 'returnToWalk', 'reverseLs', 'reverseLsNames', 'reverse_ls', 'rewardHistory', 'rewardTier', 'rgbPanel', 'rightHand', 'rightHands', 'rotateSpeed', 'runSound', 'runTimeout', 'sadEyes', 'safeZonesVisited', 'savedCheesyEffect', 'savedCheesyExpireTime', 'savedCheesyHoodId', 'sbFriendAdd', 'sbFriendRemove', 'sbFriendUpdate', 'scale', 'scaleInterval', 'scavengerHuntArray', 'scrubTalk', 'select', 'sendCurrentPosition', 'sendDeleteMsg', 'sendDisableMsg', 'sendFriendsListEvent', 'sendLogMessage', 'sendLogSuspiciousEvent', 'sendToGolfCourse', 'sendUpdate', 'setAccess', 'setAccountName', 'setAchievements', 'setActivePlot', 'setActiveShadow', 'setAdminAccess', 'setAllColorScale', 'setAlphaScale', 'setAnimMultiplier', 'setAnimState', 'setAnimalSound', 'setAntialias', 'setAsGM', 'setAttrib', 'setAudioVolume', 'setAudioVolumeOff', 'setAutoRun', 'setAvatarScale', 'setAwardMailboxContents', 'setAwardNotify', 'setAwardSchedule', 'setBackpack', 'setBackpackList', 'setBankMoney', 'setBarrierData', 'setBattleId', 'setBillboardAxis', 'setBillboardPointEye', 'setBillboardPointWorld', 'setBin', 'setBlend', 'setBuffs', 'setBuildingRadar', 'setCacheable', 'setCachedData', 'setCameraCollisionsCanMove', 'setCameraFov', 'setCameraPosForPetInteraction', 'setCameraPositionByIndex', 'setCameraSettings', 'setCatalog', 'setCatalogNotify', 'setCatalogSchedule', 'setCenter', 'setChat', 'setChatAbsolute', 'setChatMuted', 'setCheesyEffect', 'setClientInterest', 'setClipPlane', 'setClipPlaneOff', 'setClothesBottomsList', 'setClothesTopsList', 'setCogCount', 'setCogIndex', 'setCogLevels', 'setCogMerits', 'setCogParts', 'setCogRadar', 'setCogStatus', 'setCogSummonsEarned', 'setCogTypes', 'setCollideMask', 'setColor', 'setColorOff', 'setColorScale', 'setColorScaleOff', 'setCommonChatFlags', 'setCompass', 'setComponentH', 'setComponentL', 'setComponentP', 'setComponentR', 'setComponentT', 'setComponentTLive', 'setComponentX', 'setComponentY', 'setComponentZ', 'setControlEffect', 'setCurrentKart', 'setCustomMessages', 'setDISLid', 'setDISLname', 'setDNA', 'setDNAString', 'setDefaultShard', 'setDefaultZone', 'setDeliverySchedule', 'setDepthOffset', 'setDepthTest', 'setDepthWrite', 'setDisguisePageFlag', 'setDisplayName', 'setEarnedExperience', 'setEffect', 'setEffects', 'setEmblems', 'setEmoteAccess', 'setEmoteState', 'setExperience', 'setFancyNametag', 'setFishCollection', 'setFishTank', 'setFishingRod', 'setFishingTrophies', 'setFlowerBasket', 'setFlowerCollection', 'setFluidPos', 'setFluidX', 'setFluidY', 'setFluidZ', 'setFog', 'setFogOff', 'setFont', 'setForceJumpIdle', 'setFriendsList', 'setFriendsListButtonActive', 'setFurnitureDirector', 'setGM', 'setGMIcon', 'setGMPartyIcon', 'setGameAccess', 'setGardenSpecials', 'setGardenStarted', 'setGardenTrophies', 'setGeom', 'setGeomNode', 'setGhostMode', 'setGiftSchedule', 'setGlasses', 'setGlassesList', 'setGolfCourseBest', 'setGolfHistory', 'setGolfHoleBest', 'setGuiConflict', 'setH', 'setHat', 'setHatList', 'setHeight', 'setHoodsVisited', 'setHostedParties', 'setHouseId', 'setHp', 'setHpr', 'setHprScale', 'setIdealCameraPos', 'setInGardenAction', 'setInstanceCount', 'setInterface', 'setInventory', 'setInviteMailNotify', 'setInvites', 'setKartAccessoriesOwned', 'setKartAccessoryColor', 'setKartBackWheelWellType', 'setKartBodyColor', 'setKartBodyType', 'setKartDecalType', 'setKartEngineBlockType', 'setKartFrontWheelWellType', 'setKartRimType', 'setKartSpoilerType', 'setKartingHistory', 'setKartingPersonalBest', 'setKartingPersonalBest2', 'setKartingTrophies', 'setLOD', 'setLODAnimation', 'setLODNode', 'setLODs', 'setLastHood', 'setLastTimeReadNews', 'setLeftDistrict', 'setLight', 'setLightOff', 'setLocalPageChat', 'setLocation', 'setLookAtPoint', 'setLookAtPositionCallbackArgs', 'setMail', 'setMailboxContents', 'setMat', 'setMaterial', 'setMaterialOff', 'setMaxAccessories', 'setMaxBankMoney', 'setMaxCarry', 'setMaxClothes', 'setMaxFishTank', 'setMaxFlowerBasket', 'setMaxHp', 'setMaxNPCFriends', 'setMaxSearchDepth', 'setMoney', 'setNPCFriendsDict', 'setName', 'setNameVisible', 'setNametagScale', 'setNametagStyle', 'setNeverDisable', 'setNormalMap', 'setNumPies', 'setOccluder', 'setOnLevelGround', 'setP', 'setPackedGolfHoleBest', 'setPageChat', 'setPageNumber', 'setParent', 'setParentStr', 'setPartiesInvitedTo', 'setPartsAdd', 'setPartsNormal', 'setPartyCanStart', 'setPartyReplies', 'setPartyStatus', 'setPickable', 'setPieType', 'setPinkSlips', 'setPlantToWater', 'setPlayRate', 'setPlayerType', 'setPos', 'setPosHpr', 'setPosHprBroadcastPeriod', 'setPosHprScale', 'setPosHprScaleShear', 'setPosIndex', 'setPosQuat', 'setPosQuatScale', 'setPosQuatScaleShear', 'setPrevTransform', 'setPromotionStatus', 'setPythonTag', 'setQuat', 'setQuatScale', 'setQuestCarryLimit', 'setQuestHistory', 'setQuests', 'setR', 'setRenderMode', 'setRenderModeFilled', 'setRenderModePerspective', 'setRenderModeThickness', 'setRenderModeWireframe', 'setResistanceMessages', 'setRewardHistory', 'setSC', 'setSCCustom', 'setSCResistance', 'setSCSinging', 'setSCToontask', 'setSa', 'setSb', 'setScale', 'setScavengerHunt', 'setScissor', 'setSg', 'setShader', 'setShaderAuto', 'setShaderInput', 'setShaderOff', 'setShadowHeight', 'setShear', 'setShoes', 'setShoesList', 'setShovel', 'setShovelAbility', 'setShovelGuiLevel', 'setShovelSkill', 'setShtickerBook', 'setShxy', 'setShxz', 'setShyz', 'setSimpleMailNotify', 'setSleepAutoReply', 'setSmH', 'setSmHpr', 'setSmPos', 'setSmPosHpr', 'setSmPosHprL', 'setSmStop', 'setSmXY', 'setSmXYH', 'setSmXYZH', 'setSmXZ', 'setSmZ', 'setSmoothWrtReparents', 'setSosPageFlag', 'setSpeed', 'setSpeedChatStyleIndex', 'setSr', 'setState', 'setStyle', 'setSubpartsComplete', 'setSx', 'setSy', 'setSystemMessage', 'setSz', 'setTag', 'setTalk', 'setTalkWhisper', 'setTeleportAccess', 'setTeleportAllowed', 'setTeleportAvailable', 'setTexGen', 'setTexHpr', 'setTexOffset', 'setTexPos', 'setTexProjector', 'setTexRotate', 'setTexScale', 'setTexTransform', 'setTexture', 'setTextureOff', 'setTickets', 'setTrackAccess', 'setTrackBonusLevel', 'setTrackProgress', 'setTransform', 'setTransparency', 'setTrophyScore', 'setTunnelIn', 'setTunnelOut', 'setTutorialAck', 'setTwoSided', 'setUnlimitedSwing', 'setWalkSpeedNormal', 'setWalkSpeedSlow', 'setWantBattles', 'setWateringCan', 'setWateringCanGuiLevel', 'setWateringCanSkill', 'setWhisperSCCustomFrom', 'setWhisperSCEmoteFrom', 'setWhisperSCFrom', 'setWhisperSCToontaskFrom', 'setWhitelistChatFlags', 'setX', 'setXY', 'setXYH', 'setXYZH', 'setXZ', 'setY', 'setZ', 'setZoneId', 'setZonesVisited', 'set_all_color_scale', 'set_alpha_scale', 'set_antialias', 'set_attrib', 'set_audio_volume', 'set_audio_volume_off', 'set_billboard_axis', 'set_billboard_point_eye', 'set_billboard_point_world', 'set_bin', 'set_clip_plane', 'set_clip_plane_off', 'set_collide_mask', 'set_color', 'set_color_off', 'set_color_scale', 'set_color_scale_off', 'set_compass', 'set_depth_offset', 'set_depth_test', 'set_depth_write', 'set_effect', 'set_effects', 'set_fluid_pos', 'set_fluid_x', 'set_fluid_y', 'set_fluid_z', 'set_fog', 'set_fog_off', 'set_h', 'set_hpr', 'set_hpr_scale', 'set_instance_count', 'set_light', 'set_light_off', 'set_mat', 'set_material', 'set_material_off', 'set_max_search_depth', 'set_name', 'set_normal_map', 'set_occluder', 'set_p', 'set_pos', 'set_pos_hpr', 'set_pos_hpr_scale', 'set_pos_hpr_scale_shear', 'set_pos_quat', 'set_pos_quat_scale', 'set_pos_quat_scale_shear', 'set_prev_transform', 'set_python_tag', 'set_quat', 'set_quat_scale', 'set_r', 'set_render_mode', 'set_render_mode_filled', 'set_render_mode_perspective', 'set_render_mode_thickness', 'set_render_mode_wireframe', 'set_sa', 'set_sb', 'set_scale', 'set_scissor', 'set_sg', 'set_shader', 'set_shader_auto', 'set_shader_input', 'set_shader_off', 'set_shear', 'set_shxy', 'set_shxz', 'set_shyz', 'set_sr', 'set_state', 'set_sx', 'set_sy', 'set_sz', 'set_tag', 'set_tex_gen', 'set_tex_hpr', 'set_tex_offset', 'set_tex_pos', 'set_tex_projector', 'set_tex_rotate', 'set_tex_scale', 'set_tex_transform', 'set_texture', 'set_texture_off', 'set_transform', 'set_transparency', 'set_two_sided', 'set_x', 'set_y', 'set_z', 'setupAnimationEvents', 'setupControls', 'setupEyelashes', 'setupHead', 'setupMuzzles', 'setupPickTrigger', 'setupToonNodes', 'shadowFileName', 'shadowJoint', 'shadowPlacer', 'shadowReach', 'shardPage', 'shearInterval', 'shoes', 'shoesList', 'shoulderHeight', 'shovel', 'shovelAbility', 'shovelButtonActiveCount', 'shovelModel', 'shovelRelatedDoId', 'shovelSkill', 'show', 'showAllBounds', 'showAllDescendants', 'showAllParts', 'showAngryMuzzle', 'showBooks', 'showBounds', 'showCS', 'showClarabelleGui', 'showEars', 'showEyelashes', 'showFurnitureGui', 'showGardeningGui', 'showHpString', 'showHpText', 'showLaughMuzzle', 'showName', 'showNametag2d', 'showNametag3d', 'showNormalMuzzle', 'showPart', 'showSadMuzzle', 'showShadow', 'showShovelButton', 'showShovelButtonFake', 'showSiblings', 'showSmileMuzzle', 'showSurpriseMuzzle', 'showThrough', 'showTightBounds', 'showWateringCanButton', 'showWateringCanButtonFake', 'show_bounds', 'show_through', 'show_tight_bounds', 'showingShovel', 'showingWateringCan', 'shutdownSmartCamera', 'simpleMailNotify', 'sleepCallback', 'sleepFlag', 'sleepSwimTest', 'sleepTimeout', 'smoothPosition', 'smoothStarted', 'smoother', 'snowMen', 'sosPage', 'sosPageFlag', 'soundChatBubble', 'soundPhoneRing', 'soundRun', 'soundSequenceList', 'soundSystemMessage', 'soundTeleport', 'soundWalk', 'soundWhisper', 'speedChatStyleIndex', 'splash', 'splatTracks', 'squish', 'standWalkRunReverse', 'startBlink', 'startBobSwimTask', 'startChat', 'startGlitchKiller', 'startLookAround', 'startPosHprBroadcast', 'startQuestMap', 'startRunWatch', 'startSleepSwimTest', 'startSleepWatch', 'startSmooth', 'startStareAt', 'startStareAtHeadPoint', 'startTrackAnimToSpeed', 'startUpdateSmartCamera', 'stash', 'stashBodyCollisions', 'stashTo', 'stash_to', 'status', 'stop', 'stopAnimations', 'stopBlink', 'stopBobSwimTask', 'stopChat', 'stopGlitchKiller', 'stopJoint', 'stopJumpLandTask', 'stopLookAround', 'stopLookAroundNow', 'stopMoveFurniture', 'stopPosHprBroadcast', 'stopQuestMap', 'stopRunWatch', 'stopSleepSwimTest', 'stopSleepWatch', 'stopSmooth', 'stopSound', 'stopStareAt', 'stopStareAtNow', 'stopTrackAnimToSpeed', 'stopUpdateSmartCamera', 'stopped', 'storedActiveState', 'stunToon', 'stunTrack', 'style', 'subdivideCollisions', 'suggestResync', 'suitPage', 'surpriseEyes', 'swapToonColor', 'swapToonHead', 'swapToonLegs', 'swapToonTorso', 'swimTimeout', 'swimTimeoutAction', 'swimmingFlag', 'switches', 'systemMsgAckGui', 'systemMsgAckGuiDoneEvent', 'systemWarning', 'takeDamage', 'takeOffSuit', 'taskName', 'teleportAllowed', 'teleportGiveup', 'teleportGreeting', 'teleportQuery', 'teleportResponse', 'teleportZoneArray', 'tempGreySpacing', 'thinkPos', 'this', 'this_metatype', 'ticker', 'tickets', 'timeFriendsListChanged', 'toggleVis', 'toonName', 'toonUp', 'torsoParts', 'tossPie', 'tossPieStart', 'tossTrack', 'touchingPlantList', 'track', 'trackAnimToSpeed', 'trackArray', 'trackBonusLevel', 'trackPage', 'trackProgress', 'trackProgressId', 'travCollisionsFloor', 'travCollisionsLOS', 'travCollisionsPusher', 'trickOrTreatMilestoneMet', 'trickOrTreatTargetMet', 'trophyScore', 'trophyStar', 'trophyStarSpeed', 'tunnelCenterInfluence', 'tunnelCenterOffset', 'tunnelIn', 'tunnelOut', 'tunnelPivotPos', 'tunnelTrack', 'tunnelX', 'tutorialAck', 'understandable', 'unifyTextureStages', 'unify_texture_stages', 'uniqueName', 'unlimitedSwing', 'unloadAnims', 'unlock', 'unlockGardeningButtons', 'unparentToonParts', 'unpauseGlitchKiller', 'unsetCameraPosForPetInteraction', 'unstash', 'unstashAll', 'unstashBodyCollisions', 'unstash_all', 'update', 'updateAllRequiredFields', 'updateGMNameTag', 'updateInvite', 'updateInviteMailNotify', 'updatePieButton', 'updateReply', 'updateRequiredFields', 'updateRequiredOtherFields', 'updateSmartCamera', 'updateSmartCameraCollisionLineSegment', 'updateToonDNA', 'useGhostControls', 'useLOD', 'useSpecialResponse', 'useSwimControls', 'useTwoDControls', 'useWalkControls', 'validateSubparts', 'verboseState', 'verifyComplete', 'verifySubpartsComplete', 'verify_complete', 'waitPending', 'wake', 'wakeUp', 'walkSound', 'wantBattles', 'wantDevCameraPositions', 'wantLegacyLifter', 'wantMouse', 'wantSmoothPosBroadcastTask', 'wantStatePrint', 'wantsActive', 'wantsSmoothing', 'wateringCan', 'wateringCanButtonActiveCount', 'wateringCanModel', 'wateringCanSkill', 'weeklyCatalog', 'whisperSCCustomTo', 'whisperSCEmoteTo', 'whisperSCTo', 'whisperSCToontaskTo', 'whiteListEnabled', 'whitelistChatFlags', 'winterCarolingTargetMet', 'writeBamFile', 'writeBamStream', 'writeBounds', 'write_bam_file', 'write_bam_stream', 'write_bounds', 'wrtReparentTo', 'wrt_reparent_to', 'zoneId']
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
frame rate: 7.3 fps|0.831d|9 avs||3127|3130||0x1002|0x6738|861.4MB|1128.4MB|16330.4MB|1715|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Battle Event localtoon-battle-event-584
Battle Event localtoon-battle-event-589
Battle Event localtoon-battle-event-594
Battle Event localtoon-battle-event-599
Battle Event localtoon-battle-event-604
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3300.pdna
Reading DNA file... phase_4/dna/storage.pdna
Reading DNA file... phase_3.5/dna/storage_interior.pdna
Reading DNA file... phase_8/dna/storage_BR.pdna
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-609
Battle Event localtoon-battle-event-614
Battle Event localtoon-battle-event-619
Actor Little Zippy, parts = ['head', 'legs', 'torso'], LODs = ['1000', '500', '250'], anims = ['right-hand-start', 'firehose', 'rotateL-putt', 'slip-forward', 'catch-eatnrun', 'tickle', 'water-gun', 'leverNeutral', 'swim', 'catch-run', 'sad-neutral', 'pet-loop', 'jump-squat', 'taunt', 'wave', 'reel-neutral', 'pole-neutral', 'bank', 'scientistGame', 'takePhone', 'good-putt', 'victory', 'lose', 'cringe', 'right', 'headdown-putt', 'conked', 'jump', 'into-putt', 'fish-end', 'running-jump-land', 'shrug', 'sprinkle-dust', 'hold-bottle', 'right-hand', 'melt', 'pet-start', 'look-putt', 'loop-putt', 'lookloop-putt', 'juggle', 'run', 'pushbutton', 'sidestep-right', 'water', 'right-point-start', 'jump-land', 'struggle', 'running-jump', 'callPet', 'throw', 'catch-eatneutral', 'tug-o-war', 'bow', 'swing', 'climb', 'scientistWork', 'think', 'catch-intro-throw', 'walk', 'down', 'pole', 'periscope', 'duck', 'curtsy', 'bad-putt', 'loop-dig', 'angry', 'bored', 'swing-putt', 'pet-end', 'spit', 'right-point', 'start-dig', 'castlong', 'running-jump-squat', 'neutral', 'jump-idle', 'reel', 'slip-backward', 'sound', 'sidestep-left', 'up', 'fish-again', 'cast', 'phoneBack', 'phoneNeutral', 'scientistJealous', 'battlecast', 'sit-start', 'toss', 'happy-dance', 'confused', 'teleport', 'sit', 'sad-walk', 'give-props-start', 'book', 'fish-neutral', 'scientistEmcee', 'leverPull', 'tutorial-neutral', 'badloop-putt', 'give-props', 'hold-magnet', 'hypnotize', 'left-point', 'leverReach', 'feedPet', 'reel-H', 'applause', 'smooch', 'rotateR-putt', 'running-jump-idle', 'push', 'catch-neutral', 'left']
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Actor Little Zippy, parts = ['head', 'legs', 'torso'], LODs = ['1000', '500', '250'], anims = ['right-hand-start', 'firehose', 'rotateL-putt', 'slip-forward', 'catch-eatnrun', 'tickle', 'water-gun', 'leverNeutral', 'swim', 'catch-run', 'sad-neutral', 'pet-loop', 'jump-squat', 'taunt', 'wave', 'reel-neutral', 'pole-neutral', 'bank', 'scientistGame', 'takePhone', 'good-putt', 'victory', 'lose', 'cringe', 'right', 'headdown-putt', 'conked', 'jump', 'into-putt', 'fish-end', 'running-jump-land', 'shrug', 'sprinkle-dust', 'hold-bottle', 'right-hand', 'melt', 'pet-start', 'look-putt', 'loop-putt', 'lookloop-putt', 'juggle', 'run', 'pushbutton', 'sidestep-right', 'water', 'right-point-start', 'jump-land', 'struggle', 'running-jump', 'callPet', 'throw', 'catch-eatneutral', 'tug-o-war', 'bow', 'swing', 'climb', 'scientistWork', 'think', 'catch-intro-throw', 'walk', 'down', 'pole', 'periscope', 'duck', 'curtsy', 'bad-putt', 'loop-dig', 'angry', 'bored', 'swing-putt', 'pet-end', 'spit', 'right-point', 'start-dig', 'castlong', 'running-jump-squat', 'neutral', 'jump-idle', 'reel', 'slip-backward', 'sound', 'sidestep-left', 'up', 'fish-again', 'cast', 'phoneBack', 'phoneNeutral', 'scientistJealous', 'battlecast', 'sit-start', 'toss', 'happy-dance', 'confused', 'teleport', 'sit', 'sad-walk', 'give-props-start', 'book', 'fish-neutral', 'scientistEmcee', 'leverPull', 'tutorial-neutral', 'badloop-putt', 'give-props', 'hold-magnet', 'hypnotize', 'left-point', 'leverReach', 'feedPet', 'reel-H', 'applause', 'smooch', 'rotateR-putt', 'running-jump-idle', 'push', 'catch-neutral', 'left']
Battle Event localtoon-battle-event-624
Battle Event localtoon-battle-event-629
Help on LocalToon in module toontown.toon.LocalToon object:

class LocalToon(toontown.toon.DistributedToon.DistributedToon, otp.avatar.LocalAvatar.LocalAvatar)
 |  Method resolution order:
 |      LocalToon
 |      toontown.toon.DistributedToon.DistributedToon
 |      otp.avatar.DistributedPlayer.DistributedPlayer
 |      otp.avatar.LocalAvatar.LocalAvatar
 |      otp.avatar.DistributedAvatar.DistributedAvatar
 |      direct.actor.DistributedActor.DistributedActor
 |      toontown.toon.Toon.Toon
 |      direct.distributed.DistributedSmoothNode.DistributedSmoothNode
 |      direct.distributed.DistributedNode.DistributedNode
 |      direct.distributed.DistributedObject.DistributedObject
 |      direct.distributed.DistributedObjectBase.DistributedObjectBase
 |      otp.avatar.Avatar.Avatar
 |      toontown.toon.ToonHead.ToonHead
 |      direct.actor.Actor.Actor
 |      direct.showbase.DirectObject.DirectObject
 |      panda3d.core.NodePath
 |      dtoolconfig.DTOOL_SUPER_BASE111
 |      __builtin__.object
 |      otp.avatar.ShadowCaster.ShadowCaster
 |      otp.avatar.PlayerBase.PlayerBase
 |      otp.distributed.TelemetryLimited.TelemetryLimited
 |      direct.distributed.DistributedSmoothNodeBase.DistributedSmoothNodeBase
 |      toontown.distributed.DelayDeletable.DelayDeletable
 |  
 |  Methods defined here:
 |  
 |  __init__(self, cr)
 |  
 |  addEventsPage(self)
 |  
 |  addGolfPage(self)
 |  
 |  addKartPage(self)
 |  
 |  addNewsPage(self)
 |  
 |  addShovelRelatedDoId(self, doId)
 |  
 |  addTIPPage(self)
 |  
 |  allowHardLand(self)
 |  
 |  announceGenerate(self)
 |  
 |  autoSetActivePlot(self)
 |  
 |  b_setAnimState(self, animName, animMultiplier=1.0, callback=None, extraArgs=[])
 |  
 |  beginAllowPies(self)
 |  
 |  canChat(self)
 |  
 |  changeButtonText(self, button, text)
 |  
 |  cheatCogdoMazeGame(self, kindOfCheat=0)
 |  
 |  clarabelleNewsPageCollision(self, show=True)
 |  
 |  clearPlantToWater(self, plantId)
 |  
 |  clickedWhisper(self, doId, isPlayer=None)
 |  
 |  createSystemMsgAckGui(self)
 |  
 |  d_teleportResponse(self, avId, available, shardId, hoodId, zoneId, sendToId=None)
 |  
 |  delete(self)
 |  
 |  disable(self)
 |  
 |  disableBodyCollisions(self)
 |  
 |  displaySystemClickableWhisper(self, fromId, chatString, whisperType)
 |  
 |  displayTalkAccount(self, fromId, senderName, rawString, mods)
 |  
 |  displayTalkWhisper(self, fromId, avatarName, rawString, mods)
 |  
 |  displayWhisper(self, fromId, chatString, whisperType)
 |  
 |  doTeleportResponse(self, fromAvatar, toAvatar, avId, available, shardId, hoodId, zoneId, sendToId)
 |  
 |  endAllowPies(self)
 |  
 |  getAccountDays(self)
 |  
 |  getAvPosStr(self)
 |  
 |  getGameAccess = returnGameAccess(*args)
 |  
 |  getGuiConflict(self, con)
 |  
 |  getLastTimeReadNews(self)
 |  
 |  getPetId(self)
 |  
 |  getPieBubble(self)
 |  
 |  getZoneId(self)
 |  
 |  glitchKiller(self, taskFooler=0)
 |  
 |  handleAllGardeningButtonsHidden(self)
 |  
 |  handleEndPlantInteraction(self, object=None, replacement=0)
 |  
 |  handleTunnelIn(self, startTime, endX, x, y, z, h)
 |  
 |  handleTunnelOut(self, startTime, startX, startY, x, y, z, h)
 |  
 |  hasActiveBoardingGroup(self)
 |  
 |  hasPet(self)
 |  
 |  hasPlant(self)
 |  
 |  hideClarabelleGui(self)
 |  
 |  hideFurnitureGui(self)
 |  
 |  hideGardeningGui(self)
 |  
 |  hideShovelButton(self, deduct=0)
 |  
 |  hideShovelButtonFake(self, deduct=0)
 |  
 |  hideSystemMsgAckGui(self)
 |  
 |  hideWateringCanButton(self, deduct=0)
 |  
 |  hideWateringCanButtonFake(self, deduct=0)
 |  
 |  initInterface(self)
 |  
 |  interruptPie(self)
 |  
 |  isLocal(self)
 |  
 |  isReadingNews(self)
 |  
 |  levelShovel(self, change=1)
 |  
 |  levelWater(self, change=1)
 |  
 |  loadClarabelleGui(self)
 |  
 |  loadDisguisePages(self)
 |  
 |  loadFurnitureGui(self)
 |  
 |  loadGardenPages(self)
 |  
 |  loadGardeningGui(self)
 |  
 |  loadPhase55Stuff(self)
 |  
 |  loadSosPages(self)
 |  
 |  localPresentPie(self, time)
 |  
 |  localTossPie(self, power)
 |  
 |  lockGardeningButtons(self, task=None)
 |  
 |  makePiePowerMeter(self)
 |  
 |  newCatalogNotify(self)
 |  
 |  obscureClarabelleButton(self, increment)
 |  
 |  obscureFriendsListButton(self, increment)
 |  
 |  obscureMoveFurnitureButton(self, increment)
 |  
 |  pauseGlitchKiller(self)
 |  
 |  pieFinishedFlying(self, sequence)
 |  
 |  promoteShovel(self, shovelLevel=0)
 |  
 |  promoteShovelSkill(self, shovelLevel, shovelSkill)
 |  
 |  promoteWateringCan(self, wateringCanlevel=0)
 |  
 |  reactivateShovel(self, task=None)
 |  
 |  reactivateWater(self, task=None)
 |  
 |  refreshOnscreenButtons(self)
 |  
 |  removeShovelRelatedDoId(self, doId)
 |  
 |  resetShovelText(self)
 |  
 |  resetWaterText(self)
 |  
 |  sbFriendAdd(self, id, info)
 |  
 |  sbFriendRemove(self, id)
 |  
 |  sbFriendUpdate(self, id, info)
 |  
 |  setAchievements(self, achievements)
 |  
 |  setActivePlot(self, doId)
 |  
 |  setAnimState lambda *args, **kwds
 |  
 |  setAsGM(self, state)
 |  
 |  setDNA(self, dna)
 |  
 |  setFlowerBasket(self, speciesList, varietyList)
 |  
 |  setFriendsListButtonActive(self, active)
 |  
 |  setFurnitureDirector(self, avId, furnitureManager)
 |  
 |  setGardenStarted(self, bStarted)
 |  
 |  setGhostMode(self, flag)
 |  
 |  setGuiConflict(self, con)
 |  
 |  setInGardenAction(self, actionObject, fromObject=None)
 |  
 |  setLastTimeReadNews(self, newTime)
 |  
 |  setName(self, name)
 |  
 |  setPinkSlips(self, pinkSlips)
 |  
 |  setPlantToWater(self, plantId)
 |  
 |  setShovel(self, shovelId)
 |  
 |  setShovelAbility(self, ability)
 |  
 |  setShovelGuiLevel(self, level=0)
 |  
 |  setShovelSkill(self, skillLevel)
 |  
 |  setSleepAutoReply(self, fromId)
 |  
 |  setWantBattles(self, wantBattles)
 |  
 |  setWateringCan(self, wateringCanId)
 |  
 |  setWateringCanGuiLevel(self, level=0)
 |  
 |  setWateringCanSkill(self, skillLevel)
 |  
 |  setZoneId(self, value)
 |  
 |  showClarabelleGui(self, mailboxItems)
 |  
 |  showFurnitureGui(self)
 |  
 |  showGardeningGui(self)
 |  
 |  showShovelButton(self, add=0)
 |  
 |  showShovelButtonFake(self, add=0)
 |  
 |  showWateringCanButton(self, add=0)
 |  
 |  showWateringCanButtonFake(self, add=0)
 |  
 |  startChat(self)
 |  
 |  startGlitchKiller(self)
 |  
 |  startQuestMap(self)
 |  
 |  stopChat(self)
 |  
 |  stopGlitchKiller(self)
 |  
 |  stopMoveFurniture(self)
 |  
 |  stopQuestMap(self)
 |  
 |  swimTimeoutAction(self)
 |  
 |  systemWarning(self, warningText='Acknowledge this system message.')
 |  
 |  thinkPos(self)
 |  
 |  tunnelIn(self, tunnelOrigin)
 |  
 |  tunnelOut(self, tunnelOrigin)
 |  
 |  unlockGardeningButtons(self, task=None)
 |  
 |  unpauseGlitchKiller(self)
 |  
 |  updatePieButton(self)
 |  
 |  verboseState(self)
 |  
 |  wantLegacyLifter(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  zoneId
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  gameAccess = 2
 |  
 |  neverDisable = 1
 |  
 |  piePowerExponent = 0.7500000000000001
 |  
 |  piePowerSpeed = 0.2
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from toontown.toon.DistributedToon.DistributedToon:
 |  
 |  announceBingo(self)
 |  
 |  announcePartyStarted(self, partyId)
 |  
 |  applyBuffs(self)
 |  
 |  attachShovel(self)
 |  
 |  attachWateringCan(self)
 |  
 |  b_setEmoteState(self, animIndex, animMultiplier)
 |  
 |  b_setHouseId(self, id)
 |  
 |  b_setSCSinging(self, msgIndex)
 |  
 |  b_setSCToontask(self, taskId, toNpcId, toonProgress, msgIndex)
 |  
 |  b_setSpeedChatStyleIndex(self, index)
 |  
 |  b_setTunnelIn(self, endX, tunnelOrigin)
 |  
 |  b_setTunnelOut(self, startX, startY, tunnelOrigin)
 |  
 |  b_squish(self, damage)
 |  
 |  battleSOS(self, requesterId)
 |  
 |  catalogGenAccessories(self, avId)
 |  
 |  catalogGenClothes(self, avId)
 |  
 |  checkGagBonus(self, track, level)
 |  
 |  cleanUpSoundList(self)
 |  
 |  cleanupPieInHand(self)
 |  
 |  cleanupPies(self)
 |  
 |  cogSummonsResponse(self, returnCode, suitIndex, doId)
 |  
 |  d_battleSOS(self, requesterId, sendToId=None)
 |  
 |  d_playSplashEffect(self, x, y, z)
 |  
 |  d_reqCogSummons(self, type, suitIndex)
 |  
 |  d_reqSCResistance(self, msgIndex)
 |  
 |  d_requestDeleteQuest(self, questDesc)
 |  
 |  d_setAnimState(self, animName, animMultiplier=1.0, timestamp=None, extraArgs=[])
 |  
 |  d_setEmoteState(self, animIndex, animMultiplier)
 |  
 |  d_setHouseId(self, id)
 |  
 |  d_setParent(self, parentToken)
 |  
 |  d_setSCSinging(self, msgIndex)
 |  
 |  d_setSCToontask(self, taskId, toNpcId, toonProgress, msgIndex)
 |  
 |  d_setSpeedChatStyleIndex(self, index)
 |  
 |  d_setTunnelIn(self, timestamp, endX, x, y, z, h)
 |  
 |  d_setTunnelOut(self, timestamp, startX, startY, x, y, z, h)
 |  
 |  d_squish(self, damage)
 |  
 |  d_updateGMNameTag(self)
 |  
 |  detachShovel(self)
 |  
 |  detachWateringCan(self)
 |  
 |  died(self)
 |  
 |  displayTalk(self, chatString, mods=None)
 |  
 |  doIHaveRequiredTrees(self, track, level)
 |  
 |  doSmoothTask(self, task)
 |  
 |  enterTeleportOut(self, *args, **kw)
 |  
 |  exitTeleportOut(self)
 |  
 |  generate(self)
 |  
 |  getAccessoryByType(self, accType)
 |  
 |  getAvIdName(self)
 |  
 |  getBackpackList(self)
 |  
 |  getBankMoney(self)
 |  
 |  getBoxCapability(self)
 |  
 |  getClothesBottomsList(self)
 |  
 |  getClothesTopsList(self)
 |  
 |  getCogLevels(self)
 |  
 |  getCogParts(self)
 |  
 |  getCogSummonsEarned(self)
 |  
 |  getCogTypes(self)
 |  
 |  getDialogueArray(self, *args)
 |  
 |  getEmblems(self)
 |  
 |  getFishCollection(self)
 |  
 |  getFishTank(self)
 |  
 |  getFishingRod(self)
 |  
 |  getFishingTrophies(self)
 |  
 |  getFlowerBasket(self)
 |  
 |  getFlowerCollection(self)
 |  
 |  getGardenSpecials(self)
 |  
 |  getGardenStarted(self)
 |  
 |  getGardenTrophies(self)
 |  
 |  getGlassesList(self)
 |  
 |  getGolfCourseBest(self)
 |  
 |  getGolfCups(self)
 |  
 |  getGolfHistory(self)
 |  
 |  getGolfHoleBest(self)
 |  
 |  getGolfTrophies(self)
 |  
 |  getHatList(self)
 |  
 |  getHouseId(self)
 |  
 |  getInviteForPartyId(self, partyId)
 |  
 |  getInvitesToShowInMailbox(self)
 |  
 |  getKartAccessoriesOwned(self)
 |  
 |  getKartAccessoryColor(self)
 |  
 |  getKartBackWheelWellType(self)
 |  
 |  getKartBodyColor(self)
 |  
 |  getKartBodyType(self)
 |  
 |  getKartDNA(self)
 |  
 |  getKartDecalType(self)
 |  
 |  getKartEngineBlockType(self)
 |  
 |  getKartFrontWheelWellType(self)
 |  
 |  getKartRimType(self)
 |  
 |  getKartSpoilerType(self)
 |  
 |  getKartingHistory(self)
 |  
 |  getKartingPersonalBest(self)
 |  
 |  getKartingPersonalBest2(self)
 |  
 |  getKartingPersonalBestAll(self)
 |  
 |  getKartingTrophies(self)
 |  
 |  getMaxAccessories(self)
 |  
 |  getMaxBankMoney(self)
 |  
 |  getMaxCarry(self)
 |  
 |  getMaxClothes(self)
 |  
 |  getMaxFishTank(self)
 |  
 |  getMaxFlowerBasket(self)
 |  
 |  getMaxMoney(self)
 |  
 |  getMaxNPCFriends(self)
 |  
 |  getMoney(self)
 |  
 |  getMyTrees(self)
 |  
 |  getNPCFriendsDict(self)
 |  
 |  getNametagStyle(self)
 |  
 |  getNearbyPlayers(self, radius, includeSelf=True)
 |  
 |  getNumInvitesToShowInMailbox(self)
 |  
 |  getOnePartyInvitedTo(self, partyId)
 |  
 |  getPinkSlips(self)
 |  
 |  getPosIndex(self)
 |  
 |  getQuestCarryLimit(self)
 |  
 |  getQuestHistory(self)
 |  
 |  getRequestID(self)
 |  
 |  getResistanceMessageCharges(self, textId)
 |  
 |  getRewardHistory(self)
 |  
 |  getScavengerHunt(self)
 |  
 |  getShadowJoint(self)
 |  
 |  getShoesList(self)
 |  
 |  getShovelModel(self)
 |  
 |  getSpeedChatStyleIndex(self)
 |  
 |  getTeleportAccess(self)
 |  
 |  getTickets(self)
 |  
 |  getTotalMoney(self)
 |  
 |  getTrackAccess(self)
 |  
 |  getTrackBonusLevel(self, track=None)
 |  
 |  getTrackProgress(self)
 |  
 |  getTrackProgressAsArray(self, maxLength=15)
 |  
 |  getTunnelInToonTrack(self, endX, tunnelOrigin)
 |  
 |  getTunnelOutToonTrack(self, startX, startY, tunnelOrigin)
 |  
 |  getUnlimitedSwing(self)
 |  
 |  getWateringCanModel(self)
 |  
 |  hasCogSummons(self, suitIndex, type=None)
 |  
 |  hasKart(self)
 |  
 |  hasPlayedGolf(self)
 |  
 |  hasTeleportAccess(self, zoneId)
 |  
 |  hasTrackAccess(self, track)
 |  
 |  isAvFriend(self, avId)
 |  
 |  isClosetFull(self, extraClothes=0)
 |  
 |  isCog(self)
 |  
 |  isEnoughEmblemsToBuy(self, itemEmblemPrices)
 |  
 |  isEnoughMoneyAndEmblemsToBuy(self, moneyPrice, itemEmblemPrices)
 |  
 |  isFishTankFull(self)
 |  
 |  isFlowerBasketFull(self)
 |  
 |  isTreePlanted(self, track, level)
 |  
 |  isTrunkFull(self, extraAccessories=0)
 |  
 |  pieFinishedSplatting(self, sequence)
 |  
 |  pieSplat(self, x, y, z, sequence, pieCode, timestamp32)
 |  
 |  playCurrentDialogue(self, dialogue, chatFlags, interrupt=1)
 |  
 |  playDialogue(self, type, length, delay=0.0)
 |  
 |  playDialogueForString(self, chatString, delay=0.0)
 |  
 |  playSplashEffect(self, x, y, z)
 |  
 |  presentPie(self, x, y, z, h, timestamp32)
 |  
 |  readyForPromotion(self, dept)
 |  
 |  reconsiderCheesyEffect(self, lerpTime=0)
 |  
 |  refreshName(self)
 |  
 |  releaseKart(self)
 |  
 |  removeFancyNametag(self)
 |  
 |  removeGMIcon(self)
 |  
 |  replaceBadWords(self, text)
 |  
 |  requestAddOwnedAccessory(self, accessoryId)
 |  
 |  requestKartDNAFieldUpdate(self, dnaField, fieldValue)
 |  
 |  requestRemoveOwnedAccessory(self, accessoryId)
 |  
 |  scrubTalk(self, message, mods)
 |  
 |  sendLogMessage(self, message)
 |  
 |  sendLogSuspiciousEvent(self, msg)
 |  
 |  sendToGolfCourse(self, zoneId)
 |  
 |  setAccess(self, access)
 |  
 |  setAnimalSound(self, index)
 |  
 |  setAwardMailboxContents(self, awardMailboxContents)
 |  
 |  setAwardNotify(self, awardNotify)
 |  
 |  setAwardSchedule(self, onOrder)
 |  
 |  setBackpack(self, idx, textureIdx, colorIdx)
 |  
 |  setBackpackList(self, clothesList)
 |  
 |  setBankMoney(self, money)
 |  
 |  setBattleId(self, battleId)
 |  
 |  setBuffs(self, buffs)
 |  
 |  setBuildingRadar(self, radar)
 |  
 |  setCatalog(self, monthlyCatalog, weeklyCatalog, backCatalog)
 |  
 |  setCatalogNotify(self, catalogNotify, mailboxNotify)
 |  
 |  setCatalogSchedule(self, currentWeek, nextTime)
 |  
 |  setChatAbsolute(self, chatString, chatFlags, dialogue=None, interrupt=1, quiet=0)
 |  
 |  setChatMuted(self, chatString, chatFlags, dialogue=None, interrupt=1, quiet=0)
 |  
 |  setCheesyEffect(self, effect, hoodId, expireTime)
 |  
 |  setClientInterest(self, zoneId)
 |  
 |  setClothesBottomsList(self, clothesList)
 |  
 |  setClothesTopsList(self, clothesList)
 |  
 |  setCogCount(self, cogCountList)
 |  
 |  setCogIndex(self, index)
 |  
 |  setCogLevels(self, levels)
 |  
 |  setCogMerits(self, merits)
 |  
 |  setCogParts(self, parts)
 |  
 |  setCogRadar(self, radar)
 |  
 |  setCogStatus(self, cogStatusList)
 |  
 |  setCogSummonsEarned(self, cogSummonsEarned)
 |  
 |  setCogTypes(self, types)
 |  
 |  setCurrentKart(self, avId)
 |  
 |  setCustomMessages(self, customMessages)
 |  
 |  setDNAString(self, dnaString)
 |  
 |  setDefaultShard(self, shard)
 |  
 |  setDefaultZone(self, zoneId)
 |  
 |  setDeliverySchedule(self, onOrder)
 |  
 |  setDisguisePageFlag(self, flag)
 |  
 |  setDisplayName(self, str)
 |  
 |  setEarnedExperience(self, earnedExp)
 |  
 |  setEmblems(self, emblems)
 |  
 |  setEmoteAccess(self, bits)
 |  
 |  setEmoteState(self, animIndex, animMultiplier, timestamp=None)
 |  
 |  setExperience(self, experience)
 |  
 |  setFancyNametag(self, name=None)
 |  
 |  setFishCollection(self, genusList, speciesList, weightList)
 |  
 |  setFishTank(self, genusList, speciesList, weightList)
 |  
 |  setFishingRod(self, rodId)
 |  
 |  setFishingTrophies(self, trophyList)
 |  
 |  setFlowerCollection(self, speciesList, varietyList)
 |  
 |  setGM(self, type)
 |  
 |  setGMIcon(self, gmType=None)
 |  
 |  setGMPartyIcon(self)
 |  
 |  setGameAccess(self, access)
 |  
 |  setGardenSpecials(self, specials)
 |  
 |  setGardenTrophies(self, trophyList)
 |  
 |  setGiftSchedule(self, onGiftOrder)
 |  
 |  setGlasses(self, idx, textureIdx, colorIdx)
 |  
 |  setGlassesList(self, clothesList)
 |  
 |  setGolfCourseBest(self, courseBest)
 |  
 |  setGolfHistory(self, history)
 |  
 |  setGolfHoleBest(self, holeBest)
 |  
 |  setHat(self, idx, textureIdx, colorIdx)
 |  
 |  setHatList(self, clothesList)
 |  
 |  setHoodsVisited(self, hoods)
 |  
 |  setHostedParties(self, hostedParties)
 |  
 |  setHouseId(self, id)
 |  
 |  setInterface(self, string)
 |  
 |  setInventory(self, inventoryNetString)
 |  
 |  setInviteMailNotify(self, inviteMailNotify)
 |  
 |  setInvites(self, invites)
 |  
 |  setKartAccessoriesOwned(self, accessories)
 |  
 |  setKartAccessoryColor(self, accColor)
 |  
 |  setKartBackWheelWellType(self, bwwType)
 |  
 |  setKartBodyColor(self, bodyColor)
 |  
 |  setKartBodyType(self, bodyType)
 |  
 |  setKartDecalType(self, decalType)
 |  
 |  setKartEngineBlockType(self, ebType)
 |  
 |  setKartFrontWheelWellType(self, fwwType)
 |  
 |  setKartRimType(self, rimsType)
 |  
 |  setKartSpoilerType(self, spType)
 |  
 |  setKartingHistory(self, history)
 |  
 |  setKartingPersonalBest(self, bestTimes)
 |  
 |  setKartingPersonalBest2(self, bestTimes2)
 |  
 |  setKartingTrophies(self, trophyList)
 |  
 |  setLastHood(self, lastHood)
 |  
 |  setMail(self, mail)
 |  
 |  setMailboxContents(self, mailboxContents)
 |  
 |  setMaxAccessories(self, max)
 |  
 |  setMaxBankMoney(self, maxMoney)
 |  
 |  setMaxCarry(self, maxCarry)
 |  
 |  setMaxClothes(self, max)
 |  
 |  setMaxFishTank(self, maxTank)
 |  
 |  setMaxFlowerBasket(self, maxFlowerBasket)
 |  
 |  setMaxHp(self, hitPoints)
 |  
 |  setMaxNPCFriends(self, max)
 |  
 |  setMoney(self, money)
 |  
 |  setNPCFriendsDict(self, NPCFriendsList)
 |  
 |  setNametagStyle(self, nametagStyle)
 |  
 |  setNumPies(self, numPies)
 |  
 |  setPackedGolfHoleBest(self, packedHoleBest)
 |  
 |  setPartiesInvitedTo(self, partiesInvitedTo)
 |  
 |  setPartyCanStart(self, partyId)
 |  
 |  setPartyReplies(self, replies)
 |  
 |  setPartyStatus(self, partyId, newStatus)
 |  
 |  setPieType(self, pieType)
 |  
 |  setPosIndex(self, index)
 |  
 |  setPromotionStatus(self, status)
 |  
 |  setQuestCarryLimit(self, limit)
 |  
 |  setQuestHistory(self, questList)
 |  
 |  setQuests(self, flattenedQuests)
 |  
 |  setResistanceMessages(self, resistanceMessages)
 |  
 |  setRewardHistory(self, rewardTier, rewardList)
 |  
 |  setSCResistance(self, msgIndex, nearbyToons=[])
 |  
 |  setSCSinging(self, msgIndex)
 |  
 |  setSCToontask(self, taskId, toNpcId, toonProgress, msgIndex)
 |  
 |  setScavengerHunt(self, scavengerHuntArray)
 |  
 |  setShoes(self, idx, textureIdx, colorIdx)
 |  
 |  setShoesList(self, clothesList)
 |  
 |  setShtickerBook(self, string)
 |  
 |  setSimpleMailNotify(self, simpleMailNotify)
 |  
 |  setSosPageFlag(self, flag)
 |  
 |  setSpeedChatStyleIndex(self, index)
 |  
 |  setTalk(self, fromAV, fromAC, avatarName, chat, mods, flags)
 |  
 |  setTalkWhisper(self, fromAV, fromAC, avatarName, chat, mods, flags)
 |  
 |  setTeleportAccess(self, teleportZoneArray)
 |  
 |  setTickets(self, numTickets)
 |  
 |  setTrackAccess(self, trackArray)
 |  
 |  setTrackBonusLevel(self, trackArray)
 |  
 |  setTrackProgress(self, trackId, progress)
 |  
 |  setTrophyScore(self, score)
 |  
 |  setTunnelIn(self, timestamp, endX, x, y, z, h)
 |  
 |  setTunnelOut(self, timestamp, startX, startY, x, y, z, h)
 |  
 |  setTutorialAck(self, tutorialAck)
 |  
 |  setUnlimitedSwing(self, unlimitedSwing)
 |  
 |  setWhisperSCCustomFrom(self, fromId, msgIndex)
 |  
 |  setWhisperSCEmoteFrom(self, fromId, emoteId)
 |  
 |  setWhisperSCFrom(self, fromId, msgIndex)
 |  
 |  setWhisperSCToontaskFrom(self, fromId, taskId, toNpcId, toonProgress, msgIndex)
 |  
 |  setZonesVisited(self, hoods)
 |  
 |  showHpText(self, number, bonus=0, scale=1, hasInteractivePropBonus=False)
 |  
 |  squish(self, damage)
 |  
 |  toonUp(self, hpGained, hasInteractivePropBonus=False)
 |  
 |  tossPie(self, x, y, z, h, sequence, power, throwType, timestamp32)
 |  
 |  trickOrTreatMilestoneMet(self)
 |  
 |  trickOrTreatTargetMet(self, beanAmount)
 |  
 |  updateGMNameTag(self, tagString, color, state)
 |  
 |  updateInvite(self, inviteKey, newStatus)
 |  
 |  updateInviteMailNotify(self)
 |  
 |  updateReply(self, partyId, inviteeId, newStatus)
 |  
 |  useSpecialResponse(self, returnCode)
 |  
 |  whisperSCToontaskTo(self, taskId, toNpcId, toonProgress, msgIndex, sendToId)
 |  
 |  winterCarolingTargetMet(self, beanAmount)
 |  
 |  wrtReparentTo(self, parent)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from toontown.toon.DistributedToon.DistributedToon:
 |  
 |  autoInterests = set([])
 |  
 |  chatGarbler = <toontown.chat.ToonChatGarbler.ToonChatGarbler instance>
 |  
 |  gmNameTag = None
 |  
 |  notify = <direct.directnotify.Notifier.Notifier instance>
 |  
 |  partyNotify = <direct.directnotify.Notifier.Notifier instance>
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from otp.avatar.DistributedPlayer.DistributedPlayer:
 |  
 |  arrivedOnDistrict(self, districtId)
 |  
 |  b_setChat(self, chatString, chatFlags)
 |  
 |  b_setSC(self, msgIndex)
 |  
 |  b_setSCCustom(self, msgIndex)
 |  
 |  b_setSCEmote(self, emoteId)
 |  
 |  b_teleportGreeting(self, avId)
 |  
 |  d_friendsNotify(self, avId, status)
 |  
 |  d_setChat(self, chatString, chatFlags)
 |  
 |  d_setSC(self, msgIndex)
 |  
 |  d_setSCCustom(self, msgIndex)
 |  
 |  d_setWhisperIgnored(self, sendToId)
 |  
 |  d_teleportGiveup(self, requesterId, sendToId=None)
 |  
 |  d_teleportGreeting(self, avId)
 |  
 |  d_teleportQuery(self, requesterId, sendToId=None)
 |  
 |  displayWhisperPlayer(self, playerId, chatString, whisperType)
 |  
 |  failedTeleportMessageOk(self, fromId)
 |  
 |  friendsNotify(self, avId, status)
 |  
 |  getAdminAccess(self)
 |  
 |  getArrivedOnDistrictEvent(self, districtId=None)
 |  
 |  getAutoRun(self)
 |  
 |  getFriendsList(self)
 |  
 |  getTeleportAvailable(self)
 |  
 |  hasParentingRules(self)
 |  
 |  isGeneratedOnDistrict(self, districtId=None)
 |  
 |  networkDelete(self)
 |  
 |  setAccountName(self, accountName)
 |  
 |  setAdminAccess(self, access)
 |  
 |  setAutoRun(self, value)
 |  
 |  setChat(self, chatString, chatFlags, DISLid)
 |  
 |  setDISLid(self, id)
 |  
 |  setDISLname(self, name)
 |  
 |  setFriendsList(self, friendsList)
 |  
 |  setLeftDistrict(self)
 |  
 |  setLocation(self, parentId, zoneId)
 |  
 |  setSC(self, msgIndex)
 |  
 |  setSCCustom(self, msgIndex)
 |  
 |  setSystemMessage(self, aboutId, chatString, whisperType=2)
 |  
 |  setTeleportAvailable(self, available)
 |  
 |  teleportGiveup(self, requesterId)
 |  
 |  teleportGreeting(self, avId)
 |  
 |  teleportQuery(self, requesterId)
 |  
 |  teleportResponse(self, avId, available, shardId, hoodId, zoneId)
 |  
 |  whisperSCCustomTo(self, msgIndex, sendToId, toPlayer)
 |  
 |  whisperSCEmoteTo(self, emoteId, sendToId, toPlayer)
 |  
 |  whisperSCTo(self, msgIndex, sendToId, toPlayer)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from otp.avatar.DistributedPlayer.DistributedPlayer:
 |  
 |  GetPlayerDeleteEvent()
 |  
 |  GetPlayerGenerateEvent()
 |  
 |  GetPlayerNetworkDeleteEvent()
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from otp.avatar.DistributedPlayer.DistributedPlayer:
 |  
 |  TeleportFailureTimeout = 60.0
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from otp.avatar.LocalAvatar.LocalAvatar:
 |  
 |  addCameraPosition(self, camPos=None)
 |  
 |  attachCamera(self)
 |  
 |  clearPageUpDown(self)
 |  
 |  collisionsOff(self)
 |  
 |  collisionsOn(self)
 |  
 |  d_broadcastPositionNow(self)
 |  
 |  deleteCollisions(self)
 |  
 |  deleteSmartCameraCollisions(self)
 |  
 |  detachCamera(self)
 |  
 |  disableAvatarControls(self)
 |  
 |  disableRun(self)
 |  
 |  disableSmartCameraViews(self)
 |  
 |  enableAvatarControls(self)
 |  
 |  enableRun(self)
 |  
 |  enableSmartCameraViews(self)
 |  
 |  forceGotoSleep(self)
 |  
 |  getAnimMultiplier(self)
 |  
 |  getClampedAvatarHeight(self)
 |  
 |  getCompromiseCameraPos(self)
 |  
 |  getIdealCameraPos(self)
 |  
 |  getLookAtPoint(self)
 |  
 |  getVisibilityPoint(self)
 |  
 |  gotoNode(self, node, eyeHeight=3)
 |  
 |  gotoSleep(self)
 |  
 |  handleCameraFloorInteraction(self)
 |  
 |  handleCameraObstruction(self, camObstrCollisionEntry)
 |  
 |  handlePlayerFriendWhisper(self, playerId, charMessage)
 |  
 |  hasTrackAnimToSpeed(self)
 |  
 |  ignoreAnimationEvents(self)
 |  
 |  initCameraPositions(self)
 |  
 |  initializeCollisions(self)
 |  
 |  initializeSmartCamera(self)
 |  
 |  initializeSmartCameraCollisions(self)
 |  
 |  isInWater(self)
 |  
 |  isLockedDown(self)
 |  
 |  isTeleportAllowed(self)
 |  
 |  jumpHardLand(self)
 |  
 |  jumpLand(self)
 |  
 |  jumpLandAnimFix(self, jumpTime)
 |  
 |  jumpStart(self)
 |  
 |  lerpCameraFov(self, fov, time)
 |  
 |  lock(self)
 |  
 |  nextCameraPos(self, forward)
 |  
 |  nudgeCamera(self)
 |  
 |  pageDown(self)
 |  
 |  pageUp(self)
 |  
 |  popCameraToDest(self)
 |  
 |  posCamera(self, lerp, time)
 |  
 |  positionCameraWithPusher(self, pos, lookAt)
 |  
 |  printCamPos(self)
 |  
 |  printCameraPosition(self, index)
 |  
 |  printCameraPositions(self)
 |  
 |  putCameraFloorRayOnAvatar(self)
 |  
 |  putCameraFloorRayOnCamera(self)
 |  
 |  recalcCameraSphere(self)
 |  
 |  removeCameraPosition(self)
 |  
 |  resetCameraPosition(self)
 |  
 |  returnToWalk(self, task)
 |  
 |  runSound(self)
 |  
 |  sendFriendsListEvent(self)
 |  
 |  setAnimMultiplier(self, value)
 |  
 |  setCameraCollisionsCanMove(self, flag)
 |  
 |  setCameraFov(self, fov)
 |  
 |  setCameraPosForPetInteraction(self)
 |  
 |  setCameraPositionByIndex(self, index)
 |  
 |  setCameraSettings(self, camSettings)
 |  
 |  setGeom(self, geom)
 |  
 |  setIdealCameraPos(self, pos)
 |  
 |  setLookAtPoint(self, la)
 |  
 |  setOnLevelGround(self, flag)
 |  
 |  setTeleportAllowed(self, flag)
 |  
 |  setWalkSpeedNormal(self)
 |  
 |  setWalkSpeedSlow(self)
 |  
 |  setupAnimationEvents(self)
 |  
 |  setupControls(self, avatarRadius=1.4, floorOffset=0.025, reach=4.0, wallBitmask= 0000 0000 0000 0000 0000 0000 0000 0001, floorBitmask= 0000 0000 0000 0000 0000 0000 0000 0010, ghostBitmask= 0000 0000 0000 0000 0000 1000 0000 0000)
 |  
 |  shadowReach(self, state)
 |  
 |  shutdownSmartCamera(self)
 |  
 |  sleepSwimTest(self, task)
 |  
 |  startRunWatch(self)
 |  
 |  startSleepSwimTest(self)
 |  
 |  startSleepWatch(self, callback)
 |  
 |  startTrackAnimToSpeed(self)
 |  
 |  startUpdateSmartCamera(self, push=1)
 |  
 |  stopJumpLandTask(self)
 |  
 |  stopRunWatch(self)
 |  
 |  stopSleepSwimTest(self)
 |  
 |  stopSleepWatch(self)
 |  
 |  stopSound(self)
 |  
 |  stopTrackAnimToSpeed(self)
 |  
 |  stopUpdateSmartCamera(self)
 |  
 |  trackAnimToSpeed(self, task)
 |  
 |  travCollisionsFloor(self, n=None)
 |  
 |  travCollisionsLOS(self, n=None)
 |  
 |  travCollisionsPusher(self, n=None)
 |  
 |  unlock(self)
 |  
 |  unsetCameraPosForPetInteraction(self)
 |  
 |  updateSmartCamera(self, task)
 |  
 |  updateSmartCameraCollisionLineSegment(self)
 |  
 |  useGhostControls(self)
 |  
 |  useSwimControls(self)
 |  
 |  useTwoDControls(self)
 |  
 |  useWalkControls(self)
 |  
 |  wakeUp(self)
 |  
 |  walkSound(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from otp.avatar.LocalAvatar.LocalAvatar:
 |  
 |  sleepTimeout = 120
 |  
 |  swimTimeout = 600
 |  
 |  wantDevCameraPositions = False
 |  
 |  wantMouse = False
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from otp.avatar.DistributedAvatar.DistributedAvatar:
 |  
 |  askAvOnShard(self, avId)
 |  
 |  confirmAvOnShard(self, avId, onShard=True)
 |  
 |  do_setParent(self, parentToken)
 |  
 |  getHp(self)
 |  
 |  getMaxHp(self)
 |  
 |  getName(self)
 |  
 |  getStareAtNodeAndOffset(self)
 |  
 |  hideHpText(self)
 |  
 |  hpChange(self, quietly=0)
 |  
 |  setHp(self, hitPoints)
 |  
 |  showHpString(self, text, duration=0.85, scale=0.7)
 |  
 |  takeDamage(self, hpLost, bonus=0)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from otp.avatar.DistributedAvatar.DistributedAvatar:
 |  
 |  HpTextEnabled = 1
 |  
 |  HpTextGenerator = TextNode HpTextGenerator (2 geoms)
 |  
 |  ManagesNametagAmbientLightChanged = True
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.actor.DistributedActor.DistributedActor:
 |  
 |  loop(self, animName, restart=1, partName=None, fromFrame=None, toFrame=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from toontown.toon.Toon.Toon:
 |  
 |  applyCheesyEffect(self, effect, lerpTime=0)
 |  
 |  cleanupPieModel(self)
 |  
 |  clearCheesyEffect(self, lerpTime=0)
 |  
 |  doEmote(self, emoteIndex, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  doToonColorScale(self, scale, lerpTime, keepDefault=0)
 |  
 |  enterCatchEating(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterCatching(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterCloseBook(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterCogThiefRunning(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterCringe(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterDied(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterDive(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterEmote(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterFallDown(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterFlattened(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterGolfBadPutt(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterGolfGoodPutt(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterGolfPuttLoop(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterGolfPuttSwing(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterGolfRotateLeft(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterGolfRotateRight(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterHappy(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterJump(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterJumpAirborne(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterJumpLand(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterJumpSquat(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterNeutral(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterOff(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterOpenBook(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterPush(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterReadBook(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterRun(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterSad(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterScientistEmcee(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterScientistJealous(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterScientistLessWork(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterScientistPlay(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterScientistWork(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterSit(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterSitStart(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterSleep(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterSquish(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterSwim(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterSwimHold(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterTeleportIn(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterTeleportedOut(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterVictory(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  enterWalk(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  exitCatchEating(self)
 |  
 |  exitCatching(self)
 |  
 |  exitCloseBook(self)
 |  
 |  exitCogThiefRunning(self)
 |  
 |  exitCringe(self, animMultiplier=1, ts=0, callback=None, extraArgs=[])
 |  
 |  exitDied(self)
 |  
 |  exitDive(self)
 |  
 |  exitEmote(self)
 |  
 |  exitFallDown(self)
 |  
 |  exitFlattened(self)
 |  
 |  exitGolfBadPutt(self)
 |  
 |  exitGolfGoodPutt(self)
 |  
 |  exitGolfPuttLoop(self)
 |  
 |  exitGolfPuttSwing(self)
 |  
 |  exitGolfRotateLeft(self)
 |  
 |  exitGolfRotateRight(self)
 |  
 |  exitHappy(self)
 |  
 |  exitJump(self)
 |  
 |  exitJumpAirborne(self)
 |  
 |  exitJumpLand(self)
 |  
 |  exitJumpSquat(self)
 |  
 |  exitNeutral(self)
 |  
 |  exitOff(self)
 |  
 |  exitOpenBook(self)
 |  
 |  exitPush(self)
 |  
 |  exitReadBook(self)
 |  
 |  exitRun(self)
 |  
 |  exitSad(self)
 |  
 |  exitScientistEmcee(self)
 |  
 |  exitScientistJealous(self)
 |  
 |  exitScientistLessWork(self)
 |  
 |  exitScientistPlay(self)
 |  
 |  exitScientistWork(self)
 |  
 |  exitSit(self)
 |  
 |  exitSitStart(self)
 |  
 |  exitSleep(self)
 |  
 |  exitSquish(self)
 |  
 |  exitSwim(self)
 |  
 |  exitSwimHold(self)
 |  
 |  exitTeleportIn(self)
 |  
 |  exitTeleportedOut(self)
 |  
 |  exitVictory(self)
 |  
 |  exitWalk(self)
 |  
 |  findSomethingToLookAt(self)
 |  
 |  finishDied(self, callback=None, extraArgs=[])
 |  
 |  finishTeleportOut(self, callback=None, extraArgs=[])
 |  
 |  generateBackpack(self, fromRTM=False)
 |  
 |  generateGlasses(self, fromRTM=False)
 |  
 |  generateHat(self, fromRTM=False)
 |  
 |  generateShoes(self)
 |  
 |  generateToon(self)
 |  
 |  generateToonAccessories(self)
 |  
 |  generateToonClothes(self, fromNet=0)
 |  
 |  generateToonColor(self)
 |  
 |  generateToonHead(self, copy=1)
 |  
 |  generateToonLegs(self, copy=1)
 |  
 |  generateToonTorso(self, copy=1, genClothes=1)
 |  
 |  getBackpack(self)
 |  
 |  getBodyScale(self)
 |  
 |  getBookActors(self)
 |  
 |  getCallPetIval(self)
 |  
 |  getDiedInterval(self, autoFinishTrack=1)
 |  
 |  getFeedPetIval(self)
 |  
 |  getGlasses(self)
 |  
 |  getHat(self)
 |  
 |  getHeadParts(self)
 |  
 |  getHipsParts(self)
 |  
 |  getHoleActors(self)
 |  
 |  getJar(self)
 |  
 |  getJumpDuration(self)
 |  
 |  getLeftHands(self)
 |  
 |  getLegsParts(self)
 |  
 |  getNametagJoints(self)
 |  
 |  getPieModel(self)
 |  
 |  getPieSplatInterval(self, x, y, z, pieCode)
 |  
 |  getPieces(self, *pieces)
 |  
 |  getPresentPieInterval(self, x, y, z, h)
 |  
 |  getRightHands(self)
 |  
 |  getScratchPetIval(self)
 |  
 |  getShoes(self)
 |  
 |  getSoundTeleport(self)
 |  
 |  getTeleportInTrack(self)
 |  
 |  getTeleportOutTrack(self, autoFinishTrack=1)
 |  
 |  getTorsoParts(self)
 |  
 |  getTossPieInterval(self, x, y, z, h, power, throwType, beginFlyIval=Sequence-1)
 |  
 |  getWake(self)
 |  
 |  hideBooks(self)
 |  
 |  initializeBodyCollisions(self, collIdStr)
 |  
 |  makeWaiter(self)
 |  
 |  parentToonParts(self)
 |  
 |  putOnSuit(self, suitType, setDisplayName=True, rental=False)
 |  
 |  reapplyCheesyEffect(self, lerpTime=0)
 |  
 |  removeJar(self)
 |  
 |  rescaleToon(self)
 |  
 |  resetHeight(self)
 |  
 |  restoreDefaultColorScale(self)
 |  
 |  setForceJumpIdle(self, value)
 |  
 |  setLODs(self)
 |  
 |  setPartsAdd(self, parts)
 |  
 |  setPartsNormal(self, parts, alpha=0)
 |  
 |  setSpeed(self, forwardSpeed, rotateSpeed)
 |  
 |  setupPickTrigger(self)
 |  
 |  setupToonNodes(self)
 |  
 |  showBooks(self)
 |  
 |  startBobSwimTask(self)
 |  
 |  stopAnimations(self)
 |  
 |  stopBobSwimTask(self)
 |  
 |  stunToon(self, ts=0, callback=None, knockdown=0)
 |  
 |  swapToonColor(self, dna)
 |  
 |  swapToonHead(self, headStyle, copy=1)
 |  
 |  swapToonLegs(self, legStyle, copy=1)
 |  
 |  swapToonTorso(self, torsoStyle, copy=1, genClothes=1)
 |  
 |  takeOffSuit(self)
 |  
 |  unparentToonParts(self)
 |  
 |  updateToonDNA(self, newDNA, fForce=0)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from toontown.toon.Toon.Toon:
 |  
 |  afkTimeout = 600
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.distributed.DistributedSmoothNode.DistributedSmoothNode:
 |  
 |  activateSmoothing(self, smoothing, prediction)
 |      Enables or disables the smoothing of other avatars' motion.
 |      This used to be a global flag, but now it is specific to each
 |      avatar instance.  However, see globalActivateSmoothing() in
 |      this module.
 |      
 |      If smoothing is off, no kind of smoothing will be performed,
 |      regardless of the setting of prediction.
 |      
 |      This is not necessarily predictive smoothing; if predictive
 |      smoothing is off, avatars will be lagged by a certain factor
 |      to achieve smooth motion.  Otherwise, if predictive smoothing
 |      is on, avatars will be drawn as nearly as possible in their
 |      current position, by extrapolating from old position reports.
 |      
 |      This assumes you have a client repository that knows its
 |      localAvatarDoId -- stored in self.cr.localAvatarDoId
 |  
 |  clearSmoothing(self, bogus=None)
 |  
 |  d_returnResync(self, avId, timestampB, serverTime, uncertainty)
 |  
 |  d_suggestResync(self, avId, timestampA, timestampB, serverTime, uncertainty)
 |  
 |  forceToTruePosition(self)
 |      This forces the node to reposition itself to its latest known
 |      position.  This may result in a pop as the node skips the last
 |      of its lerp points.
 |  
 |  getComponentH(self)
 |  
 |  getComponentL(self)
 |      # These are all required by the CMU server, which requires get* to
 |      # match set* in more cases than the Disney server does.
 |  
 |  getComponentP(self)
 |  
 |  getComponentR(self)
 |  
 |  getComponentT(self)
 |  
 |  getComponentX(self)
 |  
 |  getComponentY(self)
 |  
 |  getComponentZ(self)
 |  
 |  getSmoothWrtReparents(self)
 |  
 |  peerToPeerResync(self, avId, timestamp, serverTime, uncertainty)
 |  
 |  reloadPosition(self)
 |      This function re-reads the position from the node itself and
 |      clears any old position reports for the node.  This should be
 |      used whenever show code bangs on the node position and expects
 |      it to stick.
 |  
 |  returnResync(self, avId, timestampB, serverTimeSec, serverTimeUSec, uncertainty)
 |      A reply sent by a client whom we recently sent suggestResync
 |      to, this reports the client's new delta information so we can
 |      adjust our clock as well.
 |  
 |  setComponentH(self, h)
 |  
 |  setComponentL(self, l)
 |  
 |  setComponentP(self, p)
 |  
 |  setComponentR(self, r)
 |  
 |  setComponentT(self, timestamp)
 |  
 |  setComponentTLive(self, timestamp)
 |  
 |  setComponentX(self, x)
 |  
 |  setComponentY(self, y)
 |  
 |  setComponentZ(self, z)
 |  
 |  setSmH(self, h, timestamp=None)
 |  
 |  setSmHpr(self, h, p, r, timestamp=None)
 |  
 |  setSmPos(self, x, y, z, timestamp=None)
 |  
 |  setSmPosHpr(self, x, y, z, h, p, r, timestamp=None)
 |  
 |  setSmPosHprL(self, l, x, y, z, h, p, r, timestamp=None)
 |  
 |  setSmStop(self, timestamp=None)
 |      # distributed set pos and hpr functions
 |      # 'send' versions are inherited from DistributedSmoothNodeBase
 |  
 |  setSmXY(self, x, y, timestamp=None)
 |  
 |  setSmXYH(self, x, y, h, timestamp)
 |  
 |  setSmXYZH(self, x, y, z, h, timestamp=None)
 |  
 |  setSmXZ(self, x, z, timestamp=None)
 |  
 |  setSmZ(self, z, timestamp=None)
 |  
 |  setSmoothWrtReparents(self, flag)
 |  
 |  smoothPosition(self)
 |      This function updates the position of the node to its computed
 |      smoothed position.  This may be overridden by a derived class
 |      to specialize the behavior.
 |  
 |  startSmooth(self)
 |      This function starts the task that ensures the node is
 |      positioned correctly every frame.  However, while the task is
 |      running, you won't be able to lerp the node or directly
 |      position it.
 |  
 |  stopSmooth(self)
 |      This function stops the task spawned by startSmooth(), and
 |      allows show code to move the node around directly.
 |  
 |  suggestResync(self, avId, timestampA, timestampB, serverTimeSec, serverTimeUSec, uncertainty)
 |      This message is sent from one client to another when the other
 |      client receives a timestamp from this client that is so far
 |      out of date as to suggest that one or both clients needs to
 |      resynchronize their clock information.
 |  
 |  wantsSmoothing(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.distributed.DistributedNode.DistributedNode:
 |  
 |  __cmp__(self, other)
 |  
 |  b_setParent(self, parentToken)
 |  
 |  d_setH(self, h)
 |      # setH provided by NodePath
 |  
 |  d_setHpr(self, h, p, r)
 |      # setHpr provided by NodePath
 |  
 |  d_setP(self, p)
 |      # setP provided by NodePath
 |  
 |  d_setPos(self, x, y, z)
 |      # setPos provided by NodePath
 |  
 |  d_setPosHpr(self, x, y, z, h, p, r)
 |      # setPosHpr provided by NodePath
 |  
 |  d_setR(self, r)
 |      # setR provided by NodePath
 |  
 |  d_setX(self, x)
 |      # setX provided by NodePath
 |  
 |  d_setXY(self, x, y)
 |  
 |  d_setXYH(self, x, y, h)
 |  
 |  d_setXYZH(self, x, y, z, h)
 |  
 |  d_setXZ(self, x, z)
 |  
 |  d_setY(self, y)
 |      # setY provided by NodePath
 |  
 |  d_setZ(self, z)
 |      # setZ provided by NodePath
 |  
 |  setParent(self, parentToken)
 |  
 |  setParentStr(self, parentTokenStr)
 |  
 |  setXY(self, x, y)
 |  
 |  setXYH(self, x, y, h)
 |  
 |  setXYZH(self, x, y, z, h)
 |  
 |  setXZ(self, x, z)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from direct.distributed.DistributedNode.DistributedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.distributed.DistributedObject.DistributedObject:
 |  
 |  addInterest(self, zoneId, note='', event=None)
 |  
 |  b_setLocation(self, parentId, zoneId)
 |  
 |  d_setLocation(self, parentId, zoneId)
 |  
 |  deleteOrDelay(self)
 |  
 |  disableAndAnnounce(self)
 |      Inheritors should *not* redefine this function.
 |  
 |  disableAnnounceAndDelete(self)
 |  
 |  doCallbackContext(self, context, args)
 |  
 |  doneBarrier(self, name=None)
 |  
 |  execCommand(self, string, mwMgrId, avId, zoneId)
 |  
 |  flushCachedData(self, name)
 |  
 |  generateInit(self)
 |      This method is called when the DistributedObject is first introduced
 |      to the world... Not when it is pulled from the cache.
 |  
 |  getAutoInterests(self)
 |  
 |  getBarrierData(self)
 |  
 |  getCacheable(self)
 |  
 |  getCachedData(self, name)
 |  
 |  getCallback(self, context)
 |  
 |  getCallbackArgs(self, context)
 |  
 |  getCallbackContext(self, callback, extraArgs=[])
 |  
 |  getCurrentContexts(self)
 |  
 |  getDelayDeleteCount(self)
 |  
 |  getDelayDeleteEvent(self)
 |  
 |  getDisableEvent(self)
 |  
 |  getDoId(self)
 |      Return the distributed object id
 |  
 |  getLocation(self)
 |  
 |  getNeverDisable(self)
 |  
 |  getParentObj(self)
 |  
 |  hasCachedData(self, name)
 |  
 |  isDisabled(self)
 |      Returns true if the object has been disabled and/or deleted,
 |      or if it is brand new and hasn't yet been generated.
 |  
 |  isGenerated(self)
 |      Returns true if the object has been fully generated by now,
 |      and not yet disabled.
 |  
 |  isGridParent(self)
 |  
 |  postGenerateMessage(self)
 |      #This message was moved out of announce generate
 |      #to avoid ordering issues.
 |  
 |  removeInterest(self, handle, event=None)
 |  
 |  sendDeleteMsg(self)
 |  
 |  sendDisableMsg(self)
 |  
 |  sendUpdate(self, fieldName, args=[], sendToId=None)
 |  
 |  setBarrierData(self, data)
 |  
 |  setCacheable(self, bool)
 |  
 |  setCachedData(self, name, data)
 |  
 |  setNeverDisable(self, bool)
 |  
 |  status(self, indent=0)
 |      print out "doId(parentId, zoneId) className
 |          and conditionally show generated, disabled, neverDisable,
 |          or cachable"
 |  
 |  taskName(self, taskString)
 |  
 |  uniqueName(self, idString)
 |  
 |  updateAllRequiredFields(self, dclass, di)
 |  
 |  updateRequiredFields(self, dclass, di)
 |  
 |  updateRequiredOtherFields(self, dclass, di)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.distributed.DistributedObjectBase.DistributedObjectBase:
 |  
 |  handleChildArrive(self, childObj, zoneId)
 |      A new child has just setLocation beneath us.  Give us a
 |      chance to run code when a new child sets location to us. For
 |      example, we may want to scene graph reparent the child to
 |      some subnode we own.
 |  
 |  handleChildArriveZone(self, childObj, zoneId)
 |      A child has just changed zones beneath us with setLocation.
 |      Give us a chance to run code when an existing child sets
 |      location to us. For example, we may want to scene graph
 |      reparent the child to some subnode we own.
 |  
 |  handleChildLeave(self, childObj, zoneId)
 |      A child is about to setLocation away from us.  Give us a
 |      chance to run code just before a child sets location away from us.
 |  
 |  handleChildLeaveZone(self, childObj, zoneId)
 |      A child is about to setLocation to another zone beneath us.
 |      Give us a chance to run code just before a child sets
 |      location to that zone.
 |  
 |  handleQueryObjectChildrenLocalDone(self, context)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from otp.avatar.Avatar.Avatar:
 |  
 |  acceptNametagAmbientLightChange(self)
 |  
 |  addActive(self)
 |  
 |  adjustNametag3d(self, parentScale=1.0)
 |  
 |  advancePageNumber(self)
 |  
 |  clearChat(self)
 |  
 |  clickedNametag(self)
 |  
 |  considerUnderstandable(self)
 |  
 |  deleteNametag3d(self)
 |  
 |  getAirborneHeight(self)
 |  
 |  getAvatarScale(self)
 |  
 |  getDialogueSfx(self, type, length)
 |  
 |  getFont(self)
 |  
 |  getHeight(self)
 |  
 |  getNameVisible(self)
 |  
 |  getNametagScale(self)
 |  
 |  getRadius(self)
 |  
 |  getStyle(self)
 |  
 |  getType(self)
 |  
 |  hideName(self)
 |  
 |  hideNametag2d(self)
 |  
 |  hideNametag3d(self)
 |  
 |  ignoreNametagAmbientLightChange(self)
 |  
 |  initializeNametag3d(self)
 |  
 |  isInView(self)
 |  
 |  isPet(self)
 |  
 |  isProxy(self)
 |  
 |  isUnderstandable(self)
 |  
 |  nametagAmbientLightChanged(self, newlight)
 |  
 |  removeActive(self)
 |  
 |  setAvatarScale(self, scale)
 |  
 |  setCommonChatFlags(self, commonChatFlags)
 |  
 |  setFont(self, font)
 |  
 |  setHeight(self, height)
 |  
 |  setLocalPageChat(self, message, quitButton, extraChatFlags=None, dialogueList=[])
 |  
 |  setNameVisible(self, bool)
 |  
 |  setNametagScale(self, scale)
 |  
 |  setPageChat(self, addressee, paragraph, message, quitButton, extraChatFlags=None, dialogueList=[], pageButton=True)
 |  
 |  setPageNumber(self, paragraph, pageNumber, timestamp=None)
 |  
 |  setPickable(self, flag)
 |  
 |  setPlayerType(self, playerType)
 |  
 |  setStyle(self, style)
 |  
 |  setWhitelistChatFlags(self, whitelistChatFlags)
 |  
 |  showName(self)
 |  
 |  showNametag2d(self)
 |  
 |  showNametag3d(self)
 |  
 |  stashBodyCollisions(self)
 |  
 |  unstashBodyCollisions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from otp.avatar.Avatar.Avatar:
 |  
 |  ActiveAvatars = [render/gagShop_interior_english.egg/g1/npc_origin_0/C...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from toontown.toon.ToonHead.ToonHead:
 |  
 |  angryEyes(self)
 |  
 |  blinkEyes(self)
 |  
 |  closeEyes(self)
 |  
 |  doLookAroundToStareAt(self, node, point)
 |  
 |  enablePumpkins(self, enable)
 |  
 |  enableSnowMen(self, enable)
 |  
 |  enterEyelidsClosed(self)
 |  
 |  enterEyelidsOff(self)
 |  
 |  enterEyelidsOpen(self)
 |  
 |  enterEyelidsSurprised(self)
 |  
 |  exitEyelidsClosed(self)
 |  
 |  exitEyelidsOff(self)
 |  
 |  exitEyelidsOpen(self)
 |  
 |  exitEyelidsSurprised(self)
 |  
 |  fitAndCenterHead(self, maxDim, forGui=0)
 |  
 |  getAngryMuzzles(self)
 |  
 |  getLaughMuzzles(self)
 |  
 |  getMuzzles(self)
 |  
 |  getRandomForwardLookAtPoint(self)
 |  
 |  getSadMuzzles(self)
 |  
 |  getSmileMuzzles(self)
 |  
 |  getSurpriseMuzzles(self)
 |  
 |  hideAngryMuzzle(self)
 |  
 |  hideEars(self)
 |  
 |  hideEyelashes(self)
 |  
 |  hideLaughMuzzle(self)
 |  
 |  hideNormalMuzzle(self)
 |  
 |  hideSadMuzzle(self)
 |  
 |  hideSmileMuzzle(self)
 |  
 |  hideSurpriseMuzzle(self)
 |  
 |  isIgnoreCheesyEffect(self)
 |  
 |  lerpLookAt(self, point, time=1.0, blink=0)
 |  
 |  loadPumpkin(self, headStyle, lod, copy)
 |  
 |  loadSnowMan(self, headStyle, lod, copy)
 |  
 |  normalEyes(self)
 |  
 |  openEyes(self)
 |  
 |  sadEyes(self)
 |  
 |  setLookAtPositionCallbackArgs(self, argTuple)
 |  
 |  setupEyelashes(self, style)
 |  
 |  setupHead(self, dna, forGui=0)
 |  
 |  setupMuzzles(self, style)
 |  
 |  showAngryMuzzle(self)
 |  
 |  showEars(self)
 |  
 |  showEyelashes(self)
 |  
 |  showLaughMuzzle(self)
 |  
 |  showNormalMuzzle(self)
 |  
 |  showSadMuzzle(self)
 |  
 |  showSmileMuzzle(self)
 |  
 |  showSurpriseMuzzle(self)
 |  
 |  startBlink(self)
 |  
 |  startLookAround(self)
 |  
 |  startStareAt(self, node, point)
 |  
 |  startStareAtHeadPoint(self, point)
 |  
 |  stopBlink(self)
 |  
 |  stopLookAround(self)
 |  
 |  stopLookAroundNow(self)
 |  
 |  stopStareAt(self)
 |  
 |  stopStareAtNow(self)
 |  
 |  surpriseEyes(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from toontown.toon.ToonHead.ToonHead:
 |  
 |  EyesAngryClosed = eyesAngryClosed
 |  
 |  EyesAngryOpen = eyesAngry
 |  
 |  EyesClosed = eyesClosed
 |  
 |  EyesOpen = eyes
 |  
 |  EyesSadClosed = eyesSadClosed
 |  
 |  EyesSadOpen = eyesSad
 |  
 |  EyesSurprised = eyesSurprised
 |  
 |  LeftA = LPoint3f(0.06, 0, 0.14)
 |  
 |  LeftAD = LPoint3f(0.06, 0, 0)
 |  
 |  LeftB = LPoint3f(-0.13, 0, 0.1)
 |  
 |  LeftBC = LPoint3f(-0.05, 0, 0)
 |  
 |  LeftC = LPoint3f(-0.05, 0, 0)
 |  
 |  LeftD = LPoint3f(0.06, 0, 0)
 |  
 |  Muzzle = muzzleShrtGeneric
 |  
 |  MuzzleSurprised = muzzleShortSurprised
 |  
 |  RightA = LPoint3f(0.13, 0, 0.1)
 |  
 |  RightAD = LPoint3f(0.05, 0, 0)
 |  
 |  RightB = LPoint3f(-0.06, 0, 0.14)
 |  
 |  RightBC = LPoint3f(-0.06, 0, 0)
 |  
 |  RightC = LPoint3f(-0.06, 0, 0)
 |  
 |  RightD = LPoint3f(0.05, 0, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.actor.Actor.Actor:
 |  
 |  __str__(self)
 |      Actor print function
 |  
 |  actorInterval(self, *args, **kw)
 |  
 |  addLOD(self, lodName, inDist=0, outDist=0, center=None)
 |      addLOD(self, string)
 |      Add a named node under the LODNode to parent all geometry
 |      of a specific LOD under.
 |  
 |  animPanel(self)
 |      # actions
 |  
 |  attach(self, partName, anotherPartName, jointName, lodName='lodRoot')
 |      attach(self, string, string, string, key="lodRoot")
 |      Attach one actor part to another at a joint called jointName
 |  
 |  bindAllAnims(self, allowAsyncBind=False)
 |      Loads and binds all animations that have been defined for
 |      the Actor.
 |  
 |  bindAnim(self, animName, partName=None, lodName=None, allowAsyncBind=False)
 |      Binds the named animation to the named part and/or lod.  If
 |      allowAsyncBind is False, this guarantees that the animation is
 |      bound immediately--the animation is never bound in a
 |      sub-thread; it will be loaded and bound in the main thread, so
 |      it will be available by the time this method returns.
 |      
 |      The parameters are the same as that for getAnimControls().  In
 |      fact, this method is a thin wrapper around that other method.
 |      
 |      Use this method if you need to ensure that an animation is
 |      available before you start to play it, and you don't mind
 |      holding up the render for a frame or two until the animation
 |      is available.
 |  
 |  cleanup(self)
 |      Actor cleanup function
 |  
 |  clearLODAnimation(self)
 |      Description: Undoes the effect of a recent call to
 |      set_lod_animation().  Henceforth, the character will animate
 |      every frame, regardless of its distance from the camera.
 |  
 |  clearPythonData(self)
 |  
 |  controlJoint(self, node, partName, jointName, lodName='lodRoot')
 |      The converse of exposeJoint: this associates the joint with
 |      the indicated node, so that the joint transform will be copied
 |      from the node to the joint each frame.  This can be used for
 |      programmer animation of a particular joint at runtime.
 |      
 |      The parameter node should be the NodePath for the node whose
 |      transform will animate the joint.  If node is None, a new node
 |      will automatically be created and loaded with the joint's
 |      initial transform.  In either case, the node used will be
 |      returned.
 |      
 |      It used to be necessary to call this before any animations
 |      have been loaded and bound, but that is no longer so.
 |  
 |  copyActor(self, other, overwrite=False)
 |  
 |  disableBlend(self, partName=None)
 |      Restores normal one-animation-at-a-time operation after a
 |      previous call to enableBlend().
 |      
 |      This method is deprecated.  You should use setBlend() instead.
 |  
 |  drawInFront(self, frontPartName, backPartName, mode, root=None, lodName=None)
 |      drawInFront(self, string, int, string=None, key=None)
 |      
 |      Arrange geometry so the frontPart(s) are drawn in front of
 |      backPart.
 |      
 |      If mode == -1, the geometry is simply arranged to be drawn in
 |      the correct order, assuming it is already under a
 |      direct-render scene graph (like the DirectGui system).  That
 |      is, frontPart is reparented to backPart, and backPart is
 |      reordered to appear first among its siblings.
 |      
 |      If mode == -2, the geometry is arranged to be drawn in the
 |      correct order, and depth test/write is turned off for
 |      frontPart.
 |      
 |      If mode == -3, frontPart is drawn as a decal onto backPart.
 |      This assumes that frontPart is mostly coplanar with and does
 |      not extend beyond backPart, and that backPart is mostly flat
 |      (not self-occluding).
 |      
 |      If mode > 0, the frontPart geometry is placed in the 'fixed'
 |      bin, with the indicated drawing order.  This will cause it to
 |      be drawn after almost all other geometry.  In this case, the
 |      backPartName is actually unused.
 |      
 |      Takes an optional argument root as the start of the search for the
 |      given parts. Also takes optional lod name to refine search for the
 |      named parts. If root and lod are defined, we search for the given
 |      root under the given lod.
 |  
 |  enableBlend(self, blendType=1, partName=None)
 |      Enables blending of multiple animations simultaneously.
 |      After this is called, you may call play(), loop(), or pose()
 |      on multiple animations and have all of them contribute to the
 |      final pose each frame.
 |      
 |      With blending in effect, starting a particular animation with
 |      play(), loop(), or pose() does not implicitly make the
 |      animation visible; you must also call setControlEffect() for
 |      each animation you wish to use to indicate how much each
 |      animation contributes to the final pose.
 |      
 |      This method is deprecated.  You should use setBlend() instead.
 |  
 |  exposeJoint(self, node, partName, jointName, lodName='lodRoot', localTransform=0)
 |      exposeJoint(self, NodePath, string, string, key="lodRoot")
 |      Starts the joint animating the indicated node.  As the joint
 |      animates, it will transform the node by the corresponding
 |      amount.  This will replace whatever matrix is on the node each
 |      frame.  The default is to expose the net transform from the root,
 |      but if localTransform is true, only the node's local transform
 |      from its parent is exposed.
 |  
 |  faceAwayFromViewer(self)
 |      # these functions compensate for actors that are modeled facing the viewer but need
 |      # to face away from the camera in the game
 |  
 |  faceTowardsViewer(self)
 |  
 |  fixBounds(self, partName=None)
 |  
 |  fixBounds_old(self, part=None)
 |      fixBounds(self, nodePath=None)
 |      Force recomputation of bounding spheres for all geoms
 |      in a given part. If no part specified, fix all geoms
 |      in this actor
 |  
 |  flush(self)
 |      Actor flush function
 |  
 |  freezeJoint(self, partName, jointName, transform=None, pos=LVector3f(0, 0, 0), hpr=LVector3f(0, 0, 0), scale=LVector3f(1, 1, 1))
 |      Similar to controlJoint, but the transform assigned is
 |      static, and may not be animated at runtime (without another
 |      subsequent call to freezeJoint).  This is slightly more
 |      optimal than controlJoint() for cases in which the transform
 |      is not intended to be animated during the lifetime of the
 |      Actor.
 |  
 |  getActorInfo(self)
 |      Utility function to create a list of information about an actor.
 |      Useful for iterating over details of an actor.
 |  
 |  getAnimBlends(self, animName=None, partName=None, lodName=None)
 |      Returns a list of the form:
 |      
 |      [ (lodName, [(animName, [(partName, effect), (partName, effect), ...]),
 |                   (animName, [(partName, effect), (partName, effect), ...]),
 |                   ...]),
 |        (lodName, [(animName, [(partName, effect), (partName, effect), ...]),
 |                   (animName, [(partName, effect), (partName, effect), ...]),
 |                   ...]),
 |         ... ]
 |      
 |      This list reports the non-zero control effects for each
 |      partName within a particular animation and LOD.
 |  
 |  getAnimControl(self, animName, partName=None, lodName=None, allowAsyncBind=True)
 |      getAnimControl(self, string, string, string="lodRoot")
 |      Search the animControl dictionary indicated by lodName for
 |      a given anim and part. If none specified, try the first part and lod.
 |      Return the animControl if present, or None otherwise.
 |  
 |  getAnimControlDict(self)
 |  
 |  getAnimControls(self, animName=None, partName=None, lodName=None, allowAsyncBind=True)
 |      getAnimControls(self, string, string=None, string=None)
 |      
 |      Returns a list of the AnimControls that represent the given
 |      animation for the given part and the given lod.
 |      
 |      If animName is None or omitted, the currently-playing
 |      animation (or all currently-playing animations) is returned.
 |      If animName is True, all animations are returned.  If animName
 |      is a single string name, that particular animation is
 |      returned.  If animName is a list of string names, all of the
 |      names animations are returned.
 |      
 |      If partName is None or omitted, all parts are returned (or
 |      possibly the one overall Actor part, according to the
 |      subpartsComplete flag).
 |      
 |      If lodName is None or omitted, all LOD's are returned.
 |  
 |  getAnimFilename(self, animName, partName='modelRoot')
 |      getAnimFilename(self, animName)
 |      return the animFilename given the animName
 |  
 |  getAnimNames(self)
 |  
 |  getBaseFrameRate(self, animName=None, partName=None)
 |      getBaseFrameRate(self, string, string=None)
 |      Return frame rate of given anim name and given part, unmodified
 |      by any play rate in effect.
 |  
 |  getCurrentAnim(self, partName=None)
 |      Return the anim currently playing on the actor. If part not
 |      specified return current anim of an arbitrary part in dictionary.
 |      NOTE: only returns info for an arbitrary LOD
 |  
 |  getCurrentFrame(self, animName=None, partName=None)
 |      Return the current frame number of the named anim, or if no
 |      anim is specified, then the anim current playing on the
 |      actor. If part not specified return current anim of first part
 |      in dictionary.  NOTE: only returns info for an arbitrary LOD
 |  
 |  getDuration(self, animName=None, partName=None, fromFrame=None, toFrame=None)
 |      Return duration of given anim name and given part.
 |      If no anim specified, use the currently playing anim.
 |      If no part specified, return anim duration of first part.
 |      NOTE: returns info for arbitrary LOD
 |  
 |  getFrameRate(self, animName=None, partName=None)
 |      getFrameRate(self, string, string=None)
 |      Return actual frame rate of given anim name and given part.
 |      If no anim specified, use the currently playing anim.
 |      If no part specified, return anim durations of first part.
 |      NOTE: returns info only for an arbitrary LOD
 |  
 |  getFrameTime(self, anim, frame, partName=None)
 |  
 |  getGeomNode(self)
 |      Return the node that contains all actor geometry
 |  
 |  getJointTransform(self, partName, jointName, lodName='lodRoot')
 |  
 |  getJointTransformState(self, partName, jointName, lodName='lodRoot')
 |  
 |  getJoints(self, partName=None, jointName='*', lodName=None)
 |      Returns the list of all joints, from the named part or
 |      from all parts, that match the indicated jointName.  The
 |      jointName may include pattern characters like *.
 |  
 |  getLOD(self, lodName)
 |      getLOD(self, string)
 |      Get the named node under the LOD to which we parent all LOD
 |      specific geometry to. Returns 'None' if not found
 |  
 |  getLODIndex(self, lodName)
 |      getLODIndex(self)
 |      safe method (but expensive) for retrieving the child index
 |  
 |  getLODNames(self)
 |      Return list of Actor LOD names. If not an LOD actor,
 |      returns 'lodRoot'
 |      Caution - this returns a reference to the list - not your own copy
 |  
 |  getLODNode(self)
 |      Return the node that switches actor geometry in and out
 |  
 |  getNumFrames(self, animName=None, partName=None)
 |  
 |  getOverlappingJoints(self, partNameA, partNameB, jointName='*', lodName=None)
 |      Returns the set of joints, matching jointName, that are
 |      shared between partNameA and partNameB.
 |  
 |  getPart(self, partName, lodName='lodRoot')
 |      Find the named part in the optional named lod and return it, or
 |      return None if not present
 |  
 |  getPartBundle(self, partName, lodName='lodRoot')
 |      Find the named part in the optional named lod and return its
 |      associated PartBundle, or return None if not present
 |  
 |  getPartBundleDict(self)
 |  
 |  getPartBundles(self, partName=None)
 |      Returns a list of PartBundle objects for the entire Actor,
 |      or for the indicated part only.
 |  
 |  getPartNames(self)
 |      Return list of Actor part names. If not an multipart actor,
 |      returns 'modelRoot' NOTE: returns parts of arbitrary LOD
 |  
 |  getPlayRate(self, animName=None, partName=None)
 |      Return the play rate of given anim for a given part.
 |      If no part is given, assume first part in dictionary.
 |      If no anim is given, find the current anim for the part.
 |      NOTE: Returns info only for an arbitrary LOD
 |  
 |  getSubpartsComplete(self)
 |      See setSubpartsComplete().
 |  
 |  hasLOD(self)
 |      Return 1 if the actor has LODs, 0 otherwise
 |  
 |  hideAllBounds(self)
 |      Hide the bounds of all actor geoms
 |  
 |  hidePart(self, partName, lodName='lodRoot')
 |      Make the given part of the optionally given lod not render,
 |      even though still in the tree.
 |      NOTE: this will affect child geometry
 |  
 |  initAnimsOnAllLODs(self, partNames)
 |  
 |  instance(self, path, partName, jointName, lodName='lodRoot')
 |      instance(self, NodePath, string, string, key="lodRoot")
 |      Instance a nodePath to an actor part at a joint called jointName
 |  
 |  listJoints(self, partName='modelRoot', lodName='lodRoot')
 |      Handy utility function to list the joint hierarchy of the
 |      actor.
 |  
 |  loadAnims(self, anims, partName='modelRoot', lodName='lodRoot')
 |      loadAnims(self, string:string{}, string='modelRoot',
 |      string='lodRoot')
 |      Actor anim loader. Takes an optional partName (defaults to
 |      'modelRoot' for non-multipart actors) and lodName (defaults
 |      to 'lodRoot' for non-LOD actors) and dict of corresponding
 |      anims in the form animName:animPath{}
 |  
 |  loadAnimsOnAllLODs(self, anims, partName='modelRoot')
 |      loadAnims(self, string:string{}, string='modelRoot',
 |      string='lodRoot')
 |      Actor anim loader. Takes an optional partName (defaults to
 |      'modelRoot' for non-multipart actors) and lodName (defaults
 |      to 'lodRoot' for non-LOD actors) and dict of corresponding
 |      anims in the form animName:animPath{}
 |  
 |  loadModel(self, modelPath, partName='modelRoot', lodName='lodRoot', copy=True, okMissing=None, autoBindAnims=True)
 |      Actor model loader. Takes a model name (ie file path), a part
 |      name(defaults to "modelRoot") and an lod name(defaults to "lodRoot").
 |  
 |  makeSubpart(self, partName, includeJoints, excludeJoints=[], parent='modelRoot', overlapping=False)
 |      Defines a new "part" of the Actor that corresponds to the
 |      same geometry as the named parent part, but animates only a
 |      certain subset of the joints.  This can be used for
 |      partial-body animations, for instance to animate a hand waving
 |      while the rest of the body continues to play its walking
 |      animation.
 |      
 |      includeJoints is a list of joint names that are to be animated
 |      by the subpart.  Each name can include globbing characters
 |      like '?' or '*', which will match one or any number of
 |      characters, respectively.  Including a joint by naming it in
 |      includeJoints implicitly includes all of the descendents of
 |      that joint as well, except for excludeJoints, below.
 |      
 |      excludeJoints is a list of joint names that are *not* to be
 |      animated by the subpart.  As in includeJoints, each name can
 |      include globbing characters.  If a joint is named by
 |      excludeJoints, it will not be included (and neither will any
 |      of its descendents), even if a parent joint was named by
 |      includeJoints.
 |      
 |      if overlapping is False, an error is raised (in the dev build)
 |      if this subpart shares joints with any other subparts.  If
 |      overlapping is True, no such error is raised.
 |      
 |      parent is the actual partName that this subpart is based
 |      on.
 |  
 |  osdAnimBlends(self, animName=None, partName=None, lodName=None)
 |  
 |  pingpong(self, animName, restart=1, partName=None, fromFrame=None, toFrame=None)
 |      pingpong(self, string, int=1, string=None)
 |      Loop the given animation on the given part of the actor,
 |      restarting at zero frame if requested. If no part name
 |      is given then try to loop on all parts. NOTE: loops on
 |      all LOD's
 |  
 |  play(self, animName, partName=None, fromFrame=None, toFrame=None)
 |      play(self, string, string=None)
 |      Play the given animation on the given part of the actor.
 |      If no part is specified, try to play on all parts. NOTE:
 |      plays over ALL LODs
 |  
 |  pose(self, animName, frame, partName=None, lodName=None)
 |      pose(self, string, int, string=None)
 |      Pose the actor in position found at given frame in the specified
 |      animation for the specified part. If no part is specified attempt
 |      to apply pose to all parts.
 |  
 |  postFlatten(self)
 |      Call this after performing an aggressive flatten operation,
 |      such as flattenStrong(), that involves the Actor.  This is
 |      especially necessary when mergeLODBundles is true, since this
 |      kind of actor may be broken after a flatten operation; this
 |      method should restore proper Actor functionality.
 |  
 |  pprint(self)
 |      Pretty print actor's details
 |  
 |  printAnimBlends(self, animName=None, partName=None, lodName=None)
 |  
 |  printLOD(self)
 |  
 |  releaseJoint(self, partName, jointName)
 |      Undoes a previous call to controlJoint() or freezeJoint()
 |      and restores the named joint to its normal animation.
 |  
 |  removeAnimControlDict(self)
 |  
 |  removeNode(self)
 |  
 |  removePart(self, partName, lodName='lodRoot')
 |      Remove the geometry and animations of the named part of the
 |      optional named lod if present.
 |      NOTE: this will remove child geometry also!
 |  
 |  renamePartBundles(self, partName, newBundleName)
 |  
 |  resetLOD(self)
 |      Restore all switch distance info (usually after a useLOD call)
 |  
 |  setBlend(self, animBlend=None, frameBlend=None, blendType=None, partName=None)
 |      Changes the way the Actor handles blending of multiple
 |      different animations, and/or interpolation between consecutive
 |      frames.
 |      
 |      The animBlend and frameBlend parameters are boolean flags.
 |      You may set either or both to True or False.  If you do not
 |      specify them, they do not change from the previous value.
 |      
 |      When animBlend is True, multiple different animations may
 |      simultaneously be playing on the Actor.  This means you may
 |      call play(), loop(), or pose() on multiple animations and have
 |      all of them contribute to the final pose each frame.
 |      
 |      In this mode (that is, when animBlend is True), starting a
 |      particular animation with play(), loop(), or pose() does not
 |      implicitly make the animation visible; you must also call
 |      setControlEffect() for each animation you wish to use to
 |      indicate how much each animation contributes to the final
 |      pose.
 |      
 |      The frameBlend flag is unrelated to playing multiple
 |      animations.  It controls whether the Actor smoothly
 |      interpolates between consecutive frames of its animation (when
 |      the flag is True) or holds each frame until the next one is
 |      ready (when the flag is False).  The default value of
 |      frameBlend is controlled by the interpolate-frames Config.prc
 |      variable.
 |      
 |      In either case, you may also specify blendType, which controls
 |      the precise algorithm used to blend two or more different
 |      matrix values into a final result.  Different skeleton
 |      hierarchies may benefit from different algorithms.  The
 |      default blendType is controlled by the anim-blend-type
 |      Config.prc variable.
 |  
 |  setCenter(self, center)
 |  
 |  setControlEffect(self, animName, effect, partName=None, lodName=None)
 |      Sets the amount by which the named animation contributes to
 |      the overall pose.  This controls blending of multiple
 |      animations; it only makes sense to call this after a previous
 |      call to setBlend(animBlend = True).
 |  
 |  setGeomNode(self, node)
 |      Set the node that contains all actor geometry
 |  
 |  setLOD(self, lodName, inDist=0, outDist=0)
 |      setLOD(self, string)
 |      Set the switch distance for given LOD
 |  
 |  setLODAnimation(self, farDistance, nearDistance, delayFactor)
 |      Activates a special mode in which the Actor animates less
 |      frequently as it gets further from the camera.  This is
 |      intended as a simple optimization to minimize the effort of
 |      computing animation for lots of characters that may not
 |      necessarily be very important to animate every frame.
 |      
 |      If the character is closer to the camera than near_distance,
 |      then it is animated its normal rate, every frame.  If the
 |      character is exactly far_distance away, it is animated only
 |      every delay_factor seconds (which should be a number greater
 |      than 0).  If the character is between near_distance and
 |      far_distance, its animation rate is linearly interpolated
 |      according to its distance between the two.  The interpolation
 |      function continues beyond far_distance, so that the character
 |      is animated increasingly less frequently as it gets farther
 |      away.
 |  
 |  setLODNode(self, node=None)
 |      Set the node that switches actor geometry in and out.
 |      If one is not supplied as an argument, make one
 |  
 |  setPlayRate(self, rate, animName, partName=None)
 |      setPlayRate(self, float, string, string=None)
 |      Set the play rate of given anim for a given part.
 |      If no part is given, set for all parts in dictionary.
 |      
 |      It used to be legal to let the animName default to the
 |      currently-playing anim, but this was confusing and could lead
 |      to the wrong anim's play rate getting set.  Better to insist
 |      on this parameter.
 |      NOTE: sets play rate on all LODs
 |  
 |  setSubpartsComplete(self, flag)
 |      Sets the subpartsComplete flag.  This affects the behavior
 |      of play(), loop(), stop(), etc., when no explicit parts are
 |      specified.
 |      
 |      When this flag is False (the default), play() with no parts
 |      means to play the animation on the overall Actor, which is a
 |      separate part that overlaps each of the subparts.  If you then
 |      play a different animation on a subpart, it may stop the
 |      overall animation (in non-blend mode) or blend with it (in
 |      blend mode).
 |      
 |      When this flag is True, play() with no parts means to play the
 |      animation on each of the subparts--instead of on the overall
 |      Actor.  In this case, you may then play a different animation
 |      on a subpart, which replaces only that subpart's animation.
 |      
 |      It makes sense to set this True when the union of all of your
 |      subparts completely defines the entire Actor.
 |  
 |  showAllBounds(self)
 |      Show the bounds of all actor geoms
 |  
 |  showAllParts(self, partName, lodName='lodRoot')
 |      Make the given part and all its children render while in the tree.
 |      NOTE: this will affect child geometry
 |  
 |  showPart(self, partName, lodName='lodRoot')
 |      Make the given part render while in the tree.
 |      NOTE: this will affect child geometry
 |  
 |  stop(self, animName=None, partName=None)
 |      stop(self, string=None, string=None)
 |      Stop named animation on the given part of the actor.
 |      If no name specified then stop all animations on the actor.
 |      NOTE: stops all LODs
 |  
 |  stopJoint(self, partName, jointName, lodName='lodRoot')
 |      stopJoint(self, string, string, key="lodRoot")
 |      Stops the joint from animating external nodes.  If the joint
 |      is animating a transform on a node, this will permanently stop
 |      it.  However, this does not affect vertex animations.
 |  
 |  unloadAnims(self, anims=None, partName=None, lodName=None)
 |      unloadAnims(self, string:string{}, string='modelRoot',
 |      string='lodRoot')
 |      Actor anim unloader. Takes an optional partName (defaults to
 |      'modelRoot' for non-multipart actors) and lodName (defaults to
 |      'lodRoot' for non-LOD actors) and list of animation
 |      names. Deletes the anim control for the given animation and
 |      parts/lods.
 |      
 |      If any parameter is None or omitted, it means all of them.
 |  
 |  update(self, lod=0, partName=None, lodName=None, force=False)
 |      Updates all of the Actor's joints in the indicated LOD.
 |      The LOD may be specified by name, or by number, where 0 is the
 |      highest level of detail, 1 is the next highest, and so on.
 |      
 |      If force is True, this will update every joint, even if we
 |      don't believe it's necessary.
 |      
 |      Returns True if any joint has changed as a result of this,
 |      False otherwise.
 |  
 |  useLOD(self, lodName)
 |      Make the Actor ONLY display the given LOD
 |  
 |  verifySubpartsComplete(self, partName=None, lodName=None)
 |      Ensures that each joint is defined by at least one
 |      subPart.  Prints a warning if this is not the case.
 |  
 |  waitPending(self, partName=None)
 |      Blocks until all asynchronously pending animations (that
 |      are currently playing) have been loaded and bound the the
 |      Actor.  Call this after calling play() if you are using
 |      asynchronous binds, but you need this particular animation
 |      to be loaded immediately.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from direct.actor.Actor.Actor:
 |  
 |  AnimDef = <class direct.actor.Actor.AnimDef>
 |  
 |  PartDef = <class direct.actor.Actor.PartDef>
 |  
 |  SubpartDef = <class direct.actor.Actor.SubpartDef>
 |  
 |  animLoaderOptions = LoaderOptions(LF_search | LF_report_errors | LF_co...
 |  
 |  modelLoaderOptions = LoaderOptions(LF_search | LF_report_errors | LF_c...
 |  
 |  partPrefix = '__Actor_'
 |  
 |  validateSubparts = 1
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.showbase.DirectObject.DirectObject:
 |  
 |  accept(self, event, method, extraArgs=[])
 |  
 |  acceptOnce(self, event, method, extraArgs=[])
 |  
 |  addTask(self, *args, **kwargs)
 |      #This function must be used if you want a managed task
 |  
 |  classTree(self)
 |  
 |  detectLeaks(self)
 |  
 |  doMethodLater(self, *args, **kwargs)
 |  
 |  getAllAccepting(self)
 |  
 |  ignore(self, event)
 |  
 |  ignoreAll(self)
 |  
 |  isAccepting(self, event)
 |  
 |  isIgnoring(self, event)
 |  
 |  removeAllTasks(self)
 |  
 |  removeTask(self, taskOrName)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from panda3d.core.NodePath:
 |  
 |  __copy__(...)
 |      C++ Interface:
 |      __copy__(const NodePath this)
 |  
 |  __deepcopy__(...)
 |      C++ Interface:
 |      __deepcopy__(const NodePath this, any memo)
 |  
 |  __delattr__(...)
 |      x.__delattr__('name') <==> del x.name
 |  
 |  __eq__(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  __ge__(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  __getattribute__(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  __gt__(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  __hash__(...)
 |      x.__hash__() <==> hash(x)
 |  
 |  __le__(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  __lt__(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  __ne__(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  __nonzero__(...)
 |      x.__nonzero__() <==> x != 0
 |  
 |  __reduce__(...)
 |      C++ Interface:
 |      __reduce__(const NodePath this)
 |  
 |  __reduce_persist__(...)
 |      C++ Interface:
 |      __reduce_persist__(const NodePath this, any pickler)
 |  
 |  __repr__(...)
 |      x.__repr__() <==> repr(x)
 |  
 |  __setattr__(...)
 |      x.__setattr__('name', value) <==> x.name = value
 |  
 |  addHash(...)
 |      C++ Interface:
 |      add_hash(const NodePath this, unsigned int hash)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::add_hash
 |      //       Access: Published
 |      //  Description: Adds the NodePath into the running hash.  This is
 |      //               intended to be used by lower-level code that computes
 |      //               a hash for each NodePath.  It modifies the hash value
 |      //               passed in by a unique adjustment for each NodePath,
 |      //               and returns the modified hash.
 |      //
 |      //               This is similar to the unique integer returned by
 |      //               get_key(), but it is not guaranteed to remain unique
 |      //               beyond the lifetime of this particular NodePath.
 |      //               Once this NodePath destructs, a different NodePath
 |      //               may be created which shares the same hash value.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  add_hash(...)
 |      C++ Interface:
 |      add_hash(const NodePath this, unsigned int hash)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::add_hash
 |      //       Access: Published
 |      //  Description: Adds the NodePath into the running hash.  This is
 |      //               intended to be used by lower-level code that computes
 |      //               a hash for each NodePath.  It modifies the hash value
 |      //               passed in by a unique adjustment for each NodePath,
 |      //               and returns the modified hash.
 |      //
 |      //               This is similar to the unique integer returned by
 |      //               get_key(), but it is not guaranteed to remain unique
 |      //               beyond the lifetime of this particular NodePath.
 |      //               Once this NodePath destructs, a different NodePath
 |      //               may be created which shares the same hash value.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  adjustAllPriorities(...)
 |      C++ Interface:
 |      adjust_all_priorities(non-const NodePath this, int adjustment)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::adjust_all_priorities
 |      //       Access: Published
 |      //  Description: Adds the indicated adjustment amount (which may be
 |      //               negative) to the priority for all transitions on the
 |      //               referenced node, and for all nodes in the subgraph
 |      //               below.  This can be used to force these nodes not to
 |      //               be overridden by a high-level state change above.  If
 |      //               the priority would drop below zero, it is set to
 |      //               zero.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  adjust_all_priorities(...)
 |      C++ Interface:
 |      adjust_all_priorities(non-const NodePath this, int adjustment)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::adjust_all_priorities
 |      //       Access: Published
 |      //  Description: Adds the indicated adjustment amount (which may be
 |      //               negative) to the priority for all transitions on the
 |      //               referenced node, and for all nodes in the subgraph
 |      //               below.  This can be used to force these nodes not to
 |      //               be overridden by a high-level state change above.  If
 |      //               the priority would drop below zero, it is set to
 |      //               zero.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  analyze(self)
 |      #####################################################################
 |  
 |  applyTextureColors(...)
 |      C++ Interface:
 |      apply_texture_colors(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::apply_texture_colors
 |      //       Access: Published
 |      //  Description: Removes textures from Geoms at this node and below by
 |      //               applying the texture colors to the vertices.  This is
 |      //               primarily useful to simplify a low-LOD model.  The
 |      //               texture colors are replaced by flat colors that
 |      //               approximate the original textures.
 |      //
 |      //               Only the bottommost texture on each Geom is used (if
 |      //               there is more than one), and it is applied as if it
 |      //               were M_modulate, and WM_repeat, regardless of its
 |      //               actual settings.  If the texture has a
 |      //               simple_ram_image, this may be used if the main image
 |      //               isn't resident.
 |      //
 |      //               After this call, there will be no texturing specified
 |      //               at this level and below.  Of course, there might
 |      //               still be texturing inherited from above.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  apply_texture_colors(...)
 |      C++ Interface:
 |      apply_texture_colors(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::apply_texture_colors
 |      //       Access: Published
 |      //  Description: Removes textures from Geoms at this node and below by
 |      //               applying the texture colors to the vertices.  This is
 |      //               primarily useful to simplify a low-LOD model.  The
 |      //               texture colors are replaced by flat colors that
 |      //               approximate the original textures.
 |      //
 |      //               Only the bottommost texture on each Geom is used (if
 |      //               there is more than one), and it is applied as if it
 |      //               were M_modulate, and WM_repeat, regardless of its
 |      //               actual settings.  If the texture has a
 |      //               simple_ram_image, this may be used if the main image
 |      //               isn't resident.
 |      //
 |      //               After this call, there will be no texturing specified
 |      //               at this level and below.  Of course, there might
 |      //               still be texturing inherited from above.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  assign(...)
 |      C++ Interface:
 |      assign(non-const NodePath this, const NodePath copy)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::Copy Assignment Operator
 |      //       Access: Published
 |      //  Description:
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  attachCollisionRay(self, name, ox, oy, oz, dx, dy, dz, fromCollide, intoCollide)
 |      #####################################################################
 |  
 |  attachCollisionSegment(self, name, ax, ay, az, bx, by, bz, fromCollide, intoCollide)
 |      #####################################################################
 |  
 |  attachCollisionSphere(self, name, cx, cy, cz, r, fromCollide, intoCollide)
 |      #####################################################################
 |  
 |  attachNewNode(...)
 |      C++ Interface:
 |      attach_new_node(const NodePath this, non-const PandaNode node)
 |      attach_new_node(const NodePath this, string name)
 |      attach_new_node(const NodePath this, non-const PandaNode node, int sort)
 |      attach_new_node(const NodePath this, string name, int sort)
 |      attach_new_node(const NodePath this, non-const PandaNode node, int sort, non-const Thread current_thread)
 |      attach_new_node(const NodePath this, string name, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::attach_new_node
 |      //       Access: Published
 |      //  Description: Creates an ordinary PandaNode and attaches it below
 |      //               the current NodePath, returning a new NodePath that
 |      //               references it.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::attach_new_node
 |      //       Access: Published
 |      //  Description: Attaches a new node, with or without existing
 |      //               parents, to the scene graph below the referenced node
 |      //               of this NodePath.  This is the preferred way to add
 |      //               nodes to the graph.
 |      //
 |      //               If the node was already a child of the parent, this
 |      //               returns a NodePath to the existing child.
 |      //
 |      //               This does *not* automatically extend the current
 |      //               NodePath to reflect the attachment; however, a
 |      //               NodePath that does reflect this extension is
 |      //               returned.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  attach_new_node(...)
 |      C++ Interface:
 |      attach_new_node(const NodePath this, non-const PandaNode node)
 |      attach_new_node(const NodePath this, string name)
 |      attach_new_node(const NodePath this, non-const PandaNode node, int sort)
 |      attach_new_node(const NodePath this, string name, int sort)
 |      attach_new_node(const NodePath this, non-const PandaNode node, int sort, non-const Thread current_thread)
 |      attach_new_node(const NodePath this, string name, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::attach_new_node
 |      //       Access: Published
 |      //  Description: Creates an ordinary PandaNode and attaches it below
 |      //               the current NodePath, returning a new NodePath that
 |      //               references it.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::attach_new_node
 |      //       Access: Published
 |      //  Description: Attaches a new node, with or without existing
 |      //               parents, to the scene graph below the referenced node
 |      //               of this NodePath.  This is the preferred way to add
 |      //               nodes to the graph.
 |      //
 |      //               If the node was already a child of the parent, this
 |      //               returns a NodePath to the existing child.
 |      //
 |      //               This does *not* automatically extend the current
 |      //               NodePath to reflect the attachment; however, a
 |      //               NodePath that does reflect this extension is
 |      //               returned.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  calcTightBounds(...)
 |      C++ Interface:
 |      calc_tight_bounds(const NodePath this, non-const LPoint3f min_point, non-const LPoint3f max_point)
 |      calc_tight_bounds(const NodePath this, non-const LPoint3f min_point, non-const LPoint3f max_point, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::calc_tight_bounds
 |      //       Access: Published
 |      //  Description: Calculates the minimum and maximum vertices of all
 |      //               Geoms at this NodePath's bottom node and below.  This
 |      //               is a tight bounding box; it will generally be tighter
 |      //               than the bounding volume returned by get_bounds()
 |      //               (but it is more expensive to compute).
 |      //
 |      //               The return value is true if any points are within the
 |      //               bounding volume, or false if none are.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  calc_tight_bounds(...)
 |      C++ Interface:
 |      calc_tight_bounds(const NodePath this, non-const LPoint3f min_point, non-const LPoint3f max_point)
 |      calc_tight_bounds(const NodePath this, non-const LPoint3f min_point, non-const LPoint3f max_point, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::calc_tight_bounds
 |      //       Access: Published
 |      //  Description: Calculates the minimum and maximum vertices of all
 |      //               Geoms at this NodePath's bottom node and below.  This
 |      //               is a tight bounding box; it will generally be tighter
 |      //               than the bounding volume returned by get_bounds()
 |      //               (but it is more expensive to compute).
 |      //
 |      //               The return value is true if any points are within the
 |      //               bounding volume, or false if none are.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearAntialias(...)
 |      C++ Interface:
 |      clear_antialias(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_antialias
 |      //       Access: Published
 |      //  Description: Completely removes any antialias setting that
 |      //               may have been set on this node via set_antialias().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearAttrib(...)
 |      C++ Interface:
 |      clear_attrib(non-const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_attrib
 |      //       Access: Published
 |      //  Description: Removes the render attribute of the given type from
 |      //               this node.  This node, and the subgraph below, will
 |      //               now inherit the indicated render attribute from the
 |      //               nodes above this one.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearAudioVolume(...)
 |      C++ Interface:
 |      clear_audio_volume(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_audio_volume
 |      //       Access: Published
 |      //  Description: Completely removes any audio volume from the
 |      //               referenced node.  This is preferable to simply
 |      //               setting the audio volume to identity, as it also
 |      //               removes the overhead associated with having an audio
 |      //               volume at all.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearBillboard(...)
 |      C++ Interface:
 |      clear_billboard(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_billboard
 |      //       Access: Published
 |      //  Description: Removes any billboard effect from the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearBin(...)
 |      C++ Interface:
 |      clear_bin(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_bin
 |      //       Access: Published
 |      //  Description: Completely removes any bin adjustment that may have
 |      //               been set via set_bin() from this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearClipPlane(...)
 |      C++ Interface:
 |      clear_clip_plane(non-const NodePath this)
 |      clear_clip_plane(non-const NodePath this, const NodePath clip_plane)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_clip_plane
 |      //       Access: Published
 |      //  Description: Completely removes any clip planes that may have been
 |      //               set via set_clip_plane() or set_clip_plane_off() from
 |      //               this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_clip_plane
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated clipping plane
 |      //               from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearColor(...)
 |      C++ Interface:
 |      clear_color(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_color
 |      //       Access: Published
 |      //  Description: Completely removes any color adjustment from the node.
 |      //               This allows the natural color of the geometry, or
 |      //               whatever color transitions might be otherwise
 |      //               affecting the geometry, to show instead.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearColorScale(...)
 |      C++ Interface:
 |      clear_color_scale(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_color_scale
 |      //       Access: Published
 |      //  Description: Completely removes any color scale from the
 |      //               referenced node.  This is preferable to simply
 |      //               setting the color scale to identity, as it also
 |      //               removes the overhead associated with having a color
 |      //               scale at all.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearCompass(...)
 |      C++ Interface:
 |      clear_compass(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_compass
 |      //       Access: Published
 |      //  Description: Removes any compass effect from the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearDepthOffset(...)
 |      C++ Interface:
 |      clear_depth_offset(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_depth_offset
 |      //       Access: Published
 |      //  Description: Completely removes any depth-offset adjustment that
 |      //               may have been set on this node via set_depth_offset().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearDepthTest(...)
 |      C++ Interface:
 |      clear_depth_test(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_depth_test
 |      //       Access: Published
 |      //  Description: Completely removes any depth-test adjustment that
 |      //               may have been set on this node via set_depth_test().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearDepthWrite(...)
 |      C++ Interface:
 |      clear_depth_write(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_depth_write
 |      //       Access: Published
 |      //  Description: Completely removes any depth-write adjustment that
 |      //               may have been set on this node via set_depth_write().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearEffect(...)
 |      C++ Interface:
 |      clear_effect(non-const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_effect
 |      //       Access: Published
 |      //  Description: Removes the render effect of the given type from
 |      //               this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearEffects(...)
 |      C++ Interface:
 |      clear_effects(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_effects
 |      //       Access: Published
 |      //  Description: Resets this node to have no render effects.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearFog(...)
 |      C++ Interface:
 |      clear_fog(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_fog
 |      //       Access: Published
 |      //  Description: Completely removes any fog adjustment that may
 |      //               have been set via set_fog() or set_fog_off()
 |      //               from this particular node.  This allows whatever
 |      //               fogs might be otherwise affecting the geometry to
 |      //               show instead.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearLight(...)
 |      C++ Interface:
 |      clear_light(non-const NodePath this)
 |      clear_light(non-const NodePath this, const NodePath light)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_light
 |      //       Access: Published
 |      //  Description: Completely removes any lighting operations that may
 |      //               have been set via set_light() or set_light_off()
 |      //               from this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_light
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated Light or
 |      //               PolylightNode from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearMat(...)
 |      C++ Interface:
 |      clear_mat(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_mat
 |      //       Access: Published
 |      //  Description: Completely removes any transform from the referenced
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearMaterial(...)
 |      C++ Interface:
 |      clear_material(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_material
 |      //       Access: Published
 |      //  Description: Completely removes any material adjustment that may
 |      //               have been set via set_material() from this particular
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearModelNodes(...)
 |      C++ Interface:
 |      clear_model_nodes(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_model_nodes
 |      //       Access: Published
 |      //  Description: Recursively walks through the scene graph at this
 |      //               level and below, looking for ModelNodes, and calls
 |      //               model_node->set_preserve_transform(PT_drop_node) on
 |      //               each one.  This allows a subsequent call to
 |      //               flatten_strong() to eliminate all of the ModelNodes.
 |      //
 |      //               Returns the number of ModelNodes found.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearNormalMap(...)
 |      C++ Interface:
 |      clear_normal_map(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_normal_map
 |      //       Access: Published
 |      //  Description: Undoes the effect of a previous call to
 |      //               set_normal_map().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearOccluder(...)
 |      C++ Interface:
 |      clear_occluder(non-const NodePath this)
 |      clear_occluder(non-const NodePath this, const NodePath occluder)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_occluder
 |      //       Access: Published
 |      //  Description: Completely removes any occluders that may have been
 |      //               set via set_occluder() from this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_occluder
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated occluder
 |      //               from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearProjectTexture(...)
 |      C++ Interface:
 |      clear_project_texture(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_project_texture
 |      //       Access: Published
 |      //  Description: Undoes the effect of project_texture().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearPythonTag(...)
 |      C++ Interface:
 |      clear_python_tag(non-const NodePath this, string key)
 |  
 |  clearRenderMode(...)
 |      C++ Interface:
 |      clear_render_mode(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_render_mode
 |      //       Access: Published
 |      //  Description: Completely removes any render mode adjustment that
 |      //               may have been set on this node via
 |      //               set_render_mode_wireframe() or
 |      //               set_render_mode_filled().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearScissor(...)
 |      C++ Interface:
 |      clear_scissor(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_scissor
 |      //       Access: Published
 |      //  Description: Removes the scissor region that was defined at this
 |      //               node level by a previous call to set_scissor().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearShader(...)
 |      C++ Interface:
 |      clear_shader(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_shader
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearShaderInput(...)
 |      C++ Interface:
 |      clear_shader_input(non-const NodePath this, const InternalName id)
 |      clear_shader_input(non-const NodePath this, string id)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTag(...)
 |      C++ Interface:
 |      clear_tag(non-const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tag
 |      //       Access: Published
 |      //  Description: Removes the value defined for this key on this
 |      //               particular node.  After a call to clear_tag(),
 |      //               has_tag() will return false for the indicated key.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTexGen(...)
 |      C++ Interface:
 |      clear_tex_gen(non-const NodePath this)
 |      clear_tex_gen(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_gen
 |      //       Access: Published
 |      //  Description: Removes the texture coordinate generation mode from
 |      //               all texture stages on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_gen
 |      //       Access: Published
 |      //  Description: Disables automatic texture coordinate generation for
 |      //               the indicated texture stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTexProjector(...)
 |      C++ Interface:
 |      clear_tex_projector(non-const NodePath this)
 |      clear_tex_projector(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_projector
 |      //       Access: Published
 |      //  Description: Removes the TexProjectorEffect for the indicated
 |      //               stage from this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_projector
 |      //       Access: Published
 |      //  Description: Removes the TexProjectorEffect for all stages from
 |      //               this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTexTransform(...)
 |      C++ Interface:
 |      clear_tex_transform(non-const NodePath this)
 |      clear_tex_transform(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_transform
 |      //       Access: Published
 |      //  Description: Removes all texture matrices from the current node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_transform
 |      //       Access: Published
 |      //  Description: Removes the texture matrix on the current node for
 |      //               the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTexture(...)
 |      C++ Interface:
 |      clear_texture(non-const NodePath this)
 |      clear_texture(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_texture
 |      //       Access: Published
 |      //  Description: Completely removes any texture adjustment that may
 |      //               have been set via set_texture() or set_texture_off()
 |      //               from this particular node.  This allows whatever
 |      //               textures might be otherwise affecting the geometry to
 |      //               show instead.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_texture
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated texture stage
 |      //               from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTransform(...)
 |      C++ Interface:
 |      clear_transform(non-const NodePath this)
 |      clear_transform(non-const NodePath this, const NodePath other)
 |      clear_transform(non-const NodePath this, non-const Thread current_thread)
 |      clear_transform(non-const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_transform
 |      //       Access: Published
 |      //  Description: Sets the transform object on this node to identity.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_transform
 |      //       Access: Published
 |      //  Description: Sets the transform object on this node to identity,
 |      //               relative to the other node.  This effectively places
 |      //               this node at the same position as the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTransparency(...)
 |      C++ Interface:
 |      clear_transparency(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_transparency
 |      //       Access: Published
 |      //  Description: Completely removes any transparency adjustment that
 |      //               may have been set on this node via set_transparency().
 |      //               The geometry at this level and below will
 |      //               subsequently be rendered either transparent or not,
 |      //               to whatever other nodes may have had
 |      //               set_transparency() on them.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clearTwoSided(...)
 |      C++ Interface:
 |      clear_two_sided(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_two_sided
 |      //       Access: Published
 |      //  Description: Completely removes any two-sided adjustment that
 |      //               may have been set on this node via set_two_sided().
 |      //               The geometry at this level and below will
 |      //               subsequently be rendered either two-sided or
 |      //               one-sided, according to whatever other nodes may have
 |      //               had set_two_sided() on it, or according to the
 |      //               initial state otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_antialias(...)
 |      C++ Interface:
 |      clear_antialias(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_antialias
 |      //       Access: Published
 |      //  Description: Completely removes any antialias setting that
 |      //               may have been set on this node via set_antialias().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_attrib(...)
 |      C++ Interface:
 |      clear_attrib(non-const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_attrib
 |      //       Access: Published
 |      //  Description: Removes the render attribute of the given type from
 |      //               this node.  This node, and the subgraph below, will
 |      //               now inherit the indicated render attribute from the
 |      //               nodes above this one.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_audio_volume(...)
 |      C++ Interface:
 |      clear_audio_volume(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_audio_volume
 |      //       Access: Published
 |      //  Description: Completely removes any audio volume from the
 |      //               referenced node.  This is preferable to simply
 |      //               setting the audio volume to identity, as it also
 |      //               removes the overhead associated with having an audio
 |      //               volume at all.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_billboard(...)
 |      C++ Interface:
 |      clear_billboard(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_billboard
 |      //       Access: Published
 |      //  Description: Removes any billboard effect from the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_bin(...)
 |      C++ Interface:
 |      clear_bin(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_bin
 |      //       Access: Published
 |      //  Description: Completely removes any bin adjustment that may have
 |      //               been set via set_bin() from this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_clip_plane(...)
 |      C++ Interface:
 |      clear_clip_plane(non-const NodePath this)
 |      clear_clip_plane(non-const NodePath this, const NodePath clip_plane)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_clip_plane
 |      //       Access: Published
 |      //  Description: Completely removes any clip planes that may have been
 |      //               set via set_clip_plane() or set_clip_plane_off() from
 |      //               this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_clip_plane
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated clipping plane
 |      //               from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_color(...)
 |      C++ Interface:
 |      clear_color(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_color
 |      //       Access: Published
 |      //  Description: Completely removes any color adjustment from the node.
 |      //               This allows the natural color of the geometry, or
 |      //               whatever color transitions might be otherwise
 |      //               affecting the geometry, to show instead.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_color_scale(...)
 |      C++ Interface:
 |      clear_color_scale(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_color_scale
 |      //       Access: Published
 |      //  Description: Completely removes any color scale from the
 |      //               referenced node.  This is preferable to simply
 |      //               setting the color scale to identity, as it also
 |      //               removes the overhead associated with having a color
 |      //               scale at all.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_compass(...)
 |      C++ Interface:
 |      clear_compass(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_compass
 |      //       Access: Published
 |      //  Description: Removes any compass effect from the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_depth_offset(...)
 |      C++ Interface:
 |      clear_depth_offset(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_depth_offset
 |      //       Access: Published
 |      //  Description: Completely removes any depth-offset adjustment that
 |      //               may have been set on this node via set_depth_offset().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_depth_test(...)
 |      C++ Interface:
 |      clear_depth_test(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_depth_test
 |      //       Access: Published
 |      //  Description: Completely removes any depth-test adjustment that
 |      //               may have been set on this node via set_depth_test().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_depth_write(...)
 |      C++ Interface:
 |      clear_depth_write(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_depth_write
 |      //       Access: Published
 |      //  Description: Completely removes any depth-write adjustment that
 |      //               may have been set on this node via set_depth_write().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_effect(...)
 |      C++ Interface:
 |      clear_effect(non-const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_effect
 |      //       Access: Published
 |      //  Description: Removes the render effect of the given type from
 |      //               this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_effects(...)
 |      C++ Interface:
 |      clear_effects(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_effects
 |      //       Access: Published
 |      //  Description: Resets this node to have no render effects.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_fog(...)
 |      C++ Interface:
 |      clear_fog(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_fog
 |      //       Access: Published
 |      //  Description: Completely removes any fog adjustment that may
 |      //               have been set via set_fog() or set_fog_off()
 |      //               from this particular node.  This allows whatever
 |      //               fogs might be otherwise affecting the geometry to
 |      //               show instead.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_light(...)
 |      C++ Interface:
 |      clear_light(non-const NodePath this)
 |      clear_light(non-const NodePath this, const NodePath light)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_light
 |      //       Access: Published
 |      //  Description: Completely removes any lighting operations that may
 |      //               have been set via set_light() or set_light_off()
 |      //               from this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_light
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated Light or
 |      //               PolylightNode from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_mat(...)
 |      C++ Interface:
 |      clear_mat(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_mat
 |      //       Access: Published
 |      //  Description: Completely removes any transform from the referenced
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_material(...)
 |      C++ Interface:
 |      clear_material(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_material
 |      //       Access: Published
 |      //  Description: Completely removes any material adjustment that may
 |      //               have been set via set_material() from this particular
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_model_nodes(...)
 |      C++ Interface:
 |      clear_model_nodes(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_model_nodes
 |      //       Access: Published
 |      //  Description: Recursively walks through the scene graph at this
 |      //               level and below, looking for ModelNodes, and calls
 |      //               model_node->set_preserve_transform(PT_drop_node) on
 |      //               each one.  This allows a subsequent call to
 |      //               flatten_strong() to eliminate all of the ModelNodes.
 |      //
 |      //               Returns the number of ModelNodes found.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_normal_map(...)
 |      C++ Interface:
 |      clear_normal_map(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_normal_map
 |      //       Access: Published
 |      //  Description: Undoes the effect of a previous call to
 |      //               set_normal_map().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_occluder(...)
 |      C++ Interface:
 |      clear_occluder(non-const NodePath this)
 |      clear_occluder(non-const NodePath this, const NodePath occluder)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_occluder
 |      //       Access: Published
 |      //  Description: Completely removes any occluders that may have been
 |      //               set via set_occluder() from this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_occluder
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated occluder
 |      //               from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_project_texture(...)
 |      C++ Interface:
 |      clear_project_texture(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_project_texture
 |      //       Access: Published
 |      //  Description: Undoes the effect of project_texture().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_python_tag(...)
 |      C++ Interface:
 |      clear_python_tag(non-const NodePath this, string key)
 |  
 |  clear_render_mode(...)
 |      C++ Interface:
 |      clear_render_mode(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_render_mode
 |      //       Access: Published
 |      //  Description: Completely removes any render mode adjustment that
 |      //               may have been set on this node via
 |      //               set_render_mode_wireframe() or
 |      //               set_render_mode_filled().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_scissor(...)
 |      C++ Interface:
 |      clear_scissor(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_scissor
 |      //       Access: Published
 |      //  Description: Removes the scissor region that was defined at this
 |      //               node level by a previous call to set_scissor().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_shader(...)
 |      C++ Interface:
 |      clear_shader(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_shader
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_shader_input(...)
 |      C++ Interface:
 |      clear_shader_input(non-const NodePath this, const InternalName id)
 |      clear_shader_input(non-const NodePath this, string id)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_tag(...)
 |      C++ Interface:
 |      clear_tag(non-const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tag
 |      //       Access: Published
 |      //  Description: Removes the value defined for this key on this
 |      //               particular node.  After a call to clear_tag(),
 |      //               has_tag() will return false for the indicated key.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_tex_gen(...)
 |      C++ Interface:
 |      clear_tex_gen(non-const NodePath this)
 |      clear_tex_gen(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_gen
 |      //       Access: Published
 |      //  Description: Removes the texture coordinate generation mode from
 |      //               all texture stages on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_gen
 |      //       Access: Published
 |      //  Description: Disables automatic texture coordinate generation for
 |      //               the indicated texture stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_tex_projector(...)
 |      C++ Interface:
 |      clear_tex_projector(non-const NodePath this)
 |      clear_tex_projector(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_projector
 |      //       Access: Published
 |      //  Description: Removes the TexProjectorEffect for the indicated
 |      //               stage from this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_projector
 |      //       Access: Published
 |      //  Description: Removes the TexProjectorEffect for all stages from
 |      //               this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_tex_transform(...)
 |      C++ Interface:
 |      clear_tex_transform(non-const NodePath this)
 |      clear_tex_transform(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_transform
 |      //       Access: Published
 |      //  Description: Removes all texture matrices from the current node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_tex_transform
 |      //       Access: Published
 |      //  Description: Removes the texture matrix on the current node for
 |      //               the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_texture(...)
 |      C++ Interface:
 |      clear_texture(non-const NodePath this)
 |      clear_texture(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_texture
 |      //       Access: Published
 |      //  Description: Completely removes any texture adjustment that may
 |      //               have been set via set_texture() or set_texture_off()
 |      //               from this particular node.  This allows whatever
 |      //               textures might be otherwise affecting the geometry to
 |      //               show instead.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_texture
 |      //       Access: Published
 |      //  Description: Removes any reference to the indicated texture stage
 |      //               from the NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_transform(...)
 |      C++ Interface:
 |      clear_transform(non-const NodePath this)
 |      clear_transform(non-const NodePath this, const NodePath other)
 |      clear_transform(non-const NodePath this, non-const Thread current_thread)
 |      clear_transform(non-const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_transform
 |      //       Access: Published
 |      //  Description: Sets the transform object on this node to identity.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_transform
 |      //       Access: Published
 |      //  Description: Sets the transform object on this node to identity,
 |      //               relative to the other node.  This effectively places
 |      //               this node at the same position as the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_transparency(...)
 |      C++ Interface:
 |      clear_transparency(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_transparency
 |      //       Access: Published
 |      //  Description: Completely removes any transparency adjustment that
 |      //               may have been set on this node via set_transparency().
 |      //               The geometry at this level and below will
 |      //               subsequently be rendered either transparent or not,
 |      //               to whatever other nodes may have had
 |      //               set_transparency() on them.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  clear_two_sided(...)
 |      C++ Interface:
 |      clear_two_sided(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::clear_two_sided
 |      //       Access: Published
 |      //  Description: Completely removes any two-sided adjustment that
 |      //               may have been set on this node via set_two_sided().
 |      //               The geometry at this level and below will
 |      //               subsequently be rendered either two-sided or
 |      //               one-sided, according to whatever other nodes may have
 |      //               had set_two_sided() on it, or according to the
 |      //               initial state otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  colorInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  colorScaleInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  compareTo(...)
 |      C++ Interface:
 |      compare_to(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::compare_to
 |      //       Access: Published
 |      //  Description: Returns a number less than zero if this NodePath
 |      //               sorts before the other one, greater than zero if it
 |      //               sorts after, or zero if they are equivalent.
 |      //
 |      //               Two NodePaths are considered equivalent if they
 |      //               consist of exactly the same list of nodes in the same
 |      //               order.  Otherwise, they are different; different
 |      //               NodePaths will be ranked in a consistent but
 |      //               undefined ordering; the ordering is useful only for
 |      //               placing the NodePaths in a sorted container like an
 |      //               STL set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  compare_to(...)
 |      C++ Interface:
 |      compare_to(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::compare_to
 |      //       Access: Published
 |      //  Description: Returns a number less than zero if this NodePath
 |      //               sorts before the other one, greater than zero if it
 |      //               sorts after, or zero if they are equivalent.
 |      //
 |      //               Two NodePaths are considered equivalent if they
 |      //               consist of exactly the same list of nodes in the same
 |      //               order.  Otherwise, they are different; different
 |      //               NodePaths will be ranked in a consistent but
 |      //               undefined ordering; the ordering is useful only for
 |      //               placing the NodePaths in a sorted container like an
 |      //               STL set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  composeColorScale(...)
 |      C++ Interface:
 |      compose_color_scale(non-const NodePath this, const LVecBase4f scale)
 |      compose_color_scale(non-const NodePath this, const LVecBase4f scale, int priority)
 |      compose_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa)
 |      compose_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::compose_color_scale
 |      //       Access: Published
 |      //  Description: Sets the color scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::compose_color_scale
 |      //       Access: Published
 |      //  Description: multiplies the color scale component of the transform,
 |      //               with previous color scale leaving translation and 
 |      //               rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  compose_color_scale(...)
 |      C++ Interface:
 |      compose_color_scale(non-const NodePath this, const LVecBase4f scale)
 |      compose_color_scale(non-const NodePath this, const LVecBase4f scale, int priority)
 |      compose_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa)
 |      compose_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::compose_color_scale
 |      //       Access: Published
 |      //  Description: Sets the color scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::compose_color_scale
 |      //       Access: Published
 |      //  Description: multiplies the color scale component of the transform,
 |      //               with previous color scale leaving translation and 
 |      //               rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  copyTo(...)
 |      C++ Interface:
 |      copy_to(const NodePath this, const NodePath other)
 |      copy_to(const NodePath this, const NodePath other, int sort)
 |      copy_to(const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::copy_to
 |      //       Access: Published
 |      //  Description: Functions like instance_to(), except a deep
 |      //               copy is made of the referenced node and all of its
 |      //               descendents, which is then parented to the indicated
 |      //               node.  A NodePath to the newly created copy is
 |      //               returned.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  copy_to(...)
 |      C++ Interface:
 |      copy_to(const NodePath this, const NodePath other)
 |      copy_to(const NodePath this, const NodePath other, int sort)
 |      copy_to(const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::copy_to
 |      //       Access: Published
 |      //  Description: Functions like instance_to(), except a deep
 |      //               copy is made of the referenced node and all of its
 |      //               descendents, which is then parented to the indicated
 |      //               node.  A NodePath to the newly created copy is
 |      //               returned.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  countNumDescendants(...)
 |      C++ Interface:
 |      count_num_descendants(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::count_num_descendants
 |      //       Access: Published
 |      //  Description: Returns the number of nodes at and below this level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  count_num_descendants(...)
 |      C++ Interface:
 |      count_num_descendants(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::count_num_descendants
 |      //       Access: Published
 |      //  Description: Returns the number of nodes at and below this level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  deselect(self)
 |      #####################################################################
 |  
 |  detachNode(...)
 |      C++ Interface:
 |      detach_node(non-const NodePath this)
 |      detach_node(non-const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::detach_node
 |      //       Access: Published
 |      //  Description: Disconnects the referenced node from its parent, but
 |      //               does not immediately delete it.  The NodePath retains
 |      //               a pointer to the node, and becomes a singleton
 |      //               NodePath.
 |      //
 |      //               This should be called to detach a node from the scene
 |      //               graph, with the option of reattaching it later to the
 |      //               same parent or to a different parent.
 |      //
 |      //               In practice, the only difference between
 |      //               remove_node() and detach_node() is that remove_node()
 |      //               also resets the NodePath to empty, which will cause
 |      //               the node to be deleted immediately if there are no
 |      //               other references.  On the other hand, detach_node()
 |      //               leaves the NodePath referencing the node, which will
 |      //               keep at least one reference to the node for as long
 |      //               as the NodePath exists.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  detach_node(...)
 |      C++ Interface:
 |      detach_node(non-const NodePath this)
 |      detach_node(non-const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::detach_node
 |      //       Access: Published
 |      //  Description: Disconnects the referenced node from its parent, but
 |      //               does not immediately delete it.  The NodePath retains
 |      //               a pointer to the node, and becomes a singleton
 |      //               NodePath.
 |      //
 |      //               This should be called to detach a node from the scene
 |      //               graph, with the option of reattaching it later to the
 |      //               same parent or to a different parent.
 |      //
 |      //               In practice, the only difference between
 |      //               remove_node() and detach_node() is that remove_node()
 |      //               also resets the NodePath to empty, which will cause
 |      //               the node to be deleted immediately if there are no
 |      //               other references.  On the other hand, detach_node()
 |      //               leaves the NodePath referencing the node, which will
 |      //               keep at least one reference to the node for as long
 |      //               as the NodePath exists.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  doBillboardAxis(...)
 |      C++ Interface:
 |      do_billboard_axis(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::do_billboard_axis
 |      //       Access: Published
 |      //  Description: Performs a billboard-type rotate to the indicated
 |      //               camera node, one time only, and leaves the object
 |      //               rotated.  This is similar in principle to heads_up().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  doBillboardPointEye(...)
 |      C++ Interface:
 |      do_billboard_point_eye(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::do_billboard_point_eye
 |      //       Access: Published
 |      //  Description: Performs a billboard-type rotate to the indicated
 |      //               camera node, one time only, and leaves the object
 |      //               rotated.  This is similar in principle to look_at(),
 |      //               although the point_eye billboard effect cannot be
 |      //               achieved using the ordinary look_at() call.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  doBillboardPointWorld(...)
 |      C++ Interface:
 |      do_billboard_point_world(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::do_billboard_point_world
 |      //       Access: Published
 |      //  Description: Performs a billboard-type rotate to the indicated
 |      //               camera node, one time only, and leaves the object
 |      //               rotated.  This is similar in principle to look_at().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  do_billboard_axis(...)
 |      C++ Interface:
 |      do_billboard_axis(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::do_billboard_axis
 |      //       Access: Published
 |      //  Description: Performs a billboard-type rotate to the indicated
 |      //               camera node, one time only, and leaves the object
 |      //               rotated.  This is similar in principle to heads_up().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  do_billboard_point_eye(...)
 |      C++ Interface:
 |      do_billboard_point_eye(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::do_billboard_point_eye
 |      //       Access: Published
 |      //  Description: Performs a billboard-type rotate to the indicated
 |      //               camera node, one time only, and leaves the object
 |      //               rotated.  This is similar in principle to look_at(),
 |      //               although the point_eye billboard effect cannot be
 |      //               achieved using the ordinary look_at() call.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  do_billboard_point_world(...)
 |      C++ Interface:
 |      do_billboard_point_world(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::do_billboard_point_world
 |      //       Access: Published
 |      //  Description: Performs a billboard-type rotate to the indicated
 |      //               camera node, one time only, and leaves the object
 |      //               rotated.  This is similar in principle to look_at().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  encodeToBamStream(...)
 |      C++ Interface:
 |      encode_to_bam_stream(const NodePath this)
 |      encode_to_bam_stream(const NodePath this, non-const basic_string data)
 |      encode_to_bam_stream(const NodePath this, non-const basic_string data, non-const BamWriter writer)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::encode_to_bam_stream
 |      //       Access: Published
 |      //  Description: Converts the NodePath object into a single
 |      //               stream of data using a BamWriter, and returns that
 |      //               data as a string string.  Returns empty string on
 |      //               failure.  This is similar to write_bam_stream().
 |      //
 |      //               This method is used by __reduce__ to handle streaming
 |      //               of NodePaths to a pickle file.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::encode_to_bam_stream
 |      //       Access: Published
 |      //  Description: Converts the NodePath object into a single
 |      //               stream of data using a BamWriter, and stores that
 |      //               data in the indicated string.  Returns true on
 |      //               success, false on failure.
 |      //
 |      //               If the BamWriter is NULL, this behaves the same way
 |      //               as NodePath::write_bam_stream() and
 |      //               PandaNode::encode_to_bam_stream(), in the sense that
 |      //               it only writes this node and all nodes below it.
 |      //
 |      //               However, if the BamWriter is not NULL, it behaves
 |      //               very differently.  In this case, it encodes the
 |      //               *entire graph* of all nodes connected to the
 |      //               NodePath, including all parent nodes and siblings.
 |      //               This is necessary for correct streaming of related
 |      //               NodePaths and restoration of instances, etc., but it
 |      //               does mean you must detach() a node before writing it
 |      //               if you want to limit the nodes that get written.
 |      //
 |      //               This method is used by __reduce__ to handle streaming
 |      //               of NodePaths to a pickle file.  The BamWriter case is
 |      //               used by the direct.stdpy.pickle module, while the
 |      //               saner, non-BamWriter case is used when the standard
 |      //               pickle module calls this function.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  encode_to_bam_stream(...)
 |      C++ Interface:
 |      encode_to_bam_stream(const NodePath this)
 |      encode_to_bam_stream(const NodePath this, non-const basic_string data)
 |      encode_to_bam_stream(const NodePath this, non-const basic_string data, non-const BamWriter writer)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::encode_to_bam_stream
 |      //       Access: Published
 |      //  Description: Converts the NodePath object into a single
 |      //               stream of data using a BamWriter, and returns that
 |      //               data as a string string.  Returns empty string on
 |      //               failure.  This is similar to write_bam_stream().
 |      //
 |      //               This method is used by __reduce__ to handle streaming
 |      //               of NodePaths to a pickle file.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::encode_to_bam_stream
 |      //       Access: Published
 |      //  Description: Converts the NodePath object into a single
 |      //               stream of data using a BamWriter, and stores that
 |      //               data in the indicated string.  Returns true on
 |      //               success, false on failure.
 |      //
 |      //               If the BamWriter is NULL, this behaves the same way
 |      //               as NodePath::write_bam_stream() and
 |      //               PandaNode::encode_to_bam_stream(), in the sense that
 |      //               it only writes this node and all nodes below it.
 |      //
 |      //               However, if the BamWriter is not NULL, it behaves
 |      //               very differently.  In this case, it encodes the
 |      //               *entire graph* of all nodes connected to the
 |      //               NodePath, including all parent nodes and siblings.
 |      //               This is necessary for correct streaming of related
 |      //               NodePaths and restoration of instances, etc., but it
 |      //               does mean you must detach() a node before writing it
 |      //               if you want to limit the nodes that get written.
 |      //
 |      //               This method is used by __reduce__ to handle streaming
 |      //               of NodePaths to a pickle file.  The BamWriter case is
 |      //               used by the direct.stdpy.pickle module, while the
 |      //               saner, non-BamWriter case is used when the standard
 |      //               pickle module calls this function.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  explore(self)
 |      #####################################################################
 |  
 |  find(...)
 |      C++ Interface:
 |      find(const NodePath this, string path)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find
 |      //       Access: Published
 |      //  Description: Searches for a node below the referenced node that
 |      //               matches the indicated string.  Returns the shortest
 |      //               match found, if any, or an empty NodePath if no match
 |      //               can be found.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findAllMatches(...)
 |      C++ Interface:
 |      find_all_matches(const NodePath this, string path)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_matches
 |      //       Access: Published
 |      //  Description: Returns the complete set of all NodePaths that begin
 |      //               with this NodePath and can be extended by
 |      //               path.  The shortest paths will be listed
 |      //               first.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findAllMaterials(...)
 |      C++ Interface:
 |      find_all_materials(const NodePath this)
 |      find_all_materials(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_materials
 |      //       Access: Published
 |      //  Description: Returns a list of a materials applied to geometry at
 |      //               this node and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_materials
 |      //       Access: Published
 |      //  Description: Returns a list of a materials applied to geometry at
 |      //               this node and below that match the indicated name
 |      //               (which may contain wildcard characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findAllPathsTo(...)
 |      C++ Interface:
 |      find_all_paths_to(const NodePath this, non-const PandaNode node)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_paths_to
 |      //       Access: Published
 |      //  Description: Returns the set of all NodePaths that extend from
 |      //               this NodePath down to the indicated node.  The
 |      //               shortest paths will be listed first.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findAllTexcoords(...)
 |      C++ Interface:
 |      find_all_texcoords(const NodePath this)
 |      find_all_texcoords(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texcoords
 |      //       Access: Published
 |      //  Description: Returns a list of all texture coordinate sets used by
 |      //               any geometry at this node level and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texcoords
 |      //       Access: Published
 |      //  Description: Returns a list of all texture coordinate sets used by
 |      //               any geometry at this node level and below that match
 |      //               the indicated name (which may contain wildcard
 |      //               characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findAllTextureStages(...)
 |      C++ Interface:
 |      find_all_texture_stages(const NodePath this)
 |      find_all_texture_stages(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texture_stages
 |      //       Access: Published
 |      //  Description: Returns a list of a TextureStages applied to geometry
 |      //               at this node and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texture_stages
 |      //       Access: Published
 |      //  Description: Returns a list of a TextureStages applied to geometry
 |      //               at this node and below that match the indicated name
 |      //               (which may contain wildcard characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findAllTextures(...)
 |      C++ Interface:
 |      find_all_textures(const NodePath this)
 |      find_all_textures(const NodePath this, non-const TextureStage stage)
 |      find_all_textures(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_textures
 |      //       Access: Published
 |      //  Description: Returns a list of a textures applied to geometry at
 |      //               this node and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_textures
 |      //       Access: Published
 |      //  Description: Returns a list of a textures applied to geometry at
 |      //               this node and below that match the indicated name
 |      //               (which may contain wildcard characters).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_textures
 |      //       Access: Published
 |      //  Description: Returns a list of a textures on geometry at
 |      //               this node and below that are assigned to the
 |      //               indicated texture stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findAllVertexColumns(...)
 |      C++ Interface:
 |      find_all_vertex_columns(const NodePath this)
 |      find_all_vertex_columns(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_vertex_columns
 |      //       Access: Published
 |      //  Description: Returns a list of all vertex array columns stored on
 |      //               some geometry found at this node level and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_vertex_columns
 |      //       Access: Published
 |      //  Description: Returns a list of all vertex array columns stored on
 |      //               some geometry found at this node level and below that
 |      //               match the indicated name (which may contain wildcard
 |      //               characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findMaterial(...)
 |      C++ Interface:
 |      find_material(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_material
 |      //       Access: Published
 |      //  Description: Returns the first material found applied to geometry
 |      //               at this node or below that matches the indicated name
 |      //               (which may contain wildcards).  Returns the material
 |      //               if it is found, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findNetPythonTag(...)
 |      C++ Interface:
 |      find_net_python_tag(const NodePath this, string key)
 |  
 |  findNetTag(...)
 |      C++ Interface:
 |      find_net_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_net_tag
 |      //       Access: Published
 |      //  Description: Returns the lowest ancestor of this node that
 |      //               contains a tag definition with the indicated key, if
 |      //               any, or an empty NodePath if no ancestor of this node
 |      //               contains this tag definition.  See set_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findPathTo(...)
 |      C++ Interface:
 |      find_path_to(const NodePath this, non-const PandaNode node)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_path_to
 |      //       Access: Published
 |      //  Description: Searches for the indicated node below this node and
 |      //               returns the shortest NodePath that connects them.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findTexture(...)
 |      C++ Interface:
 |      find_texture(const NodePath this, non-const TextureStage stage)
 |      find_texture(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_texture
 |      //       Access: Published
 |      //  Description: Returns the first texture found applied to geometry
 |      //               at this node or below that matches the indicated name
 |      //               (which may contain wildcards).  Returns the texture
 |      //               if it is found, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_texture
 |      //       Access: Published
 |      //  Description: Returns the first texture found applied to geometry
 |      //               at this node or below that is assigned to the
 |      //               indicated texture stage.  Returns the texture if it
 |      //               is found, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  findTextureStage(...)
 |      C++ Interface:
 |      find_texture_stage(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_texture_stage
 |      //       Access: Published
 |      //  Description: Returns the first TextureStage found applied to
 |      //               geometry at this node or below that matches the
 |      //               indicated name (which may contain wildcards).
 |      //               Returns the TextureStage if it is found, or NULL if
 |      //               it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_all_matches(...)
 |      C++ Interface:
 |      find_all_matches(const NodePath this, string path)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_matches
 |      //       Access: Published
 |      //  Description: Returns the complete set of all NodePaths that begin
 |      //               with this NodePath and can be extended by
 |      //               path.  The shortest paths will be listed
 |      //               first.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_all_materials(...)
 |      C++ Interface:
 |      find_all_materials(const NodePath this)
 |      find_all_materials(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_materials
 |      //       Access: Published
 |      //  Description: Returns a list of a materials applied to geometry at
 |      //               this node and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_materials
 |      //       Access: Published
 |      //  Description: Returns a list of a materials applied to geometry at
 |      //               this node and below that match the indicated name
 |      //               (which may contain wildcard characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_all_paths_to(...)
 |      C++ Interface:
 |      find_all_paths_to(const NodePath this, non-const PandaNode node)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_paths_to
 |      //       Access: Published
 |      //  Description: Returns the set of all NodePaths that extend from
 |      //               this NodePath down to the indicated node.  The
 |      //               shortest paths will be listed first.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_all_texcoords(...)
 |      C++ Interface:
 |      find_all_texcoords(const NodePath this)
 |      find_all_texcoords(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texcoords
 |      //       Access: Published
 |      //  Description: Returns a list of all texture coordinate sets used by
 |      //               any geometry at this node level and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texcoords
 |      //       Access: Published
 |      //  Description: Returns a list of all texture coordinate sets used by
 |      //               any geometry at this node level and below that match
 |      //               the indicated name (which may contain wildcard
 |      //               characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_all_texture_stages(...)
 |      C++ Interface:
 |      find_all_texture_stages(const NodePath this)
 |      find_all_texture_stages(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texture_stages
 |      //       Access: Published
 |      //  Description: Returns a list of a TextureStages applied to geometry
 |      //               at this node and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_texture_stages
 |      //       Access: Published
 |      //  Description: Returns a list of a TextureStages applied to geometry
 |      //               at this node and below that match the indicated name
 |      //               (which may contain wildcard characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_all_textures(...)
 |      C++ Interface:
 |      find_all_textures(const NodePath this)
 |      find_all_textures(const NodePath this, non-const TextureStage stage)
 |      find_all_textures(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_textures
 |      //       Access: Published
 |      //  Description: Returns a list of a textures applied to geometry at
 |      //               this node and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_textures
 |      //       Access: Published
 |      //  Description: Returns a list of a textures applied to geometry at
 |      //               this node and below that match the indicated name
 |      //               (which may contain wildcard characters).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_textures
 |      //       Access: Published
 |      //  Description: Returns a list of a textures on geometry at
 |      //               this node and below that are assigned to the
 |      //               indicated texture stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_all_vertex_columns(...)
 |      C++ Interface:
 |      find_all_vertex_columns(const NodePath this)
 |      find_all_vertex_columns(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_vertex_columns
 |      //       Access: Published
 |      //  Description: Returns a list of all vertex array columns stored on
 |      //               some geometry found at this node level and below.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_all_vertex_columns
 |      //       Access: Published
 |      //  Description: Returns a list of all vertex array columns stored on
 |      //               some geometry found at this node level and below that
 |      //               match the indicated name (which may contain wildcard
 |      //               characters).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_material(...)
 |      C++ Interface:
 |      find_material(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_material
 |      //       Access: Published
 |      //  Description: Returns the first material found applied to geometry
 |      //               at this node or below that matches the indicated name
 |      //               (which may contain wildcards).  Returns the material
 |      //               if it is found, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_net_python_tag(...)
 |      C++ Interface:
 |      find_net_python_tag(const NodePath this, string key)
 |  
 |  find_net_tag(...)
 |      C++ Interface:
 |      find_net_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_net_tag
 |      //       Access: Published
 |      //  Description: Returns the lowest ancestor of this node that
 |      //               contains a tag definition with the indicated key, if
 |      //               any, or an empty NodePath if no ancestor of this node
 |      //               contains this tag definition.  See set_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_path_to(...)
 |      C++ Interface:
 |      find_path_to(const NodePath this, non-const PandaNode node)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_path_to
 |      //       Access: Published
 |      //  Description: Searches for the indicated node below this node and
 |      //               returns the shortest NodePath that connects them.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_texture(...)
 |      C++ Interface:
 |      find_texture(const NodePath this, non-const TextureStage stage)
 |      find_texture(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_texture
 |      //       Access: Published
 |      //  Description: Returns the first texture found applied to geometry
 |      //               at this node or below that matches the indicated name
 |      //               (which may contain wildcards).  Returns the texture
 |      //               if it is found, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_texture
 |      //       Access: Published
 |      //  Description: Returns the first texture found applied to geometry
 |      //               at this node or below that is assigned to the
 |      //               indicated texture stage.  Returns the texture if it
 |      //               is found, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  find_texture_stage(...)
 |      C++ Interface:
 |      find_texture_stage(const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::find_texture_stage
 |      //       Access: Published
 |      //  Description: Returns the first TextureStage found applied to
 |      //               geometry at this node or below that matches the
 |      //               indicated name (which may contain wildcards).
 |      //               Returns the TextureStage if it is found, or NULL if
 |      //               it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  flattenLight(...)
 |      C++ Interface:
 |      flatten_light(non-const NodePath this)
 |      
 |      //  void analyze() const;
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::flatten_light
 |      //       Access: Published
 |      //  Description: Lightly flattens out the hierarchy below this node by
 |      //               applying transforms, colors, and texture matrices
 |      //               from the nodes onto the vertices, but does not remove
 |      //               any nodes.
 |      //
 |      //               This can result in improved rendering performance
 |      //               because there will be fewer transforms in the
 |      //               resulting scene graph, but the number of nodes will
 |      //               remain the same.
 |      //
 |      //               In particular, any NodePaths that reference nodes
 |      //               within this hierarchy will not be damaged.  However,
 |      //               since this operation will remove transforms from the
 |      //               scene graph, it may be dangerous to apply to nodes
 |      //               where you expect to dynamically modify the transform,
 |      //               or where you expect the geometry to remain in a
 |      //               particular local coordinate system.
 |      //
 |      //               The return value is always 0, since flatten_light
 |      //               does not remove any nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  flattenMedium(...)
 |      C++ Interface:
 |      flatten_medium(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::flatten_medium
 |      //       Access: Published
 |      //  Description: A more thorough flattening than flatten_light(), this
 |      //               first applies all the transforms, colors, and texture
 |      //               matrices from the nodes onto the vertices, and then
 |      //               removes unneeded grouping nodes--nodes that have
 |      //               exactly one child, for instance, but have no special
 |      //               properties in themselves.
 |      //
 |      //               This results in improved performance over
 |      //               flatten_light() because the number of nodes in the
 |      //               scene graph is reduced.
 |      //
 |      //               The return value is the number of nodes removed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  flattenMultitex(self, stateFrom=None, target=None, useGeom=0, allowTexMat=0, win=None)
 |      #####################################################################
 |  
 |  flattenStrong(...)
 |      C++ Interface:
 |      flatten_strong(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::flatten_strong
 |      //       Access: Published
 |      //  Description: The strongest possible flattening.  This first
 |      //               applies all of the transforms to the vertices, as in
 |      //               flatten_medium(), but then it will combine sibling
 |      //               nodes together when possible, in addition to removing
 |      //               unnecessary parent-child nodes.  This can result in
 |      //               substantially fewer nodes, but any nicely-grouped
 |      //               hierachical bounding volumes may be lost.
 |      //
 |      //               It is generally a good idea to apply this kind of
 |      //               flattening only to nodes that will be culled largely
 |      //               as a single unit, like a car.  Applying this to an
 |      //               entire scene may result in overall poorer performance
 |      //               because of less-effective culling.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  flatten_light(...)
 |      C++ Interface:
 |      flatten_light(non-const NodePath this)
 |      
 |      //  void analyze() const;
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::flatten_light
 |      //       Access: Published
 |      //  Description: Lightly flattens out the hierarchy below this node by
 |      //               applying transforms, colors, and texture matrices
 |      //               from the nodes onto the vertices, but does not remove
 |      //               any nodes.
 |      //
 |      //               This can result in improved rendering performance
 |      //               because there will be fewer transforms in the
 |      //               resulting scene graph, but the number of nodes will
 |      //               remain the same.
 |      //
 |      //               In particular, any NodePaths that reference nodes
 |      //               within this hierarchy will not be damaged.  However,
 |      //               since this operation will remove transforms from the
 |      //               scene graph, it may be dangerous to apply to nodes
 |      //               where you expect to dynamically modify the transform,
 |      //               or where you expect the geometry to remain in a
 |      //               particular local coordinate system.
 |      //
 |      //               The return value is always 0, since flatten_light
 |      //               does not remove any nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  flatten_medium(...)
 |      C++ Interface:
 |      flatten_medium(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::flatten_medium
 |      //       Access: Published
 |      //  Description: A more thorough flattening than flatten_light(), this
 |      //               first applies all the transforms, colors, and texture
 |      //               matrices from the nodes onto the vertices, and then
 |      //               removes unneeded grouping nodes--nodes that have
 |      //               exactly one child, for instance, but have no special
 |      //               properties in themselves.
 |      //
 |      //               This results in improved performance over
 |      //               flatten_light() because the number of nodes in the
 |      //               scene graph is reduced.
 |      //
 |      //               The return value is the number of nodes removed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  flatten_strong(...)
 |      C++ Interface:
 |      flatten_strong(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::flatten_strong
 |      //       Access: Published
 |      //  Description: The strongest possible flattening.  This first
 |      //               applies all of the transforms to the vertices, as in
 |      //               flatten_medium(), but then it will combine sibling
 |      //               nodes together when possible, in addition to removing
 |      //               unnecessary parent-child nodes.  This can result in
 |      //               substantially fewer nodes, but any nicely-grouped
 |      //               hierachical bounding volumes may be lost.
 |      //
 |      //               It is generally a good idea to apply this kind of
 |      //               flattening only to nodes that will be culled largely
 |      //               as a single unit, like a car.  Applying this to an
 |      //               entire scene may result in overall poorer performance
 |      //               because of less-effective culling.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  forceRecomputeBounds(...)
 |      C++ Interface:
 |      force_recompute_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::force_recompute_bounds
 |      //       Access: Published
 |      //  Description: Forces the recomputing of all the bounding volumes at
 |      //               every node in the subgraph beginning at this node and
 |      //               below.
 |      //
 |      //               This should not normally need to be called, since the
 |      //               bounding volumes are supposed to be recomputed
 |      //               automatically when necessary.  It may be useful when
 |      //               debugging, to verify that the bounding volumes have
 |      //               not become inadvertently stale; it may also be useful
 |      //               to force animated characters to update their bounding
 |      //               volumes (which does not presently happen
 |      //               automatically).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  force_recompute_bounds(...)
 |      C++ Interface:
 |      force_recompute_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::force_recompute_bounds
 |      //       Access: Published
 |      //  Description: Forces the recomputing of all the bounding volumes at
 |      //               every node in the subgraph beginning at this node and
 |      //               below.
 |      //
 |      //               This should not normally need to be called, since the
 |      //               bounding volumes are supposed to be recomputed
 |      //               automatically when necessary.  It may be useful when
 |      //               debugging, to verify that the bounding volumes have
 |      //               not become inadvertently stale; it may also be useful
 |      //               to force animated characters to update their bounding
 |      //               volumes (which does not presently happen
 |      //               automatically).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getAncestor(...)
 |      C++ Interface:
 |      get_ancestor(const NodePath this, int index)
 |      get_ancestor(const NodePath this, int index, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_ancestor
 |      //       Access: Published
 |      //  Description: Returns the nth ancestor of the path, where 0 is the
 |      //               NodePath itself and get_num_nodes() - 1 is get_top().
 |      //               This requires iterating through the path.
 |      //
 |      //               Also see get_node(), which returns the same thing as
 |      //               a PandaNode pointer, not a NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getAncestors(...)
 |  
 |  getAncestry(self)
 |      Get a list of a node path's ancestors
 |  
 |  getAntialias(...)
 |      C++ Interface:
 |      get_antialias(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_antialias
 |      //       Access: Published
 |      //  Description: Returns the antialias setting that has been
 |      //               specifically set on this node via set_antialias(), or
 |      //               M_none if no setting has been made.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getAttrib(...)
 |      C++ Interface:
 |      get_attrib(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_attrib
 |      //       Access: Published
 |      //  Description: Returns the render attribute of the indicated type,
 |      //               if it is defined on the node, or NULL if it is not.
 |      //               This checks only what is set on this particular node
 |      //               level, and has nothing to do with what render
 |      //               attributes may be inherited from parent nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getAudioVolume(...)
 |      C++ Interface:
 |      get_audio_volume(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_audio_volume
 |      //       Access: Published
 |      //  Description: Returns the complete audio volume that has been
 |      //               applied to this node via a previous call to
 |      //               set_audio_volume(), or 1. (identity) if no volume has
 |      //               been applied to this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getBinDrawOrder(...)
 |      C++ Interface:
 |      get_bin_draw_order(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_bin_draw_order
 |      //       Access: Published
 |      //  Description: Returns the drawing order associated with the bin
 |      //               that this particular node was assigned to via
 |      //               set_bin(), or 0 if no bin was assigned.  See
 |      //               set_bin() and has_bin().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getBinName(...)
 |      C++ Interface:
 |      get_bin_name(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_bin_name
 |      //       Access: Published
 |      //  Description: Returns the name of the bin that this particular node
 |      //               was assigned to via set_bin(), or the empty string if
 |      //               no bin was assigned.  See set_bin() and has_bin().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getBounds(...)
 |      C++ Interface:
 |      get_bounds(const NodePath this)
 |      get_bounds(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_bounds
 |      //       Access: Published
 |      //  Description: Returns a newly-allocated bounding volume containing
 |      //               the bottom node and all of its descendants.  This is
 |      //               the bounding volume on the bottom arc, converted to
 |      //               the local coordinate space of the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getChild(...)
 |      C++ Interface:
 |      get_child(const NodePath this, int n)
 |      get_child(const NodePath this, int n, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_child
 |      //       Access: Published
 |      //  Description: Returns a NodePath representing the nth child of the
 |      //               referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getChildren(...)
 |      C++ Interface:
 |      get_children(const NodePath this)
 |      get_children(const NodePath this, non-const Thread current_thread)
 |      
 |      // Methods that return collections of NodePaths derived from or
 |      // related to this one.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_children
 |      //       Access: Published
 |      //  Description: Returns the set of all child nodes of the referenced
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getChildrenAsList(self)
 |      Converts a node path's child NodePathCollection into a list
 |  
 |  getCollideMask(...)
 |      C++ Interface:
 |      get_collide_mask(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_collide_mask
 |      //       Access: Published
 |      //  Description: Returns the union of all of the into_collide_masks
 |      //               for nodes at this level and below.  This is the same
 |      //               thing as node()->get_net_collide_mask().
 |      //
 |      //               If you want to return what the into_collide_mask of
 |      //               this node itself is, without regard to its children,
 |      //               use node()->get_into_collide_mask().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getColor(...)
 |      C++ Interface:
 |      get_color(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_color
 |      //       Access: Published
 |      //  Description: Returns the color that has been assigned to the node,
 |      //               or black if no color has been assigned.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getColorScale(...)
 |      C++ Interface:
 |      get_color_scale(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_color_scale
 |      //       Access: Published
 |      //  Description: Returns the complete color scale vector that has been
 |      //               applied to this node via a previous call to
 |      //               set_color_scale() and/or set_alpha_scale(), or all
 |      //               1's (identity) if no scale has been applied to this
 |      //               particular node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getCommonAncestor(...)
 |      C++ Interface:
 |      get_common_ancestor(const NodePath this, const NodePath other)
 |      get_common_ancestor(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_common_ancestor
 |      //       Access: Published
 |      //  Description: Returns the lowest NodePath that both of these two
 |      //               NodePaths have in common: the first ancestor that
 |      //               both of them share.  If the two NodePaths are
 |      //               unrelated, returns NodePath::not_found().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getDepthOffset(...)
 |      C++ Interface:
 |      get_depth_offset(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_depth_offset
 |      //       Access: Published
 |      //  Description: Returns the depth offset value if it has been
 |      //               specified using set_depth_offset, or 0 if not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getDepthTest(...)
 |      C++ Interface:
 |      get_depth_test(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_depth_test
 |      //       Access: Published
 |      //  Description: Returns true if depth-test rendering has been
 |      //               specifically set on this node via set_depth_test(), or
 |      //               false if depth-test rendering has been specifically
 |      //               disabled.  If nothing has been specifically set,
 |      //               returns true.  See also has_depth_test().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getDepthWrite(...)
 |      C++ Interface:
 |      get_depth_write(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_depth_write
 |      //       Access: Published
 |      //  Description: Returns true if depth-write rendering has been
 |      //               specifically set on this node via set_depth_write(), or
 |      //               false if depth-write rendering has been specifically
 |      //               disabled.  If nothing has been specifically set,
 |      //               returns true.  See also has_depth_write().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getDistance(...)
 |      C++ Interface:
 |      get_distance(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_distance
 |      //       Access: Published
 |      //  Description: Returns the straight-line distance between this
 |      //               referenced node's coordinate frame's origin, and that
 |      //               of the other node's origin.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getEffect(...)
 |      C++ Interface:
 |      get_effect(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_effect
 |      //       Access: Published
 |      //  Description: Returns the render effect of the indicated type,
 |      //               if it is defined on the node, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getEffects(...)
 |      C++ Interface:
 |      get_effects(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_effects
 |      //       Access: Published
 |      //  Description: Returns the complete RenderEffects that will be
 |      //               applied to this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getErrorType(...)
 |      C++ Interface:
 |      get_error_type(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_error_type
 |      //       Access: Published
 |      //  Description: If is_empty() is true, this returns a code that
 |      //               represents the reason why the NodePath is empty.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getFog(...)
 |      C++ Interface:
 |      get_fog(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_fog
 |      //       Access: Published
 |      //  Description: Returns the fog that has been set on this
 |      //               particular node, or NULL if no fog has been set.
 |      //               This is not necessarily the fog that will be
 |      //               applied to the geometry at or below this level, as
 |      //               another fog at a higher or lower level may
 |      //               override.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getH(...)
 |      C++ Interface:
 |      get_h(const NodePath this)
 |      get_h(const NodePath this, const NodePath other)
 |  
 |  getHiddenAncestor(...)
 |      C++ Interface:
 |      get_hidden_ancestor(const NodePath this)
 |      get_hidden_ancestor(const NodePath this, const BitMask camera_mask)
 |      get_hidden_ancestor(const NodePath this, const BitMask camera_mask, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_hidden_ancestor
 |      //       Access: Published
 |      //  Description: Returns the NodePath at or above the referenced node
 |      //               that is hidden to the indicated camera(s), or an
 |      //               empty NodePath if no ancestor of the referenced node
 |      //               is hidden (and the node should be visible).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getHpr(...)
 |      C++ Interface:
 |      get_hpr(const NodePath this)
 |      get_hpr(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_hpr
 |      //       Access: Published
 |      //  Description: Retrieves the rotation component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_hpr
 |      //       Access: Published
 |      //  Description: Returns the relative orientation of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getInstanceCount(...)
 |      C++ Interface:
 |      get_instance_count(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_instance_count
 |      //       Access: Published
 |      //  Description: Returns the geometry instance count, or 0 if
 |      //               disabled. See set_instance_count.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getKey(...)
 |      C++ Interface:
 |      get_key(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_key
 |      //       Access: Published
 |      //  Description: Returns an integer that is guaranteed to be the same
 |      //               for all NodePaths that represent the same node
 |      //               instance, and different for all NodePaths that
 |      //               represent a different node instance.  
 |      //
 |      //               The same key will be returned for a particular
 |      //               instance as long as at least one NodePath exists that
 |      //               represents that instance; if all NodePaths for a
 |      //               particular instance destruct and a new one is later
 |      //               created, it may have a different index.  However, a
 |      //               given key will never be reused for a different
 |      //               instance (unless the app has been running long enough
 |      //               that we overflow the integer key value).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getMat(...)
 |      C++ Interface:
 |      get_mat(const NodePath this)
 |      get_mat(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_mat
 |      //       Access: Published
 |      //  Description: Returns the transform matrix that has been applied to
 |      //               the referenced node, or the identity matrix if no
 |      //               matrix has been applied.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_mat
 |      //       Access: Published
 |      //  Description: Returns the matrix that describes the coordinate
 |      //               space of the bottom node, relative to the other
 |      //               path's bottom node's coordinate space.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getMaterial(...)
 |      C++ Interface:
 |      get_material(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_material
 |      //       Access: Published
 |      //  Description: Returns the material that has been set on this
 |      //               particular node, or NULL if no material has been set.
 |      //               This is not necessarily the material that will be
 |      //               applied to the geometry at or below this level, as
 |      //               another material at a higher or lower level may
 |      //               override.
 |      //               See also find_material().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNetAudioVolume(...)
 |      C++ Interface:
 |      get_net_audio_volume(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_audio_volume
 |      //       Access: Published
 |      //  Description: Returns the complete audio volume for this node
 |      //               taking highers nodes in the graph into account.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNetPrevTransform(...)
 |      C++ Interface:
 |      get_net_prev_transform(const NodePath this)
 |      get_net_prev_transform(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_prev_transform
 |      //       Access: Published
 |      //  Description: Returns the net "previous" transform on this node
 |      //               from the root.  See set_prev_transform().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNetPythonTag(...)
 |      C++ Interface:
 |      get_net_python_tag(const NodePath this, string key)
 |  
 |  getNetState(...)
 |      C++ Interface:
 |      get_net_state(const NodePath this)
 |      get_net_state(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_state
 |      //       Access: Published
 |      //  Description: Returns the net state on this node from the root.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNetTag(...)
 |      C++ Interface:
 |      get_net_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_tag
 |      //       Access: Published
 |      //  Description: Returns the tag value that has been defined on this
 |      //               node, or the nearest ancestor node, for the indicated
 |      //               key.  If no value has been defined for the indicated
 |      //               key on any ancestor node, returns the empty string.
 |      //               See also get_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNetTransform(...)
 |      C++ Interface:
 |      get_net_transform(const NodePath this)
 |      get_net_transform(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_transform
 |      //       Access: Published
 |      //  Description: Returns the net transform on this node from the root.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNode(...)
 |      C++ Interface:
 |      get_node(const NodePath this, int index)
 |      get_node(const NodePath this, int index, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_node
 |      //       Access: Published
 |      //  Description: Returns the nth node of the path, where 0 is the
 |      //               referenced (bottom) node and get_num_nodes() - 1 is
 |      //               the top node.  This requires iterating through the
 |      //               path.
 |      //
 |      //               Also see node(), which is a convenience function to
 |      //               return the same thing as get_node(0) (since the
 |      //               bottom node is the most important node in the
 |      //               NodePath, and is the one most frequently referenced).
 |      //
 |      //               Note that this function returns the same thing as
 |      //               get_ancestor(index).node().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNodes(...)
 |  
 |  getNumChildren(...)
 |      C++ Interface:
 |      get_num_children(const NodePath this)
 |      get_num_children(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_num_children
 |      //       Access: Published
 |      //  Description: Returns the number of children of the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getNumDescendants(self)
 |      #####################################################################
 |  
 |  getNumNodes(...)
 |      C++ Interface:
 |      get_num_nodes(const NodePath this)
 |      get_num_nodes(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_num_nodes
 |      //       Access: Published
 |      //  Description: Returns the number of nodes in the path.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getP(...)
 |      C++ Interface:
 |      get_p(const NodePath this)
 |      get_p(const NodePath this, const NodePath other)
 |  
 |  getParent(...)
 |      C++ Interface:
 |      get_parent(const NodePath this)
 |      get_parent(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_parent
 |      //       Access: Published
 |      //  Description: Returns the NodePath to the parent of the referenced
 |      //               node: that is, this NodePath, shortened by one node.
 |      //               The parent of a singleton NodePath is defined to be
 |      //               the empty NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getPos(...)
 |      C++ Interface:
 |      get_pos(const NodePath this)
 |      get_pos(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos
 |      //       Access: Published
 |      //  Description: Retrieves the translation component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos
 |      //       Access: Published
 |      //  Description: Returns the relative position of the referenced node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getPosDelta(...)
 |      C++ Interface:
 |      get_pos_delta(const NodePath this)
 |      get_pos_delta(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos_delta
 |      //       Access: Published
 |      //  Description: Returns the delta vector from this node's position in
 |      //               the previous frame (according to
 |      //               set_prev_transform(), typically set via the use of
 |      //               set_fluid_pos()) and its position in the current
 |      //               frame.  This is the vector used to determine
 |      //               collisions.  Generally, if the node was last
 |      //               repositioned via set_pos(), the delta will be zero;
 |      //               if it was adjusted via set_fluid_pos(), the delta
 |      //               will represent the change from the previous frame's
 |      //               position.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos_delta
 |      //       Access: Published
 |      //  Description: Returns the delta vector from this node's position in
 |      //               the previous frame (according to
 |      //               set_prev_transform(), typically set via the use of
 |      //               set_fluid_pos()) and its position in the current
 |      //               frame, as seen in the indicated node's coordinate
 |      //               space.  This is the vector used to determine
 |      //               collisions.  Generally, if the node was last
 |      //               repositioned via set_pos(), the delta will be zero;
 |      //               if it was adjusted via set_fluid_pos(), the delta
 |      //               will represent the change from the previous frame's
 |      //               position.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getPrevTransform(...)
 |      C++ Interface:
 |      get_prev_transform(const NodePath this)
 |      get_prev_transform(const NodePath this, const NodePath other)
 |      get_prev_transform(const NodePath this, non-const Thread current_thread)
 |      get_prev_transform(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_prev_transform
 |      //       Access: Published
 |      //  Description: Returns the transform that has been set as this
 |      //               node's "previous" position.  See
 |      //               set_prev_transform().
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_prev_transform
 |      //       Access: Published
 |      //  Description: Returns the relative "previous" transform to this
 |      //               node from the other node; i.e. the position of this
 |      //               node in the previous frame, as seen by the other node
 |      //               in the previous frame.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getPythonTag(...)
 |      C++ Interface:
 |      get_python_tag(const NodePath this, string key)
 |  
 |  getPythonTagKeys(...)
 |      C++ Interface:
 |      get_python_tag_keys(const NodePath this)
 |  
 |  getQuat(...)
 |      C++ Interface:
 |      get_quat(const NodePath this)
 |      get_quat(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_quat
 |      //       Access: Published
 |      //  Description: Retrieves the rotation component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_quat
 |      //       Access: Published
 |      //  Description: Returns the relative orientation of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getR(...)
 |      C++ Interface:
 |      get_r(const NodePath this)
 |      get_r(const NodePath this, const NodePath other)
 |  
 |  getRelativePoint(...)
 |      C++ Interface:
 |      get_relative_point(const NodePath this, const NodePath other, const LVecBase3f point)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_relative_point
 |      //       Access: Published
 |      //  Description: Given that the indicated point is in the coordinate
 |      //               system of the other node, returns the same point in
 |      //               this node's coordinate system.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getRelativeVector(...)
 |      C++ Interface:
 |      get_relative_vector(const NodePath this, const NodePath other, const LVecBase3f vec)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_relative_vector
 |      //       Access: Published
 |      //  Description: Given that the indicated vector is in the coordinate
 |      //               system of the other node, returns the same vector in
 |      //               this node's coordinate system.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getRenderMode(...)
 |      C++ Interface:
 |      get_render_mode(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_render_mode
 |      //       Access: Published
 |      //  Description: Returns the render mode that has been specifically
 |      //               set on this node via set_render_mode(), or
 |      //               M_unchanged if nothing has been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getRenderModePerspective(...)
 |      C++ Interface:
 |      get_render_mode_perspective(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_render_mode_perspective
 |      //       Access: Published
 |      //  Description: Returns the flag that has been set on this node via
 |      //               set_render_mode_perspective(), or false if no flag
 |      //               has been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getRenderModeThickness(...)
 |      C++ Interface:
 |      get_render_mode_thickness(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_render_mode_thickness
 |      //       Access: Published
 |      //  Description: Returns the render mode thickness that has been
 |      //               specifically set on this node via set_render_mode(),
 |      //               or 1.0 if nothing has been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getSa(...)
 |      C++ Interface:
 |      get_sa(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sa
 |      //       Access: Published
 |      //  Description: Gets the alpha scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getSb(...)
 |      C++ Interface:
 |      get_sb(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sb
 |      //       Access: Published
 |      //  Description: Gets the blue scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getScale(...)
 |      C++ Interface:
 |      get_scale(const NodePath this)
 |      get_scale(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_scale
 |      //       Access: Published
 |      //  Description: Retrieves the scale component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_scale
 |      //       Access: Published
 |      //  Description: Returns the relative scale of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getSg(...)
 |      C++ Interface:
 |      get_sg(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sg
 |      //       Access: Published
 |      //  Description: Gets the green scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getShader(...)
 |      C++ Interface:
 |      get_shader(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shader
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getShaderInput(...)
 |      C++ Interface:
 |      get_shader_input(const NodePath this, const InternalName id)
 |      get_shader_input(const NodePath this, string id)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getShear(...)
 |      C++ Interface:
 |      get_shear(const NodePath this)
 |      get_shear(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shear
 |      //       Access: Published
 |      //  Description: Retrieves the shear component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shear
 |      //       Access: Published
 |      //  Description: Returns the relative shear of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getShxy(...)
 |      C++ Interface:
 |      get_shxy(const NodePath this)
 |      get_shxy(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shear
 |      //       Access: Published
 |      //  Description: Returns the relative shear of the referenced node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getShxz(...)
 |      C++ Interface:
 |      get_shxz(const NodePath this)
 |      get_shxz(const NodePath this, const NodePath other)
 |  
 |  getShyz(...)
 |      C++ Interface:
 |      get_shyz(const NodePath this)
 |      get_shyz(const NodePath this, const NodePath other)
 |  
 |  getSort(...)
 |      C++ Interface:
 |      get_sort(const NodePath this)
 |      get_sort(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sort
 |      //       Access: Published
 |      //  Description: Returns the sort value of the referenced node within
 |      //               its parent; that is, the sort number passed on the
 |      //               last reparenting operation for this node.  This will
 |      //               control the position of the node within its parent's
 |      //               list of children.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getSr(...)
 |      C++ Interface:
 |      get_sr(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sr
 |      //       Access: Published
 |      //  Description: Gets the red scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getStashedAncestor(...)
 |      C++ Interface:
 |      get_stashed_ancestor(const NodePath this)
 |      get_stashed_ancestor(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_stashed_ancestor
 |      //       Access: Published
 |      //  Description: Returns the NodePath at or above the referenced node
 |      //               that is stashed, or an empty NodePath if no ancestor
 |      //               of the referenced node is stashed (and the node should
 |      //               be visible).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getStashedChildren(...)
 |      C++ Interface:
 |      get_stashed_children(const NodePath this)
 |      get_stashed_children(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_stashed_children
 |      //       Access: Published
 |      //  Description: Returns the set of all child nodes of the referenced
 |      //               node that have been stashed.  These children are not
 |      //               normally visible on the node, and do not appear in
 |      //               the list returned by get_children().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getState(...)
 |      C++ Interface:
 |      get_state(const NodePath this)
 |      get_state(const NodePath this, const NodePath other)
 |      get_state(const NodePath this, non-const Thread current_thread)
 |      get_state(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      // Aggregate transform and state information.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_state
 |      //       Access: Published
 |      //  Description: Returns the complete state object set on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_state
 |      //       Access: Published
 |      //  Description: Returns the state changes that must be made to
 |      //               transition to the render state of this node from the
 |      //               render state of the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getSx(...)
 |      C++ Interface:
 |      get_sx(const NodePath this)
 |      get_sx(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_scale
 |      //       Access: Published
 |      //  Description: Returns the relative scale of the referenced node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getSy(...)
 |      C++ Interface:
 |      get_sy(const NodePath this)
 |      get_sy(const NodePath this, const NodePath other)
 |  
 |  getSz(...)
 |      C++ Interface:
 |      get_sz(const NodePath this)
 |      get_sz(const NodePath this, const NodePath other)
 |  
 |  getTag(...)
 |      C++ Interface:
 |      get_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tag
 |      //       Access: Published
 |      //  Description: Retrieves the user-defined value that was previously
 |      //               set on this node for the particular key, if any.  If
 |      //               no value has been previously set, returns the empty
 |      //               string.  See also get_net_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTagKeys(...)
 |      C++ Interface:
 |      get_tag_keys(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tag_keys
 |      //       Access: Published
 |      //  Description: Fills the given vector up with the
 |      //               list of tags on this PandaNode.
 |      //
 |      //               It is the user's responsibility to ensure that the
 |      //               keys vector is empty before making this call;
 |      //               otherwise, the new files will be appended to it.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexGen(...)
 |      C++ Interface:
 |      get_tex_gen(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_gen
 |      //       Access: Published
 |      //  Description: Returns the texture coordinate generation mode for
 |      //               the given stage, or M_off if there is no explicit
 |      //               mode set for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexGenLight(...)
 |      C++ Interface:
 |      get_tex_gen_light(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_gen_light
 |      //       Access: Published
 |      //  Description: Returns the particular Light set for the indicated
 |      //               texgen mode's texture stage, or empty NodePath if no
 |      //               light is set.  This is only meaningful if the texgen
 |      //               mode (returned by get_tex_gen()) is M_light_vector.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexHpr(...)
 |      C++ Interface:
 |      get_tex_hpr(const NodePath this, non-const TextureStage stage)
 |      get_tex_hpr(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_hpr
 |      //       Access: Published
 |      //  Description: Returns the 3-D HPR set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_hpr
 |      //       Access: Published
 |      //  Description: Returns the 3-D HPR set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexOffset(...)
 |      C++ Interface:
 |      get_tex_offset(const NodePath this, non-const TextureStage stage)
 |      get_tex_offset(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_offset
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_offset
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexPos(...)
 |      C++ Interface:
 |      get_tex_pos(const NodePath this, non-const TextureStage stage)
 |      get_tex_pos(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_pos
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_pos
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexProjectorFrom(...)
 |      C++ Interface:
 |      get_tex_projector_from(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_projector_from
 |      //       Access: Published
 |      //  Description: Returns the "from" node associated with the
 |      //               TexProjectorEffect on the indicated stage.  The
 |      //               relative transform between the "from" and the "to"
 |      //               nodes is automatically applied to the texture
 |      //               transform each frame.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexProjectorTo(...)
 |      C++ Interface:
 |      get_tex_projector_to(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_projector_to
 |      //       Access: Published
 |      //  Description: Returns the "to" node associated with the
 |      //               TexProjectorEffect on the indicated stage.  The
 |      //               relative transform between the "from" and the "to"
 |      //               nodes is automatically applied to the texture
 |      //               transform each frame.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexRotate(...)
 |      C++ Interface:
 |      get_tex_rotate(const NodePath this, non-const TextureStage stage)
 |      get_tex_rotate(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_rotate
 |      //       Access: Published
 |      //  Description: Returns the rotation set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_rotate
 |      //       Access: Published
 |      //  Description: Returns the rotation set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexScale(...)
 |      C++ Interface:
 |      get_tex_scale(const NodePath this, non-const TextureStage stage)
 |      get_tex_scale(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexScale3d(...)
 |      C++ Interface:
 |      get_tex_scale_3d(const NodePath this, non-const TextureStage stage)
 |      get_tex_scale_3d(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale_3d
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale_3d
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexTransform(...)
 |      C++ Interface:
 |      get_tex_transform(const NodePath this, non-const TextureStage stage)
 |      get_tex_transform(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_transform
 |      //       Access: Published
 |      //  Description: Returns the texture matrix on the current node for the
 |      //               given stage, or identity transform if there is no
 |      //               explicit transform set for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_transform
 |      //       Access: Published
 |      //  Description: Returns the texture matrix on the current node for the
 |      //               given stage, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTexture(...)
 |      C++ Interface:
 |      get_texture(const NodePath this)
 |      get_texture(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_texture
 |      //       Access: Published
 |      //  Description: Returns the base-level texture that has been set on
 |      //               this particular node, or NULL if no texture has been
 |      //               set.  This is not necessarily the texture that will
 |      //               be applied to the geometry at or below this level, as
 |      //               another texture at a higher or lower level may
 |      //               override.
 |      //
 |      //               See also find_texture().
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_texture
 |      //       Access: Published
 |      //  Description: Returns the texture that has been set on the
 |      //               indicated stage for this particular node, or NULL if
 |      //               no texture has been set for this stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTightBounds(...)
 |      C++ Interface:
 |      get_tight_bounds(const NodePath this)
 |  
 |  getTop(...)
 |      C++ Interface:
 |      get_top(const NodePath this)
 |      get_top(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_top
 |      //       Access: Published
 |      //  Description: Returns a singleton NodePath that represents the top
 |      //               of the path, or empty NodePath if this path is empty.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTopNode(...)
 |      C++ Interface:
 |      get_top_node(const NodePath this)
 |      get_top_node(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_top_node
 |      //       Access: Published
 |      //  Description: Returns the top node of the path, or NULL if the path
 |      //               is empty.  This requires iterating through the path.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTransform(...)
 |      C++ Interface:
 |      get_transform(const NodePath this)
 |      get_transform(const NodePath this, const NodePath other)
 |      get_transform(const NodePath this, non-const Thread current_thread)
 |      get_transform(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_transform
 |      //       Access: Published
 |      //  Description: Returns the complete transform object set on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_transform
 |      //       Access: Published
 |      //  Description: Returns the relative transform to this node from the
 |      //               other node; i.e. the transformation of this node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTransparency(...)
 |      C++ Interface:
 |      get_transparency(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_transparency
 |      //       Access: Published
 |      //  Description: Returns the transparent rendering that has been
 |      //               specifically set on this node via set_transparency(), or
 |      //               M_none if nontransparent rendering has been specifically
 |      //               set, or if nothing has been specifically set.  See
 |      //               also has_transparency().  This does not necessarily
 |      //               imply that the geometry will or will not be rendered
 |      //               transparent, as there may be other nodes that override.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getTwoSided(...)
 |      C++ Interface:
 |      get_two_sided(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_two_sided
 |      //       Access: Published
 |      //  Description: Returns true if two-sided rendering has been
 |      //               specifically set on this node via set_two_sided(), or
 |      //               false if one-sided rendering has been specifically
 |      //               set, or if nothing has been specifically set.  See
 |      //               also has_two_sided().  This does not necessarily
 |      //               imply that the geometry will or will not be rendered
 |      //               two-sided, as there may be other nodes that override.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getX(...)
 |      C++ Interface:
 |      get_x(const NodePath this)
 |      get_x(const NodePath this, const NodePath other)
 |  
 |  getY(...)
 |      C++ Interface:
 |      get_y(const NodePath this)
 |      get_y(const NodePath this, const NodePath other)
 |  
 |  getZ(...)
 |      C++ Interface:
 |      get_z(const NodePath this)
 |      get_z(const NodePath this, const NodePath other)
 |  
 |  get_ancestor(...)
 |      C++ Interface:
 |      get_ancestor(const NodePath this, int index)
 |      get_ancestor(const NodePath this, int index, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_ancestor
 |      //       Access: Published
 |      //  Description: Returns the nth ancestor of the path, where 0 is the
 |      //               NodePath itself and get_num_nodes() - 1 is get_top().
 |      //               This requires iterating through the path.
 |      //
 |      //               Also see get_node(), which returns the same thing as
 |      //               a PandaNode pointer, not a NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_ancestors(...)
 |  
 |  get_antialias(...)
 |      C++ Interface:
 |      get_antialias(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_antialias
 |      //       Access: Published
 |      //  Description: Returns the antialias setting that has been
 |      //               specifically set on this node via set_antialias(), or
 |      //               M_none if no setting has been made.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_attrib(...)
 |      C++ Interface:
 |      get_attrib(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_attrib
 |      //       Access: Published
 |      //  Description: Returns the render attribute of the indicated type,
 |      //               if it is defined on the node, or NULL if it is not.
 |      //               This checks only what is set on this particular node
 |      //               level, and has nothing to do with what render
 |      //               attributes may be inherited from parent nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_audio_volume(...)
 |      C++ Interface:
 |      get_audio_volume(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_audio_volume
 |      //       Access: Published
 |      //  Description: Returns the complete audio volume that has been
 |      //               applied to this node via a previous call to
 |      //               set_audio_volume(), or 1. (identity) if no volume has
 |      //               been applied to this particular node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_bin_draw_order(...)
 |      C++ Interface:
 |      get_bin_draw_order(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_bin_draw_order
 |      //       Access: Published
 |      //  Description: Returns the drawing order associated with the bin
 |      //               that this particular node was assigned to via
 |      //               set_bin(), or 0 if no bin was assigned.  See
 |      //               set_bin() and has_bin().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_bin_name(...)
 |      C++ Interface:
 |      get_bin_name(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_bin_name
 |      //       Access: Published
 |      //  Description: Returns the name of the bin that this particular node
 |      //               was assigned to via set_bin(), or the empty string if
 |      //               no bin was assigned.  See set_bin() and has_bin().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_bounds(...)
 |      C++ Interface:
 |      get_bounds(const NodePath this)
 |      get_bounds(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_bounds
 |      //       Access: Published
 |      //  Description: Returns a newly-allocated bounding volume containing
 |      //               the bottom node and all of its descendants.  This is
 |      //               the bounding volume on the bottom arc, converted to
 |      //               the local coordinate space of the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_child(...)
 |      C++ Interface:
 |      get_child(const NodePath this, int n)
 |      get_child(const NodePath this, int n, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_child
 |      //       Access: Published
 |      //  Description: Returns a NodePath representing the nth child of the
 |      //               referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_children(...)
 |      C++ Interface:
 |      get_children(const NodePath this)
 |      get_children(const NodePath this, non-const Thread current_thread)
 |      
 |      // Methods that return collections of NodePaths derived from or
 |      // related to this one.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_children
 |      //       Access: Published
 |      //  Description: Returns the set of all child nodes of the referenced
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_collide_mask(...)
 |      C++ Interface:
 |      get_collide_mask(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_collide_mask
 |      //       Access: Published
 |      //  Description: Returns the union of all of the into_collide_masks
 |      //               for nodes at this level and below.  This is the same
 |      //               thing as node()->get_net_collide_mask().
 |      //
 |      //               If you want to return what the into_collide_mask of
 |      //               this node itself is, without regard to its children,
 |      //               use node()->get_into_collide_mask().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_color(...)
 |      C++ Interface:
 |      get_color(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_color
 |      //       Access: Published
 |      //  Description: Returns the color that has been assigned to the node,
 |      //               or black if no color has been assigned.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_color_scale(...)
 |      C++ Interface:
 |      get_color_scale(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_color_scale
 |      //       Access: Published
 |      //  Description: Returns the complete color scale vector that has been
 |      //               applied to this node via a previous call to
 |      //               set_color_scale() and/or set_alpha_scale(), or all
 |      //               1's (identity) if no scale has been applied to this
 |      //               particular node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_common_ancestor(...)
 |      C++ Interface:
 |      get_common_ancestor(const NodePath this, const NodePath other)
 |      get_common_ancestor(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_common_ancestor
 |      //       Access: Published
 |      //  Description: Returns the lowest NodePath that both of these two
 |      //               NodePaths have in common: the first ancestor that
 |      //               both of them share.  If the two NodePaths are
 |      //               unrelated, returns NodePath::not_found().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_depth_offset(...)
 |      C++ Interface:
 |      get_depth_offset(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_depth_offset
 |      //       Access: Published
 |      //  Description: Returns the depth offset value if it has been
 |      //               specified using set_depth_offset, or 0 if not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_depth_test(...)
 |      C++ Interface:
 |      get_depth_test(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_depth_test
 |      //       Access: Published
 |      //  Description: Returns true if depth-test rendering has been
 |      //               specifically set on this node via set_depth_test(), or
 |      //               false if depth-test rendering has been specifically
 |      //               disabled.  If nothing has been specifically set,
 |      //               returns true.  See also has_depth_test().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_depth_write(...)
 |      C++ Interface:
 |      get_depth_write(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_depth_write
 |      //       Access: Published
 |      //  Description: Returns true if depth-write rendering has been
 |      //               specifically set on this node via set_depth_write(), or
 |      //               false if depth-write rendering has been specifically
 |      //               disabled.  If nothing has been specifically set,
 |      //               returns true.  See also has_depth_write().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_distance(...)
 |      C++ Interface:
 |      get_distance(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_distance
 |      //       Access: Published
 |      //  Description: Returns the straight-line distance between this
 |      //               referenced node's coordinate frame's origin, and that
 |      //               of the other node's origin.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_effect(...)
 |      C++ Interface:
 |      get_effect(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_effect
 |      //       Access: Published
 |      //  Description: Returns the render effect of the indicated type,
 |      //               if it is defined on the node, or NULL if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_effects(...)
 |      C++ Interface:
 |      get_effects(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_effects
 |      //       Access: Published
 |      //  Description: Returns the complete RenderEffects that will be
 |      //               applied to this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_error_type(...)
 |      C++ Interface:
 |      get_error_type(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_error_type
 |      //       Access: Published
 |      //  Description: If is_empty() is true, this returns a code that
 |      //               represents the reason why the NodePath is empty.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_fog(...)
 |      C++ Interface:
 |      get_fog(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_fog
 |      //       Access: Published
 |      //  Description: Returns the fog that has been set on this
 |      //               particular node, or NULL if no fog has been set.
 |      //               This is not necessarily the fog that will be
 |      //               applied to the geometry at or below this level, as
 |      //               another fog at a higher or lower level may
 |      //               override.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_h(...)
 |      C++ Interface:
 |      get_h(const NodePath this)
 |      get_h(const NodePath this, const NodePath other)
 |  
 |  get_hidden_ancestor(...)
 |      C++ Interface:
 |      get_hidden_ancestor(const NodePath this)
 |      get_hidden_ancestor(const NodePath this, const BitMask camera_mask)
 |      get_hidden_ancestor(const NodePath this, const BitMask camera_mask, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_hidden_ancestor
 |      //       Access: Published
 |      //  Description: Returns the NodePath at or above the referenced node
 |      //               that is hidden to the indicated camera(s), or an
 |      //               empty NodePath if no ancestor of the referenced node
 |      //               is hidden (and the node should be visible).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_hpr(...)
 |      C++ Interface:
 |      get_hpr(const NodePath this)
 |      get_hpr(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_hpr
 |      //       Access: Published
 |      //  Description: Retrieves the rotation component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_hpr
 |      //       Access: Published
 |      //  Description: Returns the relative orientation of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_instance_count(...)
 |      C++ Interface:
 |      get_instance_count(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_instance_count
 |      //       Access: Published
 |      //  Description: Returns the geometry instance count, or 0 if
 |      //               disabled. See set_instance_count.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_key(...)
 |      C++ Interface:
 |      get_key(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_key
 |      //       Access: Published
 |      //  Description: Returns an integer that is guaranteed to be the same
 |      //               for all NodePaths that represent the same node
 |      //               instance, and different for all NodePaths that
 |      //               represent a different node instance.  
 |      //
 |      //               The same key will be returned for a particular
 |      //               instance as long as at least one NodePath exists that
 |      //               represents that instance; if all NodePaths for a
 |      //               particular instance destruct and a new one is later
 |      //               created, it may have a different index.  However, a
 |      //               given key will never be reused for a different
 |      //               instance (unless the app has been running long enough
 |      //               that we overflow the integer key value).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_mat(...)
 |      C++ Interface:
 |      get_mat(const NodePath this)
 |      get_mat(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_mat
 |      //       Access: Published
 |      //  Description: Returns the transform matrix that has been applied to
 |      //               the referenced node, or the identity matrix if no
 |      //               matrix has been applied.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_mat
 |      //       Access: Published
 |      //  Description: Returns the matrix that describes the coordinate
 |      //               space of the bottom node, relative to the other
 |      //               path's bottom node's coordinate space.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_material(...)
 |      C++ Interface:
 |      get_material(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_material
 |      //       Access: Published
 |      //  Description: Returns the material that has been set on this
 |      //               particular node, or NULL if no material has been set.
 |      //               This is not necessarily the material that will be
 |      //               applied to the geometry at or below this level, as
 |      //               another material at a higher or lower level may
 |      //               override.
 |      //               See also find_material().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_name(...)
 |      C++ Interface:
 |      get_name(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_name
 |      //       Access: Published
 |      //  Description: Returns the name of the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_net_audio_volume(...)
 |      C++ Interface:
 |      get_net_audio_volume(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_audio_volume
 |      //       Access: Published
 |      //  Description: Returns the complete audio volume for this node
 |      //               taking highers nodes in the graph into account.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_net_prev_transform(...)
 |      C++ Interface:
 |      get_net_prev_transform(const NodePath this)
 |      get_net_prev_transform(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_prev_transform
 |      //       Access: Published
 |      //  Description: Returns the net "previous" transform on this node
 |      //               from the root.  See set_prev_transform().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_net_python_tag(...)
 |      C++ Interface:
 |      get_net_python_tag(const NodePath this, string key)
 |  
 |  get_net_state(...)
 |      C++ Interface:
 |      get_net_state(const NodePath this)
 |      get_net_state(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_state
 |      //       Access: Published
 |      //  Description: Returns the net state on this node from the root.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_net_tag(...)
 |      C++ Interface:
 |      get_net_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_tag
 |      //       Access: Published
 |      //  Description: Returns the tag value that has been defined on this
 |      //               node, or the nearest ancestor node, for the indicated
 |      //               key.  If no value has been defined for the indicated
 |      //               key on any ancestor node, returns the empty string.
 |      //               See also get_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_net_transform(...)
 |      C++ Interface:
 |      get_net_transform(const NodePath this)
 |      get_net_transform(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_net_transform
 |      //       Access: Published
 |      //  Description: Returns the net transform on this node from the root.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_node(...)
 |      C++ Interface:
 |      get_node(const NodePath this, int index)
 |      get_node(const NodePath this, int index, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_node
 |      //       Access: Published
 |      //  Description: Returns the nth node of the path, where 0 is the
 |      //               referenced (bottom) node and get_num_nodes() - 1 is
 |      //               the top node.  This requires iterating through the
 |      //               path.
 |      //
 |      //               Also see node(), which is a convenience function to
 |      //               return the same thing as get_node(0) (since the
 |      //               bottom node is the most important node in the
 |      //               NodePath, and is the one most frequently referenced).
 |      //
 |      //               Note that this function returns the same thing as
 |      //               get_ancestor(index).node().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_nodes(...)
 |  
 |  get_num_children(...)
 |      C++ Interface:
 |      get_num_children(const NodePath this)
 |      get_num_children(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_num_children
 |      //       Access: Published
 |      //  Description: Returns the number of children of the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_num_nodes(...)
 |      C++ Interface:
 |      get_num_nodes(const NodePath this)
 |      get_num_nodes(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_num_nodes
 |      //       Access: Published
 |      //  Description: Returns the number of nodes in the path.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_p(...)
 |      C++ Interface:
 |      get_p(const NodePath this)
 |      get_p(const NodePath this, const NodePath other)
 |  
 |  get_parent(...)
 |      C++ Interface:
 |      get_parent(const NodePath this)
 |      get_parent(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_parent
 |      //       Access: Published
 |      //  Description: Returns the NodePath to the parent of the referenced
 |      //               node: that is, this NodePath, shortened by one node.
 |      //               The parent of a singleton NodePath is defined to be
 |      //               the empty NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_pos(...)
 |      C++ Interface:
 |      get_pos(const NodePath this)
 |      get_pos(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos
 |      //       Access: Published
 |      //  Description: Retrieves the translation component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos
 |      //       Access: Published
 |      //  Description: Returns the relative position of the referenced node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_pos_delta(...)
 |      C++ Interface:
 |      get_pos_delta(const NodePath this)
 |      get_pos_delta(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos_delta
 |      //       Access: Published
 |      //  Description: Returns the delta vector from this node's position in
 |      //               the previous frame (according to
 |      //               set_prev_transform(), typically set via the use of
 |      //               set_fluid_pos()) and its position in the current
 |      //               frame.  This is the vector used to determine
 |      //               collisions.  Generally, if the node was last
 |      //               repositioned via set_pos(), the delta will be zero;
 |      //               if it was adjusted via set_fluid_pos(), the delta
 |      //               will represent the change from the previous frame's
 |      //               position.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_pos_delta
 |      //       Access: Published
 |      //  Description: Returns the delta vector from this node's position in
 |      //               the previous frame (according to
 |      //               set_prev_transform(), typically set via the use of
 |      //               set_fluid_pos()) and its position in the current
 |      //               frame, as seen in the indicated node's coordinate
 |      //               space.  This is the vector used to determine
 |      //               collisions.  Generally, if the node was last
 |      //               repositioned via set_pos(), the delta will be zero;
 |      //               if it was adjusted via set_fluid_pos(), the delta
 |      //               will represent the change from the previous frame's
 |      //               position.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_prev_transform(...)
 |      C++ Interface:
 |      get_prev_transform(const NodePath this)
 |      get_prev_transform(const NodePath this, const NodePath other)
 |      get_prev_transform(const NodePath this, non-const Thread current_thread)
 |      get_prev_transform(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_prev_transform
 |      //       Access: Published
 |      //  Description: Returns the transform that has been set as this
 |      //               node's "previous" position.  See
 |      //               set_prev_transform().
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_prev_transform
 |      //       Access: Published
 |      //  Description: Returns the relative "previous" transform to this
 |      //               node from the other node; i.e. the position of this
 |      //               node in the previous frame, as seen by the other node
 |      //               in the previous frame.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_python_tag(...)
 |      C++ Interface:
 |      get_python_tag(const NodePath this, string key)
 |  
 |  get_python_tag_keys(...)
 |      C++ Interface:
 |      get_python_tag_keys(const NodePath this)
 |  
 |  get_quat(...)
 |      C++ Interface:
 |      get_quat(const NodePath this)
 |      get_quat(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_quat
 |      //       Access: Published
 |      //  Description: Retrieves the rotation component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_quat
 |      //       Access: Published
 |      //  Description: Returns the relative orientation of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_r(...)
 |      C++ Interface:
 |      get_r(const NodePath this)
 |      get_r(const NodePath this, const NodePath other)
 |  
 |  get_relative_point(...)
 |      C++ Interface:
 |      get_relative_point(const NodePath this, const NodePath other, const LVecBase3f point)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_relative_point
 |      //       Access: Published
 |      //  Description: Given that the indicated point is in the coordinate
 |      //               system of the other node, returns the same point in
 |      //               this node's coordinate system.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_relative_vector(...)
 |      C++ Interface:
 |      get_relative_vector(const NodePath this, const NodePath other, const LVecBase3f vec)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_relative_vector
 |      //       Access: Published
 |      //  Description: Given that the indicated vector is in the coordinate
 |      //               system of the other node, returns the same vector in
 |      //               this node's coordinate system.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_render_mode(...)
 |      C++ Interface:
 |      get_render_mode(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_render_mode
 |      //       Access: Published
 |      //  Description: Returns the render mode that has been specifically
 |      //               set on this node via set_render_mode(), or
 |      //               M_unchanged if nothing has been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_render_mode_perspective(...)
 |      C++ Interface:
 |      get_render_mode_perspective(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_render_mode_perspective
 |      //       Access: Published
 |      //  Description: Returns the flag that has been set on this node via
 |      //               set_render_mode_perspective(), or false if no flag
 |      //               has been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_render_mode_thickness(...)
 |      C++ Interface:
 |      get_render_mode_thickness(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_render_mode_thickness
 |      //       Access: Published
 |      //  Description: Returns the render mode thickness that has been
 |      //               specifically set on this node via set_render_mode(),
 |      //               or 1.0 if nothing has been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_sa(...)
 |      C++ Interface:
 |      get_sa(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sa
 |      //       Access: Published
 |      //  Description: Gets the alpha scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_sb(...)
 |      C++ Interface:
 |      get_sb(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sb
 |      //       Access: Published
 |      //  Description: Gets the blue scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_scale(...)
 |      C++ Interface:
 |      get_scale(const NodePath this)
 |      get_scale(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_scale
 |      //       Access: Published
 |      //  Description: Retrieves the scale component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_scale
 |      //       Access: Published
 |      //  Description: Returns the relative scale of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_sg(...)
 |      C++ Interface:
 |      get_sg(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sg
 |      //       Access: Published
 |      //  Description: Gets the green scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_shader(...)
 |      C++ Interface:
 |      get_shader(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shader
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_shader_input(...)
 |      C++ Interface:
 |      get_shader_input(const NodePath this, const InternalName id)
 |      get_shader_input(const NodePath this, string id)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_shear(...)
 |      C++ Interface:
 |      get_shear(const NodePath this)
 |      get_shear(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shear
 |      //       Access: Published
 |      //  Description: Retrieves the shear component of the transform.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shear
 |      //       Access: Published
 |      //  Description: Returns the relative shear of the bottom node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_shxy(...)
 |      C++ Interface:
 |      get_shxy(const NodePath this)
 |      get_shxy(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_shear
 |      //       Access: Published
 |      //  Description: Returns the relative shear of the referenced node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_shxz(...)
 |      C++ Interface:
 |      get_shxz(const NodePath this)
 |      get_shxz(const NodePath this, const NodePath other)
 |  
 |  get_shyz(...)
 |      C++ Interface:
 |      get_shyz(const NodePath this)
 |      get_shyz(const NodePath this, const NodePath other)
 |  
 |  get_sort(...)
 |      C++ Interface:
 |      get_sort(const NodePath this)
 |      get_sort(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sort
 |      //       Access: Published
 |      //  Description: Returns the sort value of the referenced node within
 |      //               its parent; that is, the sort number passed on the
 |      //               last reparenting operation for this node.  This will
 |      //               control the position of the node within its parent's
 |      //               list of children.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_sr(...)
 |      C++ Interface:
 |      get_sr(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_sr
 |      //       Access: Published
 |      //  Description: Gets the red scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_stashed_ancestor(...)
 |      C++ Interface:
 |      get_stashed_ancestor(const NodePath this)
 |      get_stashed_ancestor(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_stashed_ancestor
 |      //       Access: Published
 |      //  Description: Returns the NodePath at or above the referenced node
 |      //               that is stashed, or an empty NodePath if no ancestor
 |      //               of the referenced node is stashed (and the node should
 |      //               be visible).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_stashed_children(...)
 |      C++ Interface:
 |      get_stashed_children(const NodePath this)
 |      get_stashed_children(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_stashed_children
 |      //       Access: Published
 |      //  Description: Returns the set of all child nodes of the referenced
 |      //               node that have been stashed.  These children are not
 |      //               normally visible on the node, and do not appear in
 |      //               the list returned by get_children().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_state(...)
 |      C++ Interface:
 |      get_state(const NodePath this)
 |      get_state(const NodePath this, const NodePath other)
 |      get_state(const NodePath this, non-const Thread current_thread)
 |      get_state(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      // Aggregate transform and state information.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_state
 |      //       Access: Published
 |      //  Description: Returns the complete state object set on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_state
 |      //       Access: Published
 |      //  Description: Returns the state changes that must be made to
 |      //               transition to the render state of this node from the
 |      //               render state of the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_sx(...)
 |      C++ Interface:
 |      get_sx(const NodePath this)
 |      get_sx(const NodePath this, const NodePath other)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_scale
 |      //       Access: Published
 |      //  Description: Returns the relative scale of the referenced node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_sy(...)
 |      C++ Interface:
 |      get_sy(const NodePath this)
 |      get_sy(const NodePath this, const NodePath other)
 |  
 |  get_sz(...)
 |      C++ Interface:
 |      get_sz(const NodePath this)
 |      get_sz(const NodePath this, const NodePath other)
 |  
 |  get_tag(...)
 |      C++ Interface:
 |      get_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tag
 |      //       Access: Published
 |      //  Description: Retrieves the user-defined value that was previously
 |      //               set on this node for the particular key, if any.  If
 |      //               no value has been previously set, returns the empty
 |      //               string.  See also get_net_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tag_keys(...)
 |      C++ Interface:
 |      get_tag_keys(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tag_keys
 |      //       Access: Published
 |      //  Description: Fills the given vector up with the
 |      //               list of tags on this PandaNode.
 |      //
 |      //               It is the user's responsibility to ensure that the
 |      //               keys vector is empty before making this call;
 |      //               otherwise, the new files will be appended to it.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_gen(...)
 |      C++ Interface:
 |      get_tex_gen(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_gen
 |      //       Access: Published
 |      //  Description: Returns the texture coordinate generation mode for
 |      //               the given stage, or M_off if there is no explicit
 |      //               mode set for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_gen_light(...)
 |      C++ Interface:
 |      get_tex_gen_light(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_gen_light
 |      //       Access: Published
 |      //  Description: Returns the particular Light set for the indicated
 |      //               texgen mode's texture stage, or empty NodePath if no
 |      //               light is set.  This is only meaningful if the texgen
 |      //               mode (returned by get_tex_gen()) is M_light_vector.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_hpr(...)
 |      C++ Interface:
 |      get_tex_hpr(const NodePath this, non-const TextureStage stage)
 |      get_tex_hpr(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_hpr
 |      //       Access: Published
 |      //  Description: Returns the 3-D HPR set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_hpr
 |      //       Access: Published
 |      //  Description: Returns the 3-D HPR set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_offset(...)
 |      C++ Interface:
 |      get_tex_offset(const NodePath this, non-const TextureStage stage)
 |      get_tex_offset(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_offset
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_offset
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_pos(...)
 |      C++ Interface:
 |      get_tex_pos(const NodePath this, non-const TextureStage stage)
 |      get_tex_pos(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_pos
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_pos
 |      //       Access: Published
 |      //  Description: Returns the offset set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_projector_from(...)
 |      C++ Interface:
 |      get_tex_projector_from(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_projector_from
 |      //       Access: Published
 |      //  Description: Returns the "from" node associated with the
 |      //               TexProjectorEffect on the indicated stage.  The
 |      //               relative transform between the "from" and the "to"
 |      //               nodes is automatically applied to the texture
 |      //               transform each frame.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_projector_to(...)
 |      C++ Interface:
 |      get_tex_projector_to(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_projector_to
 |      //       Access: Published
 |      //  Description: Returns the "to" node associated with the
 |      //               TexProjectorEffect on the indicated stage.  The
 |      //               relative transform between the "from" and the "to"
 |      //               nodes is automatically applied to the texture
 |      //               transform each frame.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_rotate(...)
 |      C++ Interface:
 |      get_tex_rotate(const NodePath this, non-const TextureStage stage)
 |      get_tex_rotate(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_rotate
 |      //       Access: Published
 |      //  Description: Returns the rotation set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_rotate
 |      //       Access: Published
 |      //  Description: Returns the rotation set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_scale(...)
 |      C++ Interface:
 |      get_tex_scale(const NodePath this, non-const TextureStage stage)
 |      get_tex_scale(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UV's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_scale_3d(...)
 |      C++ Interface:
 |      get_tex_scale_3d(const NodePath this, non-const TextureStage stage)
 |      get_tex_scale_3d(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale_3d
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_scale_3d
 |      //       Access: Published
 |      //  Description: Returns the scale set for the UVW's for the given
 |      //               stage on the current node.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tex_transform(...)
 |      C++ Interface:
 |      get_tex_transform(const NodePath this, non-const TextureStage stage)
 |      get_tex_transform(const NodePath this, const NodePath other, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_transform
 |      //       Access: Published
 |      //  Description: Returns the texture matrix on the current node for the
 |      //               given stage, or identity transform if there is no
 |      //               explicit transform set for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_tex_transform
 |      //       Access: Published
 |      //  Description: Returns the texture matrix on the current node for the
 |      //               given stage, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_texture(...)
 |      C++ Interface:
 |      get_texture(const NodePath this)
 |      get_texture(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_texture
 |      //       Access: Published
 |      //  Description: Returns the base-level texture that has been set on
 |      //               this particular node, or NULL if no texture has been
 |      //               set.  This is not necessarily the texture that will
 |      //               be applied to the geometry at or below this level, as
 |      //               another texture at a higher or lower level may
 |      //               override.
 |      //
 |      //               See also find_texture().
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_texture
 |      //       Access: Published
 |      //  Description: Returns the texture that has been set on the
 |      //               indicated stage for this particular node, or NULL if
 |      //               no texture has been set for this stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_tight_bounds(...)
 |      C++ Interface:
 |      get_tight_bounds(const NodePath this)
 |  
 |  get_top(...)
 |      C++ Interface:
 |      get_top(const NodePath this)
 |      get_top(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_top
 |      //       Access: Published
 |      //  Description: Returns a singleton NodePath that represents the top
 |      //               of the path, or empty NodePath if this path is empty.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_top_node(...)
 |      C++ Interface:
 |      get_top_node(const NodePath this)
 |      get_top_node(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_top_node
 |      //       Access: Published
 |      //  Description: Returns the top node of the path, or NULL if the path
 |      //               is empty.  This requires iterating through the path.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_transform(...)
 |      C++ Interface:
 |      get_transform(const NodePath this)
 |      get_transform(const NodePath this, const NodePath other)
 |      get_transform(const NodePath this, non-const Thread current_thread)
 |      get_transform(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_transform
 |      //       Access: Published
 |      //  Description: Returns the complete transform object set on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_transform
 |      //       Access: Published
 |      //  Description: Returns the relative transform to this node from the
 |      //               other node; i.e. the transformation of this node
 |      //               as seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_transparency(...)
 |      C++ Interface:
 |      get_transparency(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_transparency
 |      //       Access: Published
 |      //  Description: Returns the transparent rendering that has been
 |      //               specifically set on this node via set_transparency(), or
 |      //               M_none if nontransparent rendering has been specifically
 |      //               set, or if nothing has been specifically set.  See
 |      //               also has_transparency().  This does not necessarily
 |      //               imply that the geometry will or will not be rendered
 |      //               transparent, as there may be other nodes that override.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_two_sided(...)
 |      C++ Interface:
 |      get_two_sided(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_two_sided
 |      //       Access: Published
 |      //  Description: Returns true if two-sided rendering has been
 |      //               specifically set on this node via set_two_sided(), or
 |      //               false if one-sided rendering has been specifically
 |      //               set, or if nothing has been specifically set.  See
 |      //               also has_two_sided().  This does not necessarily
 |      //               imply that the geometry will or will not be rendered
 |      //               two-sided, as there may be other nodes that override.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_x(...)
 |      C++ Interface:
 |      get_x(const NodePath this)
 |      get_x(const NodePath this, const NodePath other)
 |  
 |  get_y(...)
 |      C++ Interface:
 |      get_y(const NodePath this)
 |      get_y(const NodePath this, const NodePath other)
 |  
 |  get_z(...)
 |      C++ Interface:
 |      get_z(const NodePath this)
 |      get_z(const NodePath this, const NodePath other)
 |  
 |  hasAntialias(...)
 |      C++ Interface:
 |      has_antialias(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_antialias
 |      //       Access: Published
 |      //  Description: Returns true if an antialias setting has been
 |      //               explicitly mode on this particular node via
 |      //               set_antialias().  If this returns true, then
 |      //               get_antialias() may be called to determine what the
 |      //               setting was.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasAttrib(...)
 |      C++ Interface:
 |      has_attrib(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_attrib
 |      //       Access: Published
 |      //  Description: Returns true if there is a render attribute of the
 |      //               indicated type defined on this node, or false if
 |      //               there is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasAudioVolume(...)
 |      C++ Interface:
 |      has_audio_volume(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_audio_volume
 |      //       Access: Published
 |      //  Description: Returns true if an audio volume has been applied
 |      //               to the referenced node, false otherwise.  It is still
 |      //               possible that volume at this node might have been
 |      //               scaled by an ancestor node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasBillboard(...)
 |      C++ Interface:
 |      has_billboard(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_billboard
 |      //       Access: Published
 |      //  Description: Returns true if there is any billboard effect on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasBin(...)
 |      C++ Interface:
 |      has_bin(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_bin
 |      //       Access: Published
 |      //  Description: Returns true if the node has been assigned to the a
 |      //               particular rendering bin via set_bin(), false
 |      //               otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasClipPlane(...)
 |      C++ Interface:
 |      has_clip_plane(const NodePath this, const NodePath clip_plane)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_clip_plane
 |      //       Access: Published
 |      //  Description: Returns true if the indicated clipping plane has been
 |      //               specifically applied to this particular node.  This
 |      //               means that someone called set_clip_plane() on this
 |      //               node with the indicated clip_plane.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasClipPlaneOff(...)
 |      C++ Interface:
 |      has_clip_plane_off(const NodePath this)
 |      has_clip_plane_off(const NodePath this, const NodePath clip_plane)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_clip_plane_off
 |      //       Access: Published
 |      //  Description: Returns true if all clipping planes have been
 |      //               specifically disabled on this particular node.  This
 |      //               means that someone called set_clip_plane_off() on
 |      //               this node with no parameters.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_clip_plane_off
 |      //       Access: Published
 |      //  Description: Returns true if the indicated clipping plane has been
 |      //               specifically disabled on this particular node.  This
 |      //               means that someone called set_clip_plane_off() on
 |      //               this node with the indicated clip_plane.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasColor(...)
 |      C++ Interface:
 |      has_color(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_color
 |      //       Access: Published
 |      //  Description: Returns true if a color has been applied to the given
 |      //               node, false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasColorScale(...)
 |      C++ Interface:
 |      has_color_scale(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_color_scale
 |      //       Access: Published
 |      //  Description: Returns true if a color scale has been applied
 |      //               to the referenced node, false otherwise.  It is still
 |      //               possible that color at this node might have been
 |      //               scaled by an ancestor node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasCompass(...)
 |      C++ Interface:
 |      has_compass(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_compass
 |      //       Access: Published
 |      //  Description: Returns true if there is any compass effect on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasDepthOffset(...)
 |      C++ Interface:
 |      has_depth_offset(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_depth_offset
 |      //       Access: Published
 |      //  Description: Returns true if a depth-offset adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_depth_offset().  If this returns true, then
 |      //               get_depth_offset() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasDepthTest(...)
 |      C++ Interface:
 |      has_depth_test(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_depth_test
 |      //       Access: Published
 |      //  Description: Returns true if a depth-test adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_depth_test().  If this returns true, then
 |      //               get_depth_test() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasDepthWrite(...)
 |      C++ Interface:
 |      has_depth_write(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_depth_write
 |      //       Access: Published
 |      //  Description: Returns true if a depth-write adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_depth_write().  If this returns true, then
 |      //               get_depth_write() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasEffect(...)
 |      C++ Interface:
 |      has_effect(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_effect
 |      //       Access: Published
 |      //  Description: Returns true if there is a render effect of the
 |      //               indicated type defined on this node, or false if
 |      //               there is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasFog(...)
 |      C++ Interface:
 |      has_fog(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_fog
 |      //       Access: Published
 |      //  Description: Returns true if a fog has been applied to this
 |      //               particular node via set_fog(), false otherwise.
 |      //               This is not the same thing as asking whether the
 |      //               geometry at this node will be rendered with
 |      //               fog, as there may be a fog in effect from a higher or
 |      //               lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasFogOff(...)
 |      C++ Interface:
 |      has_fog_off(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_fog_off
 |      //       Access: Published
 |      //  Description: Returns true if a fog has been specifically
 |      //               disabled on this particular node via
 |      //               set_fog_off(), false otherwise.  This is not the
 |      //               same thing as asking whether the geometry at this
 |      //               node will be rendered unfogged, as there may be a
 |      //               fog in effect from a higher or lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasLight(...)
 |      C++ Interface:
 |      has_light(const NodePath this, const NodePath light)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_light
 |      //       Access: Published
 |      //  Description: Returns true if the indicated Light or PolylightNode
 |      //               has been specifically enabled on this particular
 |      //               node.  This means that someone called set_light() on
 |      //               this node with the indicated light.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasLightOff(...)
 |      C++ Interface:
 |      has_light_off(const NodePath this)
 |      has_light_off(const NodePath this, const NodePath light)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_light_off
 |      //       Access: Published
 |      //  Description: Returns true if all Lights have been specifically
 |      //               disabled on this particular node.  This means that
 |      //               someone called set_light_off() on this node with no
 |      //               parameters.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_light_off
 |      //       Access: Published
 |      //  Description: Returns true if the indicated Light has been
 |      //               specifically disabled on this particular node.  This
 |      //               means that someone called set_light_off() on this
 |      //               node with the indicated light.
 |      //
 |      //               This interface does not support PolylightNodes, which
 |      //               cannot be turned off at a lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasMat(...)
 |      C++ Interface:
 |      has_mat(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_mat
 |      //       Access: Published
 |      //  Description: Returns true if a non-identity transform matrix has
 |      //               been applied to the referenced node, false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasMaterial(...)
 |      C++ Interface:
 |      has_material(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_material
 |      //       Access: Published
 |      //  Description: Returns true if a material has been applied to this
 |      //               particular node via set_material(), false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasNetPythonTag(...)
 |      C++ Interface:
 |      has_net_python_tag(const NodePath this, string key)
 |  
 |  hasNetTag(...)
 |      C++ Interface:
 |      has_net_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_net_tag
 |      //       Access: Published
 |      //  Description: Returns true if the indicated tag value has been
 |      //               defined on this node or on any ancestor node, or
 |      //               false otherwise.  See also has_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasOccluder(...)
 |      C++ Interface:
 |      has_occluder(const NodePath this, const NodePath occluder)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_occluder
 |      //       Access: Published
 |      //  Description: Returns true if the indicated occluder has been
 |      //               specifically applied to this particular node.  This
 |      //               means that someone called set_occluder() on this
 |      //               node with the indicated occluder.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasParent(...)
 |      C++ Interface:
 |      has_parent(const NodePath this)
 |      has_parent(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_parent
 |      //       Access: Published
 |      //  Description: Returns true if the referenced node has a parent;
 |      //               i.e. the NodePath chain contains at least two nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasPythonTag(...)
 |      C++ Interface:
 |      has_python_tag(const NodePath this, string key)
 |  
 |  hasRenderMode(...)
 |      C++ Interface:
 |      has_render_mode(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_render_mode
 |      //       Access: Published
 |      //  Description: Returns true if a render mode has been explicitly set
 |      //               on this particular node via set_render_mode() (or
 |      //               set_render_mode_wireframe() or
 |      //               set_render_mode_filled()), false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasScissor(...)
 |      C++ Interface:
 |      has_scissor(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_scissor
 |      //       Access: Published
 |      //  Description: Returns true if a scissor region was defined at this
 |      //               node by a previous call to set_scissor().  This does
 |      //               not check for scissor regions inherited from a parent
 |      //               class.  It also does not check for the presence of a
 |      //               low-level ScissorAttrib, which is different from the
 |      //               ScissorEffect added by set_scissor.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTag(...)
 |      C++ Interface:
 |      has_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tag
 |      //       Access: Published
 |      //  Description: Returns true if a value has been defined on this node
 |      //               for the particular key (even if that value is the
 |      //               empty string), or false if no value has been set.
 |      //               See also has_net_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTexGen(...)
 |      C++ Interface:
 |      has_tex_gen(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tex_gen
 |      //       Access: Published
 |      //  Description: Returns true if there is a mode for automatic texture
 |      //               coordinate generation on the current node for the
 |      //               given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTexProjector(...)
 |      C++ Interface:
 |      has_tex_projector(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tex_projector
 |      //       Access: Published
 |      //  Description: Returns true if this node has a TexProjectorEffect
 |      //               for the indicated stage, false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTexTransform(...)
 |      C++ Interface:
 |      has_tex_transform(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tex_transform
 |      //       Access: Published
 |      //  Description: Returns true if there is an explicit texture matrix
 |      //               on the current node for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTexcoord(...)
 |      C++ Interface:
 |      has_texcoord(const NodePath this, string texcoord_name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texcoord
 |      //       Access: Published
 |      //  Description: Returns true if there are at least some vertices at
 |      //               this node and below that use the named texture
 |      //               coordinate set, false otherwise.  Pass the empty
 |      //               string for the default texture coordinate set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTexture(...)
 |      C++ Interface:
 |      has_texture(const NodePath this)
 |      has_texture(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture
 |      //       Access: Published
 |      //  Description: Returns true if a texture has been applied to this
 |      //               particular node via set_texture(), false otherwise.
 |      //               This is not the same thing as asking whether the
 |      //               geometry at this node will be rendered with
 |      //               texturing, as there may be a texture in effect from a
 |      //               higher or lower level.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture
 |      //       Access: Published
 |      //  Description: Returns true if texturing has been specifically
 |      //               enabled on this particular node for the indicated
 |      //               stage.  This means that someone called
 |      //               set_texture() on this node with the indicated stage
 |      //               name, or the stage_name is the default stage_name,
 |      //               and someone called set_texture() on this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTextureOff(...)
 |      C++ Interface:
 |      has_texture_off(const NodePath this)
 |      has_texture_off(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture_off
 |      //       Access: Published
 |      //  Description: Returns true if texturing has been specifically
 |      //               disabled on this particular node via
 |      //               set_texture_off(), false otherwise.  This is not the
 |      //               same thing as asking whether the geometry at this
 |      //               node will be rendered untextured, as there may be a
 |      //               texture in effect from a higher or lower level.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture_off
 |      //       Access: Published
 |      //  Description: Returns true if texturing has been specifically
 |      //               disabled on this particular node for the indicated
 |      //               stage.  This means that someone called
 |      //               set_texture_off() on this node with the indicated
 |      //               stage name, or that someone called set_texture_off()
 |      //               on this node to remove all stages.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTransparency(...)
 |      C++ Interface:
 |      has_transparency(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_transparency
 |      //       Access: Published
 |      //  Description: Returns true if a transparent-rendering adjustment
 |      //               has been explicitly set on this particular node via
 |      //               set_transparency().  If this returns true, then
 |      //               get_transparency() may be called to determine whether
 |      //               transparency has been explicitly enabled or
 |      //               explicitly disabled for this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasTwoSided(...)
 |      C++ Interface:
 |      has_two_sided(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_two_sided
 |      //       Access: Published
 |      //  Description: Returns true if a two-sided adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_two_sided().  If this returns true, then
 |      //               get_two_sided() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hasVertexColumn(...)
 |      C++ Interface:
 |      has_vertex_column(const NodePath this, const InternalName name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_vertex_column
 |      //       Access: Published
 |      //  Description: Returns true if there are at least some vertices at
 |      //               this node and below that contain a reference to the
 |      //               indicated vertex data column name, false otherwise.
 |      //
 |      //               This is particularly useful for testing whether a
 |      //               particular model has a given texture coordinate set
 |      //               (but see has_texcoord()).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_antialias(...)
 |      C++ Interface:
 |      has_antialias(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_antialias
 |      //       Access: Published
 |      //  Description: Returns true if an antialias setting has been
 |      //               explicitly mode on this particular node via
 |      //               set_antialias().  If this returns true, then
 |      //               get_antialias() may be called to determine what the
 |      //               setting was.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_attrib(...)
 |      C++ Interface:
 |      has_attrib(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_attrib
 |      //       Access: Published
 |      //  Description: Returns true if there is a render attribute of the
 |      //               indicated type defined on this node, or false if
 |      //               there is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_audio_volume(...)
 |      C++ Interface:
 |      has_audio_volume(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_audio_volume
 |      //       Access: Published
 |      //  Description: Returns true if an audio volume has been applied
 |      //               to the referenced node, false otherwise.  It is still
 |      //               possible that volume at this node might have been
 |      //               scaled by an ancestor node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_billboard(...)
 |      C++ Interface:
 |      has_billboard(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_billboard
 |      //       Access: Published
 |      //  Description: Returns true if there is any billboard effect on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_bin(...)
 |      C++ Interface:
 |      has_bin(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_bin
 |      //       Access: Published
 |      //  Description: Returns true if the node has been assigned to the a
 |      //               particular rendering bin via set_bin(), false
 |      //               otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_clip_plane(...)
 |      C++ Interface:
 |      has_clip_plane(const NodePath this, const NodePath clip_plane)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_clip_plane
 |      //       Access: Published
 |      //  Description: Returns true if the indicated clipping plane has been
 |      //               specifically applied to this particular node.  This
 |      //               means that someone called set_clip_plane() on this
 |      //               node with the indicated clip_plane.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_clip_plane_off(...)
 |      C++ Interface:
 |      has_clip_plane_off(const NodePath this)
 |      has_clip_plane_off(const NodePath this, const NodePath clip_plane)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_clip_plane_off
 |      //       Access: Published
 |      //  Description: Returns true if all clipping planes have been
 |      //               specifically disabled on this particular node.  This
 |      //               means that someone called set_clip_plane_off() on
 |      //               this node with no parameters.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_clip_plane_off
 |      //       Access: Published
 |      //  Description: Returns true if the indicated clipping plane has been
 |      //               specifically disabled on this particular node.  This
 |      //               means that someone called set_clip_plane_off() on
 |      //               this node with the indicated clip_plane.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_color(...)
 |      C++ Interface:
 |      has_color(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_color
 |      //       Access: Published
 |      //  Description: Returns true if a color has been applied to the given
 |      //               node, false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_color_scale(...)
 |      C++ Interface:
 |      has_color_scale(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_color_scale
 |      //       Access: Published
 |      //  Description: Returns true if a color scale has been applied
 |      //               to the referenced node, false otherwise.  It is still
 |      //               possible that color at this node might have been
 |      //               scaled by an ancestor node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_compass(...)
 |      C++ Interface:
 |      has_compass(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_compass
 |      //       Access: Published
 |      //  Description: Returns true if there is any compass effect on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_depth_offset(...)
 |      C++ Interface:
 |      has_depth_offset(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_depth_offset
 |      //       Access: Published
 |      //  Description: Returns true if a depth-offset adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_depth_offset().  If this returns true, then
 |      //               get_depth_offset() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_depth_test(...)
 |      C++ Interface:
 |      has_depth_test(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_depth_test
 |      //       Access: Published
 |      //  Description: Returns true if a depth-test adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_depth_test().  If this returns true, then
 |      //               get_depth_test() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_depth_write(...)
 |      C++ Interface:
 |      has_depth_write(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_depth_write
 |      //       Access: Published
 |      //  Description: Returns true if a depth-write adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_depth_write().  If this returns true, then
 |      //               get_depth_write() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_effect(...)
 |      C++ Interface:
 |      has_effect(const NodePath this, const TypeHandle type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_effect
 |      //       Access: Published
 |      //  Description: Returns true if there is a render effect of the
 |      //               indicated type defined on this node, or false if
 |      //               there is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_fog(...)
 |      C++ Interface:
 |      has_fog(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_fog
 |      //       Access: Published
 |      //  Description: Returns true if a fog has been applied to this
 |      //               particular node via set_fog(), false otherwise.
 |      //               This is not the same thing as asking whether the
 |      //               geometry at this node will be rendered with
 |      //               fog, as there may be a fog in effect from a higher or
 |      //               lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_fog_off(...)
 |      C++ Interface:
 |      has_fog_off(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_fog_off
 |      //       Access: Published
 |      //  Description: Returns true if a fog has been specifically
 |      //               disabled on this particular node via
 |      //               set_fog_off(), false otherwise.  This is not the
 |      //               same thing as asking whether the geometry at this
 |      //               node will be rendered unfogged, as there may be a
 |      //               fog in effect from a higher or lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_light(...)
 |      C++ Interface:
 |      has_light(const NodePath this, const NodePath light)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_light
 |      //       Access: Published
 |      //  Description: Returns true if the indicated Light or PolylightNode
 |      //               has been specifically enabled on this particular
 |      //               node.  This means that someone called set_light() on
 |      //               this node with the indicated light.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_light_off(...)
 |      C++ Interface:
 |      has_light_off(const NodePath this)
 |      has_light_off(const NodePath this, const NodePath light)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_light_off
 |      //       Access: Published
 |      //  Description: Returns true if all Lights have been specifically
 |      //               disabled on this particular node.  This means that
 |      //               someone called set_light_off() on this node with no
 |      //               parameters.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_light_off
 |      //       Access: Published
 |      //  Description: Returns true if the indicated Light has been
 |      //               specifically disabled on this particular node.  This
 |      //               means that someone called set_light_off() on this
 |      //               node with the indicated light.
 |      //
 |      //               This interface does not support PolylightNodes, which
 |      //               cannot be turned off at a lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_mat(...)
 |      C++ Interface:
 |      has_mat(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_mat
 |      //       Access: Published
 |      //  Description: Returns true if a non-identity transform matrix has
 |      //               been applied to the referenced node, false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_material(...)
 |      C++ Interface:
 |      has_material(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_material
 |      //       Access: Published
 |      //  Description: Returns true if a material has been applied to this
 |      //               particular node via set_material(), false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_net_python_tag(...)
 |      C++ Interface:
 |      has_net_python_tag(const NodePath this, string key)
 |  
 |  has_net_tag(...)
 |      C++ Interface:
 |      has_net_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_net_tag
 |      //       Access: Published
 |      //  Description: Returns true if the indicated tag value has been
 |      //               defined on this node or on any ancestor node, or
 |      //               false otherwise.  See also has_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_occluder(...)
 |      C++ Interface:
 |      has_occluder(const NodePath this, const NodePath occluder)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_occluder
 |      //       Access: Published
 |      //  Description: Returns true if the indicated occluder has been
 |      //               specifically applied to this particular node.  This
 |      //               means that someone called set_occluder() on this
 |      //               node with the indicated occluder.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_parent(...)
 |      C++ Interface:
 |      has_parent(const NodePath this)
 |      has_parent(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_parent
 |      //       Access: Published
 |      //  Description: Returns true if the referenced node has a parent;
 |      //               i.e. the NodePath chain contains at least two nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_python_tag(...)
 |      C++ Interface:
 |      has_python_tag(const NodePath this, string key)
 |  
 |  has_render_mode(...)
 |      C++ Interface:
 |      has_render_mode(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_render_mode
 |      //       Access: Published
 |      //  Description: Returns true if a render mode has been explicitly set
 |      //               on this particular node via set_render_mode() (or
 |      //               set_render_mode_wireframe() or
 |      //               set_render_mode_filled()), false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_scissor(...)
 |      C++ Interface:
 |      has_scissor(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_scissor
 |      //       Access: Published
 |      //  Description: Returns true if a scissor region was defined at this
 |      //               node by a previous call to set_scissor().  This does
 |      //               not check for scissor regions inherited from a parent
 |      //               class.  It also does not check for the presence of a
 |      //               low-level ScissorAttrib, which is different from the
 |      //               ScissorEffect added by set_scissor.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_tag(...)
 |      C++ Interface:
 |      has_tag(const NodePath this, string key)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tag
 |      //       Access: Published
 |      //  Description: Returns true if a value has been defined on this node
 |      //               for the particular key (even if that value is the
 |      //               empty string), or false if no value has been set.
 |      //               See also has_net_tag().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_tex_gen(...)
 |      C++ Interface:
 |      has_tex_gen(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tex_gen
 |      //       Access: Published
 |      //  Description: Returns true if there is a mode for automatic texture
 |      //               coordinate generation on the current node for the
 |      //               given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_tex_projector(...)
 |      C++ Interface:
 |      has_tex_projector(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tex_projector
 |      //       Access: Published
 |      //  Description: Returns true if this node has a TexProjectorEffect
 |      //               for the indicated stage, false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_tex_transform(...)
 |      C++ Interface:
 |      has_tex_transform(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_tex_transform
 |      //       Access: Published
 |      //  Description: Returns true if there is an explicit texture matrix
 |      //               on the current node for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_texcoord(...)
 |      C++ Interface:
 |      has_texcoord(const NodePath this, string texcoord_name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texcoord
 |      //       Access: Published
 |      //  Description: Returns true if there are at least some vertices at
 |      //               this node and below that use the named texture
 |      //               coordinate set, false otherwise.  Pass the empty
 |      //               string for the default texture coordinate set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_texture(...)
 |      C++ Interface:
 |      has_texture(const NodePath this)
 |      has_texture(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture
 |      //       Access: Published
 |      //  Description: Returns true if a texture has been applied to this
 |      //               particular node via set_texture(), false otherwise.
 |      //               This is not the same thing as asking whether the
 |      //               geometry at this node will be rendered with
 |      //               texturing, as there may be a texture in effect from a
 |      //               higher or lower level.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture
 |      //       Access: Published
 |      //  Description: Returns true if texturing has been specifically
 |      //               enabled on this particular node for the indicated
 |      //               stage.  This means that someone called
 |      //               set_texture() on this node with the indicated stage
 |      //               name, or the stage_name is the default stage_name,
 |      //               and someone called set_texture() on this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_texture_off(...)
 |      C++ Interface:
 |      has_texture_off(const NodePath this)
 |      has_texture_off(const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture_off
 |      //       Access: Published
 |      //  Description: Returns true if texturing has been specifically
 |      //               disabled on this particular node via
 |      //               set_texture_off(), false otherwise.  This is not the
 |      //               same thing as asking whether the geometry at this
 |      //               node will be rendered untextured, as there may be a
 |      //               texture in effect from a higher or lower level.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_texture_off
 |      //       Access: Published
 |      //  Description: Returns true if texturing has been specifically
 |      //               disabled on this particular node for the indicated
 |      //               stage.  This means that someone called
 |      //               set_texture_off() on this node with the indicated
 |      //               stage name, or that someone called set_texture_off()
 |      //               on this node to remove all stages.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_transparency(...)
 |      C++ Interface:
 |      has_transparency(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_transparency
 |      //       Access: Published
 |      //  Description: Returns true if a transparent-rendering adjustment
 |      //               has been explicitly set on this particular node via
 |      //               set_transparency().  If this returns true, then
 |      //               get_transparency() may be called to determine whether
 |      //               transparency has been explicitly enabled or
 |      //               explicitly disabled for this node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_two_sided(...)
 |      C++ Interface:
 |      has_two_sided(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_two_sided
 |      //       Access: Published
 |      //  Description: Returns true if a two-sided adjustment has been
 |      //               explicitly set on this particular node via
 |      //               set_two_sided().  If this returns true, then
 |      //               get_two_sided() may be called to determine which has
 |      //               been set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  has_vertex_column(...)
 |      C++ Interface:
 |      has_vertex_column(const NodePath this, const InternalName name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::has_vertex_column
 |      //       Access: Published
 |      //  Description: Returns true if there are at least some vertices at
 |      //               this node and below that contain a reference to the
 |      //               indicated vertex data column name, false otherwise.
 |      //
 |      //               This is particularly useful for testing whether a
 |      //               particular model has a given texture coordinate set
 |      //               (but see has_texcoord()).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  headsUp(...)
 |      C++ Interface:
 |      heads_up(non-const NodePath this, const LPoint3f point)
 |      heads_up(non-const NodePath this, const NodePath other)
 |      heads_up(non-const NodePath this, const LPoint3f point, const LVector3f up)
 |      heads_up(non-const NodePath this, const NodePath other, const LPoint3f point)
 |      heads_up(non-const NodePath this, const NodePath other, const LPoint3f point, const LVector3f up)
 |      heads_up(non-const NodePath this, float x, float y, float z)
 |      heads_up(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  heads_up(...)
 |      C++ Interface:
 |      heads_up(non-const NodePath this, const LPoint3f point)
 |      heads_up(non-const NodePath this, const NodePath other)
 |      heads_up(non-const NodePath this, const LPoint3f point, const LVector3f up)
 |      heads_up(non-const NodePath this, const NodePath other, const LPoint3f point)
 |      heads_up(non-const NodePath this, const NodePath other, const LPoint3f point, const LVector3f up)
 |      heads_up(non-const NodePath this, float x, float y, float z)
 |      heads_up(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::heads_up
 |      //       Access: Published
 |      //  Description: Behaves like look_at(), but with a strong preference
 |      //               to keeping the up vector oriented in the indicated
 |      //               "up" direction.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hide(...)
 |      C++ Interface:
 |      hide(non-const NodePath this)
 |      hide(non-const NodePath this, const BitMask camera_mask)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::hide
 |      //       Access: Published
 |      //  Description: Makes the referenced node (and the entire subgraph
 |      //               below this node) invisible to all cameras.  It
 |      //               remains part of the scene graph, its bounding volume
 |      //               still contributes to its parent's bounding volume,
 |      //               and it will still be involved in collision tests.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::hide
 |      //       Access: Published
 |      //  Description: Makes the referenced node invisible just to the
 |      //               cameras whose camera_mask shares the indicated bits.
 |      //
 |      //               This will also hide any nodes below this node in the
 |      //               scene graph, including those nodes for which show()
 |      //               has been called, but it will not hide descendent
 |      //               nodes for which show_through() has been called.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hideBounds(...)
 |      C++ Interface:
 |      hide_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::hide_bounds
 |      //       Access: Published
 |      //  Description: Stops the rendering of the bounding volume begun with
 |      //               show_bounds().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hideCS(self, mask=None)
 |      Hides the collision solids at or below this node.  If mask is
 |      not None, it is a BitMask32 object (e.g. WallBitmask,
 |      CameraBitmask) that indicates which particular collision
 |      solids should be hidden; otherwise, all of them will be.
 |  
 |  hideSiblings(self)
 |      Hide all the siblings of a node path
 |  
 |  hide_bounds(...)
 |      C++ Interface:
 |      hide_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::hide_bounds
 |      //       Access: Published
 |      //  Description: Stops the rendering of the bounding volume begun with
 |      //               show_bounds().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  hprInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  hprScaleInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  iHpr(self, other=None)
 |      Set node path's hpr to 0, 0, 0
 |  
 |  iPos(self, other=None)
 |      Set node path's pos to 0, 0, 0
 |  
 |  iPosHpr(self, other=None)
 |      Set node path's pos and hpr to 0, 0, 0
 |  
 |  iPosHprScale(self, other=None)
 |      Set node path's pos and hpr to 0, 0, 0 and scale to 1, 1, 1
 |  
 |  iScale(self, other=None)
 |      SEt node path's scale to 1, 1, 1
 |  
 |  id(self)
 |      Returns a unique id identifying the NodePath instance
 |  
 |  instanceTo(...)
 |      C++ Interface:
 |      instance_to(const NodePath this, const NodePath other)
 |      instance_to(const NodePath this, const NodePath other, int sort)
 |      instance_to(const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::instance_to
 |      //       Access: Published
 |      //  Description: Adds the referenced node of the NodePath as a child
 |      //               of the referenced node of the indicated other
 |      //               NodePath.  Any other parent-child relations of the
 |      //               node are unchanged; in particular, the node is not
 |      //               removed from its existing parent, if any.
 |      //
 |      //               If the node already had an existing parent, this
 |      //               method will create a new instance of the node within
 |      //               the scene graph.
 |      //
 |      //               This does not change the NodePath itself, but does
 |      //               return a new NodePath that reflects the new instance
 |      //               node.
 |      //
 |      //               If the destination NodePath is empty, this creates a
 |      //               new instance which is not yet parented to any node.
 |      //               A new instance of this sort cannot easily be
 |      //               differentiated from other similar instances, but it
 |      //               is nevertheless a different instance and it will
 |      //               return a different get_id() value.
 |      //
 |      //               If the referenced node is already a child of the
 |      //               indicated NodePath, returns that already-existing
 |      //               instance, unstashing it first if necessary.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  instanceUnderNode(...)
 |      C++ Interface:
 |      instance_under_node(const NodePath this, const NodePath other, string name)
 |      instance_under_node(const NodePath this, const NodePath other, string name, int sort)
 |      instance_under_node(const NodePath this, const NodePath other, string name, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::instance_under_node
 |      //       Access: Published
 |      //  Description: Behaves like instance_to(), but implicitly creates a
 |      //               new node to instance the geometry under, and returns a
 |      //               NodePath to that new node.  This allows the
 |      //               programmer to set a unique state and/or transform on
 |      //               this instance.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  instance_to(...)
 |      C++ Interface:
 |      instance_to(const NodePath this, const NodePath other)
 |      instance_to(const NodePath this, const NodePath other, int sort)
 |      instance_to(const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::instance_to
 |      //       Access: Published
 |      //  Description: Adds the referenced node of the NodePath as a child
 |      //               of the referenced node of the indicated other
 |      //               NodePath.  Any other parent-child relations of the
 |      //               node are unchanged; in particular, the node is not
 |      //               removed from its existing parent, if any.
 |      //
 |      //               If the node already had an existing parent, this
 |      //               method will create a new instance of the node within
 |      //               the scene graph.
 |      //
 |      //               This does not change the NodePath itself, but does
 |      //               return a new NodePath that reflects the new instance
 |      //               node.
 |      //
 |      //               If the destination NodePath is empty, this creates a
 |      //               new instance which is not yet parented to any node.
 |      //               A new instance of this sort cannot easily be
 |      //               differentiated from other similar instances, but it
 |      //               is nevertheless a different instance and it will
 |      //               return a different get_id() value.
 |      //
 |      //               If the referenced node is already a child of the
 |      //               indicated NodePath, returns that already-existing
 |      //               instance, unstashing it first if necessary.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  instance_under_node(...)
 |      C++ Interface:
 |      instance_under_node(const NodePath this, const NodePath other, string name)
 |      instance_under_node(const NodePath this, const NodePath other, string name, int sort)
 |      instance_under_node(const NodePath this, const NodePath other, string name, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::instance_under_node
 |      //       Access: Published
 |      //  Description: Behaves like instance_to(), but implicitly creates a
 |      //               new node to instance the geometry under, and returns a
 |      //               NodePath to that new node.  This allows the
 |      //               programmer to set a unique state and/or transform on
 |      //               this instance.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  isAncestorOf(...)
 |      C++ Interface:
 |      is_ancestor_of(const NodePath this, const NodePath other)
 |      is_ancestor_of(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_ancestor_of
 |      //       Access: Published
 |      //  Description: Returns true if the node represented by this NodePath
 |      //               is a parent or other ancestor of the other NodePath,
 |      //               or false if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  isEmpty(...)
 |      C++ Interface:
 |      is_empty(const NodePath this)
 |      
 |      // Methods to query a NodePath's contents.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_empty
 |      //       Access: Published
 |      //  Description: Returns true if the NodePath contains no nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  isHidden(...)
 |      C++ Interface:
 |      is_hidden(const NodePath this)
 |      is_hidden(const NodePath this, const BitMask camera_mask)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_hidden
 |      //       Access: Published
 |      //  Description: Returns true if the referenced node is hidden from
 |      //               the indicated camera(s) either directly, or because
 |      //               some ancestor is hidden.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  isSameGraph(...)
 |      C++ Interface:
 |      is_same_graph(const NodePath this, const NodePath other)
 |      is_same_graph(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_same_graph
 |      //       Access: Published
 |      //  Description: Returns true if the node represented by this NodePath
 |      //               is parented within the same graph as that of the
 |      //               other NodePath.  This is essentially the same thing
 |      //               as asking whether get_top() of both NodePaths is the
 |      //               same (e.g., both "render").
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  isSingleton(...)
 |      C++ Interface:
 |      is_singleton(const NodePath this)
 |      is_singleton(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_singleton
 |      //       Access: Published
 |      //  Description: Returns true if the NodePath contains exactly one
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  isStashed(...)
 |      C++ Interface:
 |      is_stashed(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_stashed
 |      //       Access: Published
 |      //  Description: Returns true if the referenced node is stashed either
 |      //               directly, or because some ancestor is stashed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  is_ancestor_of(...)
 |      C++ Interface:
 |      is_ancestor_of(const NodePath this, const NodePath other)
 |      is_ancestor_of(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_ancestor_of
 |      //       Access: Published
 |      //  Description: Returns true if the node represented by this NodePath
 |      //               is a parent or other ancestor of the other NodePath,
 |      //               or false if it is not.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  is_empty(...)
 |      C++ Interface:
 |      is_empty(const NodePath this)
 |      
 |      // Methods to query a NodePath's contents.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_empty
 |      //       Access: Published
 |      //  Description: Returns true if the NodePath contains no nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  is_hidden(...)
 |      C++ Interface:
 |      is_hidden(const NodePath this)
 |      is_hidden(const NodePath this, const BitMask camera_mask)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_hidden
 |      //       Access: Published
 |      //  Description: Returns true if the referenced node is hidden from
 |      //               the indicated camera(s) either directly, or because
 |      //               some ancestor is hidden.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  is_same_graph(...)
 |      C++ Interface:
 |      is_same_graph(const NodePath this, const NodePath other)
 |      is_same_graph(const NodePath this, const NodePath other, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_same_graph
 |      //       Access: Published
 |      //  Description: Returns true if the node represented by this NodePath
 |      //               is parented within the same graph as that of the
 |      //               other NodePath.  This is essentially the same thing
 |      //               as asking whether get_top() of both NodePaths is the
 |      //               same (e.g., both "render").
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  is_singleton(...)
 |      C++ Interface:
 |      is_singleton(const NodePath this)
 |      is_singleton(const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_singleton
 |      //       Access: Published
 |      //  Description: Returns true if the NodePath contains exactly one
 |      //               node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  is_stashed(...)
 |      C++ Interface:
 |      is_stashed(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::is_stashed
 |      //       Access: Published
 |      //  Description: Returns true if the referenced node is stashed either
 |      //               directly, or because some ancestor is stashed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  isolate(self)
 |      Show the node path and hide its siblings
 |  
 |  lerpColor(self, *posArgs, **keyArgs)
 |      lerpColor(self, *positionArgs, **keywordArgs)
 |      determine which lerpColor* to call based on arguments
 |  
 |  lerpColorRGBA(self, r, g, b, a, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorRGBA(self, float, float, float, float, float,
 |      string="noBlend", string=none, string=none)
 |  
 |  lerpColorRGBARGBA(self, sr, sg, sb, sa, er, eg, eb, ea, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorRGBARGBA(self, float, float, float, float, float,
 |      float, float, float, float, string="noBlend", string=none, string=none)
 |  
 |  lerpColorScale(self, *posArgs, **keyArgs)
 |      lerpColorScale(self, *positionArgs, **keywordArgs)
 |      determine which lerpColorScale* to call based on arguments
 |  
 |  lerpColorScaleRGBA(self, r, g, b, a, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorScaleRGBA(self, float, float, float, float, float,
 |      string="noBlend", string=none, string=none)
 |  
 |  lerpColorScaleRGBARGBA(self, sr, sg, sb, sa, er, eg, eb, ea, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorScaleRGBARGBA(self, float, float, float, float, float,
 |      float, float, float, float, string="noBlend", string=none, string=none)
 |  
 |  lerpColorScaleVBase4(self, endColor, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorScaleVBase4(self, VBase4, float, string="noBlend", string=none,
 |      string=none)
 |  
 |  lerpColorScaleVBase4VBase4(self, startColor, endColor, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorScaleVBase4VBase4(self, VBase4, VBase4, float, string="noBlend",
 |      string=none, string=none)
 |  
 |  lerpColorVBase4(self, endColor, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorVBase4(self, VBase4, float, string="noBlend", string=none,
 |      string=none)
 |  
 |  lerpColorVBase4VBase4(self, startColor, endColor, time, blendType='noBlend', auto=None, task=None)
 |      lerpColorVBase4VBase4(self, VBase4, VBase4, float, string="noBlend",
 |      string=none, string=none)
 |  
 |  lerpHpr(self, *posArgs, **keyArgs)
 |      lerpHpr(self, *positionArgs, **keywordArgs)
 |      Determine whether to call lerpHprHPR or lerpHprVBase3
 |      based on first argument
 |  
 |  lerpHprHPR(self, h, p, r, time, other=None, blendType='noBlend', auto=None, task=None, shortest=1)
 |      lerpHprHPR(self, float, float, float, float, string="noBlend",
 |      string=none, string=none, NodePath=none)
 |      Perform a hpr lerp with three floats as the end point
 |  
 |  lerpHprVBase3(self, hpr, time, other=None, blendType='noBlend', auto=None, task=None, shortest=1)
 |      lerpHprVBase3(self, VBase3, float, string="noBlend", string=none,
 |      string=none, NodePath=None)
 |      Perform a hpr lerp with a VBase3 as the end point
 |  
 |  lerpPos(self, *posArgs, **keyArgs)
 |      lerpPos(self, *positionArgs, **keywordArgs)
 |      Determine whether to call lerpPosXYZ or lerpPosPoint3
 |      based on the first argument
 |  
 |  lerpPosHpr(self, *posArgs, **keyArgs)
 |      lerpPosHpr(self, *positionArgs, **keywordArgs)
 |      Determine whether to call lerpPosHprXYZHPR or lerpHprPoint3VBase3
 |      based on first argument
 |  
 |  lerpPosHprPoint3VBase3(self, pos, hpr, time, other=None, blendType='noBlend', auto=None, task=None, shortest=1)
 |      lerpPosHprPoint3VBase3(self, Point3, VBase3, string="noBlend",
 |      string=none, string=none, NodePath=None)
 |  
 |  lerpPosHprScale(self, pos, hpr, scale, time, other=None, blendType='noBlend', auto=None, task=None, shortest=1)
 |      lerpPosHpr(self, Point3, VBase3, float, float, string="noBlend",
 |      string=none, string=none, NodePath=None)
 |      Only one case, no need for extra args. Call the appropriate lerp
 |      (auto, spawned, or blocking) based on how(if) a task name is given
 |  
 |  lerpPosHprXYZHPR(self, x, y, z, h, p, r, time, other=None, blendType='noBlend', auto=None, task=None, shortest=1)
 |      lerpPosHpr(self, float, string="noBlend", string=none,
 |      string=none, NodePath=None)
 |  
 |  lerpPosPoint3(self, pos, time, other=None, blendType='noBlend', auto=None, task=None)
 |      lerpPosPoint3(self, Point3, float, string="noBlend", string=None,
 |      string=None, NodePath=None)
 |      Perform a pos lerp with a Point3 as the end point
 |  
 |  lerpPosXYZ(self, x, y, z, time, other=None, blendType='noBlend', auto=None, task=None)
 |      lerpPosXYZ(self, float, float, float, float, string="noBlend",
 |      string=None, NodePath=None)
 |      Perform a pos lerp with three floats as the end point
 |  
 |  lerpScale(self, *posArgs, **keyArgs)
 |      lerpSclae(self, *positionArgs, **keywordArgs)
 |      Determine whether to call lerpScaleXYZ or lerpScaleaseV3
 |      based on the first argument
 |  
 |  lerpScaleVBase3(self, scale, time, other=None, blendType='noBlend', auto=None, task=None)
 |      lerpPos(self, VBase3, float, string="noBlend", string=none,
 |      string=none, NodePath=None)
 |  
 |  lerpScaleXYZ(self, sx, sy, sz, time, other=None, blendType='noBlend', auto=None, task=None)
 |      lerpPos(self, float, float, float, float, string="noBlend",
 |      string=none, string=none, NodePath=None)
 |  
 |  listTags(...)
 |      C++ Interface:
 |      list_tags(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::list_tags
 |      //       Access: Published
 |      //  Description: Lists the tags to the nout stream, one per line.  See
 |      //               PandaNode::list_tags() for a variant that allows you
 |      //               to specify the output stream.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  list_tags(...)
 |      C++ Interface:
 |      list_tags(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::list_tags
 |      //       Access: Published
 |      //  Description: Lists the tags to the nout stream, one per line.  See
 |      //               PandaNode::list_tags() for a variant that allows you
 |      //               to specify the output stream.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  lookAt(...)
 |      C++ Interface:
 |      look_at(non-const NodePath this, const LPoint3f point)
 |      look_at(non-const NodePath this, const NodePath other)
 |      look_at(non-const NodePath this, const LPoint3f point, const LVector3f up)
 |      look_at(non-const NodePath this, const NodePath other, const LPoint3f point)
 |      look_at(non-const NodePath this, const NodePath other, const LPoint3f point, const LVector3f up)
 |      look_at(non-const NodePath this, float x, float y, float z)
 |      look_at(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the transform on this NodePath so that it
 |      //               rotates to face the indicated point in space.  This
 |      //               will overwrite any previously existing scale on the
 |      //               node, although it will preserve any translation.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the hpr on this NodePath so that it rotates to
 |      //               face the indicated point in space, which is relative
 |      //               to the other NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the hpr on this NodePath so that it
 |      //               rotates to face the indicated point in space.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the transform on this NodePath so that it
 |      //               rotates to face the indicated point in space, which
 |      //               is relative to the other NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  look_at(...)
 |      C++ Interface:
 |      look_at(non-const NodePath this, const LPoint3f point)
 |      look_at(non-const NodePath this, const NodePath other)
 |      look_at(non-const NodePath this, const LPoint3f point, const LVector3f up)
 |      look_at(non-const NodePath this, const NodePath other, const LPoint3f point)
 |      look_at(non-const NodePath this, const NodePath other, const LPoint3f point, const LVector3f up)
 |      look_at(non-const NodePath this, float x, float y, float z)
 |      look_at(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the transform on this NodePath so that it
 |      //               rotates to face the indicated point in space.  This
 |      //               will overwrite any previously existing scale on the
 |      //               node, although it will preserve any translation.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the hpr on this NodePath so that it rotates to
 |      //               face the indicated point in space, which is relative
 |      //               to the other NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the hpr on this NodePath so that it
 |      //               rotates to face the indicated point in space.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::look_at
 |      //       Access: Published
 |      //  Description: Sets the transform on this NodePath so that it
 |      //               rotates to face the indicated point in space, which
 |      //               is relative to the other NodePath.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  ls(...)
 |      C++ Interface:
 |      ls(const NodePath this)
 |      ls(const NodePath this, non-const ostream out)
 |      ls(const NodePath this, non-const ostream out, int indent_level)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::ls
 |      //       Access: Published
 |      //  Description: Lists the hierarchy at and below the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::ls
 |      //       Access: Published
 |      //  Description: Lists the hierarchy at and below the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  lsNames(self)
 |      Walk down a tree and print out the path
 |  
 |  lsNamesRecurse(self, indentString=' ')
 |      Walk down a tree and print out the path
 |  
 |  node(...)
 |      C++ Interface:
 |      node(const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::node
 |      //       Access: Published
 |      //  Description: Returns the referenced node of the path.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  output(...)
 |      C++ Interface:
 |      output(const NodePath this, non-const ostream out)
 |      
 |      // Handy ways to look at what's there, and other miscellaneous
 |      // operations.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::output
 |      //       Access: Published
 |      //  Description: Writes a sensible description of the NodePath to the
 |      //               indicated output stream.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  pPrintString(self, other=None)
 |      pretty print
 |  
 |  place(self)
 |      #####################################################################
 |  
 |  posHprInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  posHprScaleInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  posHprScaleShearInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  posInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  posQuatInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  posQuatScaleInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  posQuatScaleShearInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  premungeScene(...)
 |      C++ Interface:
 |      premunge_scene(non-const NodePath this)
 |      premunge_scene(non-const NodePath this, non-const GraphicsStateGuardianBase gsg)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::premunge_scene
 |      //       Access: Published
 |      //  Description: Walks through the scene graph beginning at the bottom
 |      //               node, and internally adjusts any GeomVertexFormats
 |      //               for optimal rendering on the indicated GSG.  If this
 |      //               step is not done prior to rendering, the formats will
 |      //               be optimized at render time instead, for a small
 |      //               cost.
 |      //
 |      //               It is not normally necessary to do this on a model
 |      //               loaded directly from disk, since the loader will do
 |      //               this by default.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  premunge_scene(...)
 |      C++ Interface:
 |      premunge_scene(non-const NodePath this)
 |      premunge_scene(non-const NodePath this, non-const GraphicsStateGuardianBase gsg)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::premunge_scene
 |      //       Access: Published
 |      //  Description: Walks through the scene graph beginning at the bottom
 |      //               node, and internally adjusts any GeomVertexFormats
 |      //               for optimal rendering on the indicated GSG.  If this
 |      //               step is not done prior to rendering, the formats will
 |      //               be optimized at render time instead, for a small
 |      //               cost.
 |      //
 |      //               It is not normally necessary to do this on a model
 |      //               loaded directly from disk, since the loader will do
 |      //               this by default.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  prepareScene(...)
 |      C++ Interface:
 |      prepare_scene(non-const NodePath this, non-const GraphicsStateGuardianBase gsg)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::prepare_scene
 |      //       Access: Published
 |      //  Description: Walks through the scene graph beginning at the bottom
 |      //               node, and does whatever initialization is required to
 |      //               render the scene properly with the indicated GSG.  It
 |      //               is not strictly necessary to call this, since the GSG
 |      //               will initialize itself when the scene is rendered,
 |      //               but this may take some of the overhead away from that
 |      //               process.
 |      //
 |      //               In particular, this will ensure that textures and
 |      //               vertex buffers within the scene are loaded into
 |      //               graphics memory.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  prepare_scene(...)
 |      C++ Interface:
 |      prepare_scene(non-const NodePath this, non-const GraphicsStateGuardianBase gsg)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::prepare_scene
 |      //       Access: Published
 |      //  Description: Walks through the scene graph beginning at the bottom
 |      //               node, and does whatever initialization is required to
 |      //               render the scene properly with the indicated GSG.  It
 |      //               is not strictly necessary to call this, since the GSG
 |      //               will initialize itself when the scene is rendered,
 |      //               but this may take some of the overhead away from that
 |      //               process.
 |      //
 |      //               In particular, this will ensure that textures and
 |      //               vertex buffers within the scene are loaded into
 |      //               graphics memory.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  printChildren(self)
 |      Prints out the children of the bottom node of a node path
 |  
 |  printHpr(self, other=None, sd=2)
 |      Pretty print a node path's hpr
 |  
 |  printPos(self, other=None, sd=2)
 |      Pretty print a node path's pos
 |  
 |  printPosHpr(self, other=None, sd=2)
 |      Pretty print a node path's pos and, hpr
 |  
 |  printPosHprScale(self, other=None, sd=2)
 |      Pretty print a node path's pos, hpr, and scale
 |  
 |  printScale(self, other=None, sd=2)
 |      Pretty print a node path's scale
 |  
 |  printTransform(self, other=None, sd=2, fRecursive=0)
 |  
 |  projectTexture(...)
 |      C++ Interface:
 |      project_texture(non-const NodePath this, non-const TextureStage stage, non-const Texture tex, const NodePath projector)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::project_texture
 |      //       Access: Published
 |      //  Description: A convenience function to enable projective texturing
 |      //               at this node level and below, using the indicated
 |      //               NodePath (which should contain a LensNode) as the
 |      //               projector.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  project_texture(...)
 |      C++ Interface:
 |      project_texture(non-const NodePath this, non-const TextureStage stage, non-const Texture tex, const NodePath projector)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::project_texture
 |      //       Access: Published
 |      //  Description: A convenience function to enable projective texturing
 |      //               at this node level and below, using the indicated
 |      //               NodePath (which should contain a LensNode) as the
 |      //               projector.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  quatInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  quatScaleInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  r_constructCollisionTree(self, solidTree, parentNode, colName)
 |  
 |  r_subdivideCollisions(self, solids, numSolidsInLeaves)
 |  
 |  remove(self)
 |      Remove a node path from the scene graph
 |  
 |  removeChildren(self)
 |      Deletes the children of the bottom node of a node path
 |  
 |  removeNonCollisions(self)
 |      #####################################################################
 |  
 |  remove_node(...)
 |      C++ Interface:
 |      remove_node(non-const NodePath this)
 |      remove_node(non-const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::remove_node
 |      //       Access: Published
 |      //  Description: Disconnects the referenced node from the scene graph.
 |      //               This will also delete the node if there are no other
 |      //               pointers to it.
 |      //
 |      //               Normally, this should be called only when you are
 |      //               really done with the node.  If you want to remove a
 |      //               node from the scene graph but keep it around for
 |      //               later, you should probably use detach_node() instead.
 |      //
 |      //               In practice, the only difference between
 |      //               remove_node() and detach_node() is that remove_node()
 |      //               also resets the NodePath to empty, which will cause
 |      //               the node to be deleted immediately if there are no
 |      //               other references.  On the other hand, detach_node()
 |      //               leaves the NodePath referencing the node, which will
 |      //               keep at least one reference to the node for as long
 |      //               as the NodePath exists.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  reparentTo(...)
 |      C++ Interface:
 |      reparent_to(non-const NodePath this, const NodePath other)
 |      reparent_to(non-const NodePath this, const NodePath other, int sort)
 |      reparent_to(non-const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      // Methods that actually move nodes around in the scene graph.  The
 |      // optional "sort" parameter can be used to force a particular
 |      // ordering between sibling nodes, useful when dealing with LOD's
 |      // and similar switch nodes.  If the sort value is the same, nodes
 |      // will be arranged in the order they were added.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::reparent_to
 |      //       Access: Published
 |      //  Description: Removes the referenced node of the NodePath from its
 |      //               current parent and attaches it to the referenced node
 |      //               of the indicated NodePath.  
 |      //
 |      //               If the destination NodePath is empty, this is the
 |      //               same thing as detach_node().
 |      //
 |      //               If the referenced node is already a child of the
 |      //               indicated NodePath (via some other instance), this
 |      //               operation fails and leaves the NodePath detached.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  reparent_to(...)
 |      C++ Interface:
 |      reparent_to(non-const NodePath this, const NodePath other)
 |      reparent_to(non-const NodePath this, const NodePath other, int sort)
 |      reparent_to(non-const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      // Methods that actually move nodes around in the scene graph.  The
 |      // optional "sort" parameter can be used to force a particular
 |      // ordering between sibling nodes, useful when dealing with LOD's
 |      // and similar switch nodes.  If the sort value is the same, nodes
 |      // will be arranged in the order they were added.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::reparent_to
 |      //       Access: Published
 |      //  Description: Removes the referenced node of the NodePath from its
 |      //               current parent and attaches it to the referenced node
 |      //               of the indicated NodePath.  
 |      //
 |      //               If the destination NodePath is empty, this is the
 |      //               same thing as detach_node().
 |      //
 |      //               If the referenced node is already a child of the
 |      //               indicated NodePath (via some other instance), this
 |      //               operation fails and leaves the NodePath detached.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  reverseLs(...)
 |      C++ Interface:
 |      reverse_ls(const NodePath this)
 |      reverse_ls(const NodePath this, non-const ostream out)
 |      reverse_ls(const NodePath this, non-const ostream out, int indent_level)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::reverse_ls
 |      //       Access: Published
 |      //  Description: Lists the hierarchy at and above the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::reverse_ls
 |      //       Access: Published
 |      //  Description: Lists the hierarchy at and above the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  reverseLsNames(self)
 |      Walk up a tree and print out the path to the root
 |  
 |  reverse_ls(...)
 |      C++ Interface:
 |      reverse_ls(const NodePath this)
 |      reverse_ls(const NodePath this, non-const ostream out)
 |      reverse_ls(const NodePath this, non-const ostream out, int indent_level)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::reverse_ls
 |      //       Access: Published
 |      //  Description: Lists the hierarchy at and above the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::reverse_ls
 |      //       Access: Published
 |      //  Description: Lists the hierarchy at and above the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  rgbPanel(self, cb=None)
 |      #####################################################################
 |  
 |  scaleInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  select(self)
 |      #####################################################################
 |  
 |  setAllColorScale(...)
 |      C++ Interface:
 |      set_all_color_scale(non-const NodePath this, float scale)
 |      set_all_color_scale(non-const NodePath this, float scale, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_all_color_scale
 |      //       Access: Published
 |      //  Description: Scales all the color components of the object by the
 |      //               same amount, darkening the object, without (much)
 |      //               affecting alpha.  Note that any priority specified
 |      //               will also apply to the alpha scale.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setAlphaScale(...)
 |      C++ Interface:
 |      set_alpha_scale(non-const NodePath this, float scale)
 |      set_alpha_scale(non-const NodePath this, float scale, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_alpha_scale
 |      //       Access: Published
 |      //  Description: Sets the alpha scale component of the transform
 |      //               without (much) affecting the color scale.  Note that
 |      //               any priority specified will also apply to the color
 |      //               scale.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setAntialias(...)
 |      C++ Interface:
 |      set_antialias(non-const NodePath this, unsigned int mode)
 |      set_antialias(non-const NodePath this, unsigned int mode, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_antialias
 |      //       Access: Published
 |      //  Description: Specifies the antialiasing type that should be
 |      //               applied at this node and below.  See AntialiasAttrib.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setAttrib(...)
 |      C++ Interface:
 |      set_attrib(non-const NodePath this, const RenderAttrib attrib)
 |      set_attrib(non-const NodePath this, const RenderAttrib attrib, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_attrib
 |      //       Access: Published
 |      //  Description: Adds the indicated render attribute to the scene
 |      //               graph on this node.  This attribute will now apply to
 |      //               this node and everything below.  If there was already
 |      //               an attribute of the same type, it is replaced.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setAudioVolume(...)
 |      C++ Interface:
 |      set_audio_volume(non-const NodePath this, float volume)
 |      set_audio_volume(non-const NodePath this, float volume, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_audio_volume
 |      //       Access: Published
 |      //  Description: Sets the audio volume component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setAudioVolumeOff(...)
 |      C++ Interface:
 |      set_audio_volume_off(non-const NodePath this)
 |      set_audio_volume_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_audio_volume_off
 |      //       Access: Published
 |      //  Description: Disables any audio volume attribute inherited from
 |      //               above.  This is not the same thing as
 |      //               clear_audio_volume(), which undoes any previous
 |      //               set_audio_volume() operation on this node; rather,
 |      //               this actively disables any set_audio_volume() that
 |      //               might be inherited from a parent node.
 |      //
 |      //               It is legal to specify a new volume on the same
 |      //               node with a subsequent call to set_audio_volume();
 |      //               this new scale will apply to lower nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setBillboardAxis(...)
 |      C++ Interface:
 |      set_billboard_axis(non-const NodePath this)
 |      set_billboard_axis(non-const NodePath this, float offset)
 |      set_billboard_axis(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_axis
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in two dimensions around the up axis.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_axis
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in two dimensions around the up axis,
 |      //               towards a specified "camera" instead of to the
 |      //               viewing camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setBillboardPointEye(...)
 |      C++ Interface:
 |      set_billboard_point_eye(non-const NodePath this)
 |      set_billboard_point_eye(non-const NodePath this, float offset)
 |      set_billboard_point_eye(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_eye
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the top of the
 |      //               camera.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_eye
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the top of the
 |      //               camera, towards a specified "camera" instead of to
 |      //               the viewing camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setBillboardPointWorld(...)
 |      C++ Interface:
 |      set_billboard_point_world(non-const NodePath this)
 |      set_billboard_point_world(non-const NodePath this, float offset)
 |      set_billboard_point_world(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_world
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the sky.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_world
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the sky, towards a
 |      //               specified "camera" instead of to the viewing camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setBin(...)
 |      C++ Interface:
 |      set_bin(non-const NodePath this, string bin_name, int draw_order)
 |      set_bin(non-const NodePath this, string bin_name, int draw_order, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_bin
 |      //       Access: Published
 |      //  Description: Assigns the geometry at this level and below to the
 |      //               named rendering bin.  It is the user's responsibility
 |      //               to ensure that such a bin already exists, either via
 |      //               the cull-bin Configrc variable, or by explicitly
 |      //               creating a GeomBin of the appropriate type at
 |      //               runtime.
 |      //
 |      //               There are two default bins created when Panda is
 |      //               started: "default" and "fixed".  Normally, all
 |      //               geometry is assigned to "default" unless specified
 |      //               otherwise.  This bin renders opaque geometry in
 |      //               state-sorted order, followed by transparent geometry
 |      //               sorted back-to-front.  If any geometry is assigned to
 |      //               "fixed", this will be rendered following all the
 |      //               geometry in "default", in the order specified by
 |      //               draw_order for each piece of geometry so assigned.
 |      //
 |      //               The draw_order parameter is meaningful only for
 |      //               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
 |      //               bins ignore it.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setClipPlane(...)
 |      C++ Interface:
 |      set_clip_plane(non-const NodePath this, const NodePath clip_plane)
 |      set_clip_plane(non-const NodePath this, const NodePath clip_plane, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_clip_plane
 |      //       Access: Published
 |      //  Description: Adds the indicated clipping plane to the list of
 |      //               planes that apply to geometry at this node and below.
 |      //               The clipping plane itself, a PlaneNode, should be
 |      //               parented into the scene graph elsewhere, to represent
 |      //               the plane's position in space; but until
 |      //               set_clip_plane() is called it will clip no geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setClipPlaneOff(...)
 |      C++ Interface:
 |      set_clip_plane_off(non-const NodePath this)
 |      set_clip_plane_off(non-const NodePath this, const NodePath clip_plane)
 |      set_clip_plane_off(non-const NodePath this, int priority)
 |      set_clip_plane_off(non-const NodePath this, const NodePath clip_plane, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_clip_plane_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no clip_planes at all.  This is different
 |      //               from not specifying a clip_plane; rather, this
 |      //               specifically contradicts set_clip_plane() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_clip_plane() at a lower level).
 |      //
 |      //               If no clip_planes are in effect on a particular piece
 |      //               of geometry, that geometry is rendered without being
 |      //               clipped (other than by the viewing frustum).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_clip_plane_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               without being clipped by the indicated PlaneNode.
 |      //               This is different from not specifying the PlaneNode;
 |      //               rather, this specifically contradicts
 |      //               set_clip_plane() at a higher node level (or, with a
 |      //               priority, overrides a set_clip_plane() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setCollideMask(...)
 |      C++ Interface:
 |      set_collide_mask(non-const NodePath this, const BitMask new_mask)
 |      set_collide_mask(non-const NodePath this, const BitMask new_mask, const BitMask bits_to_change)
 |      set_collide_mask(non-const NodePath this, const BitMask new_mask, const BitMask bits_to_change, const TypeHandle node_type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_collide_mask
 |      //       Access: Published
 |      //  Description: Recursively applies the indicated CollideMask to the
 |      //               into_collide_masks for all nodes at this level and
 |      //               below.  If node_type is not TypeHandle::none(), then
 |      //               only nodes matching (or inheriting from) the
 |      //               indicated PandaNode subclass are modified.
 |      //
 |      //               The default is to change all bits, but if
 |      //               bits_to_change is not all bits on, then only the bits
 |      //               that are set in bits_to_change are modified, allowing
 |      //               this call to change only a subset of the bits in the
 |      //               subgraph.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setColor(...)
 |      C++ Interface:
 |      set_color(non-const NodePath this, const LVecBase4f color)
 |      set_color(non-const NodePath this, const LVecBase4f color, int priority)
 |      set_color(non-const NodePath this, float r, float g, float b)
 |      set_color(non-const NodePath this, float r, float g, float b, float a)
 |      set_color(non-const NodePath this, float r, float g, float b, float a, int priority)
 |      
 |      // Methods that affect appearance of geometry: color, texture, etc.
 |      // These affect the state at the bottom level only.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color
 |      //       Access: Published
 |      //  Description: Applies a scene-graph color to the referenced node.
 |      //               This color will apply to all geometry at this level
 |      //               and below (that does not specify a new color or a
 |      //               set_color_off()).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color
 |      //       Access: Published
 |      //  Description: Applies a scene-graph color to the referenced node.
 |      //               This color will apply to all geometry at this level
 |      //               and below (that does not specify a new color or a
 |      //               set_color_off()).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setColorOff(...)
 |      C++ Interface:
 |      set_color_off(non-const NodePath this)
 |      set_color_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using the geometry color.  This is normally the
 |      //               default, but it may be useful to use this to
 |      //               contradict set_color() at a higher node level (or,
 |      //               with a priority, to override a set_color() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setColorScale(...)
 |      C++ Interface:
 |      set_color_scale(non-const NodePath this, const LVecBase4f scale)
 |      set_color_scale(non-const NodePath this, const LVecBase4f scale, int priority)
 |      set_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa)
 |      set_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_scale
 |      //       Access: Published
 |      //  Description: Sets the color scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_scale
 |      //       Access: Published
 |      //  Description: Sets the color scale component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setColorScaleOff(...)
 |      C++ Interface:
 |      set_color_scale_off(non-const NodePath this)
 |      set_color_scale_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_scale_off
 |      //       Access: Published
 |      //  Description: Disables any color scale attribute inherited from
 |      //               above.  This is not the same thing as
 |      //               clear_color_scale(), which undoes any previous
 |      //               set_color_scale() operation on this node; rather,
 |      //               this actively disables any set_color_scale() that
 |      //               might be inherited from a parent node.  This also
 |      //               disables set_alpha_scale() at the same time.
 |      //
 |      //               It is legal to specify a new color scale on the same
 |      //               node with a subsequent call to set_color_scale() or
 |      //               set_alpha_scale(); this new scale will apply to lower
 |      //               geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setCompass(...)
 |      C++ Interface:
 |      set_compass(non-const NodePath this)
 |      set_compass(non-const NodePath this, const NodePath reference)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_compass
 |      //       Access: Published
 |      //  Description: Puts a compass effect on the node, so that it will
 |      //               retain a fixed rotation relative to the reference
 |      //               node (or render if the reference node is empty)
 |      //               regardless of the transforms above it.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setDepthOffset(...)
 |      C++ Interface:
 |      set_depth_offset(non-const NodePath this, int bias)
 |      set_depth_offset(non-const NodePath this, int bias, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_depth_offset
 |      //       Access: Published
 |      //  Description: This instructs the graphics driver to apply an
 |      //               offset or bias to the generated depth values for
 |      //               rendered polygons, before they are written to the
 |      //               depth buffer. This can be used to shift polygons
 |      //               forward slightly, to resolve depth conflicts, or
 |      //               self-shadowing artifacts on thin objects.
 |      //               The bias is always an integer number, and each
 |      //               integer increment represents the smallest possible
 |      //               increment in Z that is sufficient to completely
 |      //               resolve two coplanar polygons. Positive numbers
 |      //               are closer towards the camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setDepthTest(...)
 |      C++ Interface:
 |      set_depth_test(non-const NodePath this, bool depth_test)
 |      set_depth_test(non-const NodePath this, bool depth_test, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_depth_test
 |      //       Access: Published
 |      //  Description: Specifically sets or disables the testing of the
 |      //               depth buffer on this particular node.  This is
 |      //               normally on in the 3-d scene graph and off in the 2-d
 |      //               scene graph; it should be on for rendering most 3-d
 |      //               objects properly.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setDepthWrite(...)
 |      C++ Interface:
 |      set_depth_write(non-const NodePath this, bool depth_write)
 |      set_depth_write(non-const NodePath this, bool depth_write, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_depth_write
 |      //       Access: Published
 |      //  Description: Specifically sets or disables the writing to the
 |      //               depth buffer on this particular node.  This is
 |      //               normally on in the 3-d scene graph and off in the 2-d
 |      //               scene graph; it should be on for rendering most 3-d
 |      //               objects properly.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setEffect(...)
 |      C++ Interface:
 |      set_effect(non-const NodePath this, const RenderEffect effect)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_effect
 |      //       Access: Published
 |      //  Description: Adds the indicated render effect to the scene
 |      //               graph on this node.  If there was already an effect
 |      //               of the same type, it is replaced.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setEffects(...)
 |      C++ Interface:
 |      set_effects(non-const NodePath this, const RenderEffects effects)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_effects
 |      //       Access: Published
 |      //  Description: Sets the complete RenderEffects that will be applied
 |      //               this node.  This completely replaces whatever has
 |      //               been set on this node via repeated calls to
 |      //               set_attrib().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setFluidPos(...)
 |      C++ Interface:
 |      set_fluid_pos(non-const NodePath this, const LVecBase3f pos)
 |      set_fluid_pos(non-const NodePath this, const NodePath other, const LVecBase3f pos)
 |      set_fluid_pos(non-const NodePath this, float x, float y, float z)
 |      set_fluid_pos(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component, without changing the
 |      //               "previous" position, so that the collision system
 |      //               will see the node as moving fluidly from its previous
 |      //               position to its new position.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component, without changing the
 |      //               "previous" position, so that the collision system
 |      //               will see the node as moving fluidly from its previous
 |      //               position to its new position.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component, without changing the
 |      //               "previous" position, so that the collision system
 |      //               will see the node as moving fluidly from its previous
 |      //               position to its new position.
 |      //     See Also: NodePath::set_pos
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setFluidX(...)
 |      C++ Interface:
 |      set_fluid_x(non-const NodePath this, float x)
 |      set_fluid_x(non-const NodePath this, const NodePath other, float x)
 |  
 |  setFluidY(...)
 |      C++ Interface:
 |      set_fluid_y(non-const NodePath this, float y)
 |      set_fluid_y(non-const NodePath this, const NodePath other, float y)
 |  
 |  setFluidZ(...)
 |      C++ Interface:
 |      set_fluid_z(non-const NodePath this, float z)
 |      set_fluid_z(non-const NodePath this, const NodePath other, float z)
 |  
 |  setFog(...)
 |      C++ Interface:
 |      set_fog(non-const NodePath this, non-const Fog fog)
 |      set_fog(non-const NodePath this, non-const Fog fog, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fog
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using the indicated fog.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setFogOff(...)
 |      C++ Interface:
 |      set_fog_off(non-const NodePath this)
 |      set_fog_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fog_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no fog.  This is normally the default, but
 |      //               it may be useful to use this to contradict
 |      //               set_fog() at a higher node level (or, with a
 |      //               priority, to override a set_fog() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setH(...)
 |      C++ Interface:
 |      set_h(non-const NodePath this, float h)
 |      set_h(non-const NodePath this, const NodePath other, float h)
 |  
 |  setHpr(...)
 |      C++ Interface:
 |      set_hpr(non-const NodePath this, const LVecBase3f hpr)
 |      set_hpr(non-const NodePath this, const NodePath other, const LVecBase3f hpr)
 |      set_hpr(non-const NodePath this, float h, float p, float r)
 |      set_hpr(non-const NodePath this, const NodePath other, float h, float p, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               leaving translation and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               leaving translation and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setHprScale(...)
 |      C++ Interface:
 |      set_hpr_scale(non-const NodePath this, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_hpr_scale(non-const NodePath this, const NodePath other, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_hpr_scale(non-const NodePath this, float h, float p, float r, float sx, float sy, float sz)
 |      set_hpr_scale(non-const NodePath this, const NodePath other, float h, float p, float r, float sx, float sy, float sz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.  This, or
 |      //               set_pos_hpr_scale, is the preferred way to update a
 |      //               transform when both hpr and scale are to be changed.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.  This, or
 |      //               set_pos_hpr_scale, is the preferred way to update a
 |      //               transform when both hpr and scale are to be changed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setInstanceCount(...)
 |      C++ Interface:
 |      set_instance_count(non-const NodePath this, int instance_count)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_instance_count
 |      //       Access: Published
 |      //  Description: Sets the geometry instance count, or 0 if
 |      //               geometry instancing should be disabled. Do not
 |      //               confuse with instanceTo which only applies to
 |      //               animation instancing.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setLight(...)
 |      C++ Interface:
 |      set_light(non-const NodePath this, const NodePath light)
 |      set_light(non-const NodePath this, const NodePath light, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_light
 |      //       Access: Published
 |      //  Description: Adds the indicated Light or PolylightNode to the list
 |      //               of lights that illuminate geometry at this node and
 |      //               below.  The light itself should be parented into the
 |      //               scene graph elsewhere, to represent the light's
 |      //               position in space; but until set_light() is called it
 |      //               will illuminate no geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setLightOff(...)
 |      C++ Interface:
 |      set_light_off(non-const NodePath this)
 |      set_light_off(non-const NodePath this, const NodePath light)
 |      set_light_off(non-const NodePath this, int priority)
 |      set_light_off(non-const NodePath this, const NodePath light, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_light_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no lights at all.  This is different
 |      //               from not specifying a light; rather, this
 |      //               specifically contradicts set_light() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_light() at a lower level).
 |      //
 |      //               If no lights are in effect on a particular piece of
 |      //               geometry, that geometry is rendered with lighting
 |      //               disabled.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_light_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               without using the indicated Light.  This is different
 |      //               from not specifying the Light; rather, this
 |      //               specifically contradicts set_light() at a higher node
 |      //               level (or, with a priority, overrides a set_light()
 |      //               at a lower level).
 |      //
 |      //               This interface does not support PolylightNodes, which
 |      //               cannot be turned off at a lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setMat(...)
 |      C++ Interface:
 |      set_mat(non-const NodePath this, const LMatrix4f mat)
 |      set_mat(non-const NodePath this, const NodePath other, const LMatrix4f mat)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_mat
 |      //       Access: Published
 |      //  Description: Directly sets an arbitrary 4x4 transform matrix.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_mat
 |      //       Access: Published
 |      //  Description: Converts the indicated matrix from the other's
 |      //               coordinate space to the local coordinate space, and
 |      //               applies it to the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setMaterial(...)
 |      C++ Interface:
 |      set_material(non-const NodePath this, non-const Material tex)
 |      set_material(non-const NodePath this, non-const Material tex, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_material
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using the indicated material.
 |      //
 |      //               Previously, this operation made a copy of the
 |      //               material structure, but nowadays it assigns the
 |      //               pointer directly.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setMaterialOff(...)
 |      C++ Interface:
 |      set_material_off(non-const NodePath this)
 |      set_material_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_material_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no material.  This is normally the default, but
 |      //               it may be useful to use this to contradict
 |      //               set_material() at a higher node level (or, with a
 |      //               priority, to override a set_material() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setNormalMap(...)
 |      C++ Interface:
 |      set_normal_map(non-const NodePath this, non-const Texture normal_map)
 |      set_normal_map(non-const NodePath this, non-const Texture normal_map, string texcoord_name)
 |      set_normal_map(non-const NodePath this, non-const Texture normal_map, string texcoord_name, bool preserve_color)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_normal_map
 |      //       Access: Published
 |      //  Description: A convenience function to set up a normal map on this
 |      //               geometry.  This uses the single highest-priority
 |      //               light on the object only.  It also requires
 |      //               multitexture, and consumes at least two texture
 |      //               stages, in addition to what may already be in use.
 |      //
 |      //               The normal_map parameter is the texture that contains
 |      //               the normal map information (with a 3-d delta vector
 |      //               encoded into the r,g,b of each texel).  texcoord_name is
 |      //               the name of the texture coordinate set that contains
 |      //               the tangent and binormal we wish to use.  If
 |      //               preserve_color is true, then one additional texture
 |      //               stage is consumed to blend in the geometry's original
 |      //               vertex color.
 |      //
 |      //               Only one normal map may be in effect through this
 |      //               interface at any given time.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setOccluder(...)
 |      C++ Interface:
 |      set_occluder(non-const NodePath this, const NodePath occluder)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_occluder
 |      //       Access: Published
 |      //  Description: Adds the indicated occluder to the list of
 |      //               occluders that apply to geometry at this node and below.
 |      //               The occluder itself, an OccluderNode, should be
 |      //               parented into the scene graph elsewhere, to represent
 |      //               the occluder's position in space; but until
 |      //               set_occluder() is called it will clip no geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setP(...)
 |      C++ Interface:
 |      set_p(non-const NodePath this, float p)
 |      set_p(non-const NodePath this, const NodePath other, float p)
 |  
 |  setPos(...)
 |      C++ Interface:
 |      set_pos(non-const NodePath this, const LVecBase3f pos)
 |      set_pos(non-const NodePath this, const NodePath other, const LVecBase3f pos)
 |      set_pos(non-const NodePath this, float x, float y, float z)
 |      set_pos(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      // Methods that get and set the matrix transform: pos, hpr, scale,
 |      // in the local coordinate system.
 |      
 |      // Methods that get and set the matrix transforms relative to some
 |      // other node in the scene graph.  These perform an implicit wrt().
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               leaving rotation and scale untouched.  This also
 |      //               resets the node's "previous" position, so that the
 |      //               collision system will see the node as having suddenly
 |      //               appeared in the new position, without passing any
 |      //               points in between.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               leaving rotation and scale untouched.  This also
 |      //               resets the node's "previous" position, so that the
 |      //               collision system will see the node as having suddenly
 |      //               appeared in the new position, without passing any
 |      //               points in between.
 |      //     See Also: NodePath::set_fluid_pos
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPosHpr(...)
 |      C++ Interface:
 |      set_pos_hpr(non-const NodePath this, const LVecBase3f pos, const LVecBase3f hpr)
 |      set_pos_hpr(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LVecBase3f hpr)
 |      set_pos_hpr(non-const NodePath this, float x, float y, float z, float h, float p, float r)
 |      set_pos_hpr(non-const NodePath this, const NodePath other, float x, float y, float z, float h, float p, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, leaving scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, leaving scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPosHprScale(...)
 |      C++ Interface:
 |      set_pos_hpr_scale(non-const NodePath this, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_pos_hpr_scale(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_pos_hpr_scale(non-const NodePath this, float x, float y, float z, float h, float p, float r, float sx, float sy, float sz)
 |      set_pos_hpr_scale(non-const NodePath this, const NodePath other, float x, float y, float z, float h, float p, float r, float sx, float sy, float sz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components, relative
 |      //               to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Replaces the translation, rotation, and scale
 |      //               components, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components, relative
 |      //               to the other node, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPosHprScaleShear(...)
 |      C++ Interface:
 |      set_pos_hpr_scale_shear(non-const NodePath this, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale, const LVecBase3f shear)
 |      set_pos_hpr_scale_shear(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale, const LVecBase3f shear)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPosQuat(...)
 |      C++ Interface:
 |      set_pos_quat(non-const NodePath this, const LVecBase3f pos, const LQuaternionf quat)
 |      set_pos_quat(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LQuaternionf quat)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, leaving scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPosQuatScale(...)
 |      C++ Interface:
 |      set_pos_quat_scale(non-const NodePath this, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale)
 |      set_pos_quat_scale(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale
 |      //       Access: Published
 |      //  Description: Replaces the translation, rotation, and scale
 |      //               components, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components, relative
 |      //               to the other node, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPosQuatScaleShear(...)
 |      C++ Interface:
 |      set_pos_quat_scale_shear(non-const NodePath this, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale, const LVecBase3f shear)
 |      set_pos_quat_scale_shear(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale, const LVecBase3f shear)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPrevTransform(...)
 |      C++ Interface:
 |      set_prev_transform(non-const NodePath this, const TransformState transform)
 |      set_prev_transform(non-const NodePath this, const TransformState transform, non-const Thread current_thread)
 |      set_prev_transform(non-const NodePath this, const NodePath other, const TransformState transform)
 |      set_prev_transform(non-const NodePath this, const NodePath other, const TransformState transform, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_prev_transform
 |      //       Access: Published
 |      //  Description: Sets the transform that represents this node's
 |      //               "previous" position, one frame ago, for the purposes
 |      //               of detecting motion for accurate collision
 |      //               calculations.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_prev_transform
 |      //       Access: Published
 |      //  Description: Sets the "previous" transform object on this node,
 |      //               relative to the other node.  This computes a new
 |      //               transform object that will have the indicated value
 |      //               when seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setPythonTag(...)
 |      C++ Interface:
 |      set_python_tag(non-const NodePath this, string key, any value)
 |  
 |  setQuat(...)
 |      C++ Interface:
 |      set_quat(non-const NodePath this, const LQuaternionf quat)
 |      set_quat(non-const NodePath this, const NodePath other, const LQuaternionf quat)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               leaving translation and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setQuatScale(...)
 |      C++ Interface:
 |      set_quat_scale(non-const NodePath this, const LQuaternionf quat, const LVecBase3f scale)
 |      set_quat_scale(non-const NodePath this, const NodePath other, const LQuaternionf quat, const LVecBase3f scale)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.  This, or
 |      //               set_pos_quat_scale, is the preferred way to update a
 |      //               transform when both quat and scale are to be changed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setR(...)
 |      C++ Interface:
 |      set_r(non-const NodePath this, float r)
 |      set_r(non-const NodePath this, const NodePath other, float r)
 |  
 |  setRenderMode(...)
 |      C++ Interface:
 |      set_render_mode(non-const NodePath this, int mode, float thickness)
 |      set_render_mode(non-const NodePath this, int mode, float thickness, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode
 |      //       Access: Published
 |      //  Description: Sets up the geometry at this level and below (unless
 |      //               overridden) to render in the specified mode and with
 |      //               the indicated line and/or point thickness.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setRenderModeFilled(...)
 |      C++ Interface:
 |      set_render_mode_filled(non-const NodePath this)
 |      set_render_mode_filled(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_filled
 |      //       Access: Published
 |      //  Description: Sets up the geometry at this level and below (unless
 |      //               overridden) to render in filled (i.e. not wireframe)
 |      //               mode.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setRenderModePerspective(...)
 |      C++ Interface:
 |      set_render_mode_perspective(non-const NodePath this, bool perspective)
 |      set_render_mode_perspective(non-const NodePath this, bool perspective, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_perspective
 |      //       Access: Published
 |      //  Description: Sets up the point geometry at this level and below to
 |      //               render as perspective sprites (that is, billboarded
 |      //               quads).  The thickness, as specified with
 |      //               set_render_mode_thickness(), is the width of each
 |      //               point in 3-D units, unless it is overridden on a
 |      //               per-vertex basis.  This does not affect geometry
 |      //               other than points.
 |      //
 |      //               If you want the quads to be individually textured,
 |      //               you should also set a TexGenAttrib::M_point_sprite on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setRenderModeThickness(...)
 |      C++ Interface:
 |      set_render_mode_thickness(non-const NodePath this, float thickness)
 |      set_render_mode_thickness(non-const NodePath this, float thickness, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_thickness
 |      //       Access: Published
 |      //  Description: Sets up the point geometry at this level and below to
 |      //               render as thick points (that is, billboarded
 |      //               quads).  The thickness is in pixels, unless
 |      //               set_render_mode_perspective is also true, in which
 |      //               case it is in 3-D units.
 |      //
 |      //               If you want the quads to be individually textured,
 |      //               you should also set a TexGenAttrib::M_point_sprite on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setRenderModeWireframe(...)
 |      C++ Interface:
 |      set_render_mode_wireframe(non-const NodePath this)
 |      set_render_mode_wireframe(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_wireframe
 |      //       Access: Published
 |      //  Description: Sets up the geometry at this level and below (unless
 |      //               overridden) to render in wireframe mode.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setSa(...)
 |      C++ Interface:
 |      set_sa(non-const NodePath this, float sa)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sa
 |      //       Access: Published
 |      //  Description: Sets the alpha scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setSb(...)
 |      C++ Interface:
 |      set_sb(non-const NodePath this, float sb)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sb
 |      //       Access: Published
 |      //  Description: Sets the blue scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setScale(...)
 |      C++ Interface:
 |      set_scale(non-const NodePath this, const LVecBase3f scale)
 |      set_scale(non-const NodePath this, float scale)
 |      set_scale(non-const NodePath this, const NodePath other, const LVecBase3f scale)
 |      set_scale(non-const NodePath this, const NodePath other, float scale)
 |      set_scale(non-const NodePath this, float sx, float sy, float sz)
 |      set_scale(non-const NodePath this, const NodePath other, float sx, float sy, float sz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setScissor(...)
 |      C++ Interface:
 |      set_scissor(non-const NodePath this, const LPoint3f a, const LPoint3f b)
 |      set_scissor(non-const NodePath this, const NodePath other, const LPoint3f a, const LPoint3f b)
 |      set_scissor(non-const NodePath this, const LPoint3f a, const LPoint3f b, const LPoint3f c, const LPoint3f d)
 |      set_scissor(non-const NodePath this, float left, float right, float bottom, float top)
 |      set_scissor(non-const NodePath this, const NodePath other, const LPoint3f a, const LPoint3f b, const LPoint3f c, const LPoint3f d)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The four coordinates are
 |      //               understood to define a rectangle in screen space.
 |      //               These numbers are relative to the current
 |      //               DisplayRegion, where (0,0) is the lower-left corner
 |      //               of the DisplayRegion, and (1,1) is the upper-right
 |      //               corner.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The two points are understood
 |      //               to be relative to this node.  When these points are
 |      //               projected into screen space, they define the
 |      //               diagonally-opposite points that determine the scissor
 |      //               region.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The four points are understood
 |      //               to be relative to this node.  When these points are
 |      //               projected into screen space, they define the
 |      //               bounding volume of the scissor region (the scissor
 |      //               region is the smallest onscreen rectangle that
 |      //               encloses all four points).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The two points are understood
 |      //               to be relative to the indicated other node.  When
 |      //               these points are projected into screen space, they
 |      //               define the diagonally-opposite points that determine
 |      //               the scissor region.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The four points are understood
 |      //               to be relative to the indicated other node.  When
 |      //               these points are projected into screen space, they
 |      //               define the bounding volume of the scissor region (the
 |      //               scissor region is the smallest onscreen rectangle
 |      //               that encloses all four points).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setSg(...)
 |      C++ Interface:
 |      set_sg(non-const NodePath this, float sg)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sg
 |      //       Access: Published
 |      //  Description: Sets the alpha scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setShader(...)
 |      C++ Interface:
 |      set_shader(non-const NodePath this, const Shader sha)
 |      set_shader(non-const NodePath this, const Shader sha, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setShaderAuto(...)
 |      C++ Interface:
 |      set_shader_auto(non-const NodePath this)
 |      set_shader_auto(non-const NodePath this, const BitMask shader_switch)
 |      set_shader_auto(non-const NodePath this, int priority)
 |      set_shader_auto(non-const NodePath this, const BitMask shader_switch, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_auto
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_auto
 |      //       Access: Published
 |      //  Description: overloaded for auto shader customization
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setShaderInput(...)
 |      C++ Interface:
 |      set_shader_input(non-const NodePath this, const ShaderInput inp)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix3f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix4f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2i v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3i v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4i v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const NodePath np)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, non-const Texture tex)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, non-const Texture tex)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix3f v)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix4f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2i v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3i v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4i v)
 |      set_shader_input(non-const NodePath this, string id, const NodePath np)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1)
 |      set_shader_input(non-const NodePath this, string id, float n1)
 |      set_shader_input(non-const NodePath this, string id, int n1)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix3f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix4f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2i v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3i v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4i v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const NodePath np, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, non-const Texture tex, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, non-const Texture tex, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix3f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix4f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2i v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3i v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4i v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const NodePath np, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2, float n3)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2, int n3)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2, float n3)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2, int n3)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2, float n3, float n4)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2, int n3, int n4)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2, float n3, float n4)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2, int n3, int n4)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2, float n3, float n4, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2, int n3, int n4, int priority)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2, float n3, float n4, int priority)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2, int n3, int n4, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description:
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setShaderOff(...)
 |      C++ Interface:
 |      set_shader_off(non-const NodePath this)
 |      set_shader_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_off
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setShear(...)
 |      C++ Interface:
 |      set_shear(non-const NodePath this, const LVecBase3f shear)
 |      set_shear(non-const NodePath this, const NodePath other, const LVecBase3f shear)
 |      set_shear(non-const NodePath this, float shxy, float shxz, float shyz)
 |      set_shear(non-const NodePath this, const NodePath other, float shxy, float shxz, float shyz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               leaving translation, rotation, and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setShxy(...)
 |      C++ Interface:
 |      set_shxy(non-const NodePath this, float shxy)
 |      set_shxy(non-const NodePath this, const NodePath other, float shxy)
 |  
 |  setShxz(...)
 |      C++ Interface:
 |      set_shxz(non-const NodePath this, float shxz)
 |      set_shxz(non-const NodePath this, const NodePath other, float shxz)
 |  
 |  setShyz(...)
 |      C++ Interface:
 |      set_shyz(non-const NodePath this, float shyz)
 |      set_shyz(non-const NodePath this, const NodePath other, float shyz)
 |  
 |  setSr(...)
 |      C++ Interface:
 |      set_sr(non-const NodePath this, float sr)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sr
 |      //       Access: Published
 |      //  Description: Sets the red scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setState(...)
 |      C++ Interface:
 |      set_state(non-const NodePath this, const RenderState state)
 |      set_state(non-const NodePath this, const RenderState state, non-const Thread current_thread)
 |      set_state(non-const NodePath this, const NodePath other, const RenderState state)
 |      set_state(non-const NodePath this, const NodePath other, const RenderState state, non-const Thread current_thread)
 |      
 |      // Aggregate transform and state information.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_state
 |      //       Access: Published
 |      //  Description: Changes the complete state object on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_state
 |      //       Access: Published
 |      //  Description: Sets the state object on this node, relative to
 |      //               the other node.  This computes a new state object
 |      //               that will have the indicated value when seen from the
 |      //               other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setSx(...)
 |      C++ Interface:
 |      set_sx(non-const NodePath this, float sx)
 |      set_sx(non-const NodePath this, const NodePath other, float sx)
 |  
 |  setSy(...)
 |      C++ Interface:
 |      set_sy(non-const NodePath this, float sy)
 |      set_sy(non-const NodePath this, const NodePath other, float sy)
 |  
 |  setSz(...)
 |      C++ Interface:
 |      set_sz(non-const NodePath this, float sz)
 |      set_sz(non-const NodePath this, const NodePath other, float sz)
 |  
 |  setTag(...)
 |      C++ Interface:
 |      set_tag(non-const NodePath this, string key, string value)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tag
 |      //       Access: Published
 |      //  Description: Associates a user-defined value with a user-defined
 |      //               key which is stored on the node.  This value has no
 |      //               meaning to Panda; but it is stored indefinitely on
 |      //               the node until it is requested again.
 |      //
 |      //               Each unique key stores a different string value.
 |      //               There is no effective limit on the number of
 |      //               different keys that may be stored or on the length of
 |      //               any one key's value.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexGen(...)
 |      C++ Interface:
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, const LPoint3f constant_value)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, int priority)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, string source_name, const NodePath light)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, const LPoint3f constant_value, int priority)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, string source_name, const NodePath light, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_gen
 |      //       Access: Published
 |      //  Description: Enables automatic texture coordinate generation for
 |      //               the indicated texture stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_gen
 |      //       Access: Published
 |      //  Description: Enables automatic texture coordinate generation for
 |      //               the indicated texture stage.  This version of this
 |      //               method is useful when setting M_light_vector, which
 |      //               requires the name of the texture coordinate set that
 |      //               supplies the tangent and binormal, as well as the
 |      //               specific light to generate coordinates for.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_gen
 |      //       Access: Published
 |      //  Description: Enables automatic texture coordinate generation for
 |      //               the indicated texture stage.  This version of this
 |      //               method is useful when setting M_constant, which
 |      //               requires a constant texture coordinate value.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexHpr(...)
 |      C++ Interface:
 |      set_tex_hpr(non-const NodePath this, non-const TextureStage stage, const LVecBase3f hpr)
 |      set_tex_hpr(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase3f hpr)
 |      set_tex_hpr(non-const NodePath this, non-const TextureStage stage, float h, float p, float r)
 |      set_tex_hpr(non-const NodePath this, const NodePath other, non-const TextureStage stage, float h, float p, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexOffset(...)
 |      C++ Interface:
 |      set_tex_offset(non-const NodePath this, non-const TextureStage stage, const LVecBase2f uv)
 |      set_tex_offset(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase2f uv)
 |      set_tex_offset(non-const NodePath this, non-const TextureStage stage, float u, float v)
 |      set_tex_offset(non-const NodePath this, const NodePath other, non-const TextureStage stage, float u, float v)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexPos(...)
 |      C++ Interface:
 |      set_tex_pos(non-const NodePath this, non-const TextureStage stage, const LVecBase3f uvw)
 |      set_tex_pos(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase3f uvw)
 |      set_tex_pos(non-const NodePath this, non-const TextureStage stage, float u, float v, float w)
 |      set_tex_pos(non-const NodePath this, const NodePath other, non-const TextureStage stage, float u, float v, float w)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexProjector(...)
 |      C++ Interface:
 |      set_tex_projector(non-const NodePath this, non-const TextureStage stage, const NodePath from, const NodePath to)
 |      set_tex_projector(non-const NodePath this, non-const TextureStage stage, const NodePath from, const NodePath to, int lens_index)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_projector
 |      //       Access: Published
 |      //  Description: Establishes a TexProjectorEffect on this node, which
 |      //               can be used to establish projective texturing (but
 |      //               see also the NodePath::project_texture() convenience
 |      //               function), or it can be used to bind this node's
 |      //               texture transform to particular node's position in
 |      //               space, allowing a LerpInterval (for instance) to
 |      //               adjust this node's texture coordinates.
 |      //
 |      //               If to is a LensNode, then the fourth parameter,
 |      //               lens_index, can be provided to select a particular
 |      //               lens to apply.  Otherwise lens_index is not used.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexRotate(...)
 |      C++ Interface:
 |      set_tex_rotate(non-const NodePath this, non-const TextureStage stage, float r)
 |      set_tex_rotate(non-const NodePath this, const NodePath other, non-const TextureStage stage, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_rotate
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, clockwise in degrees, to UV's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_rotate
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, clockwise in degrees, to UV's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexScale(...)
 |      C++ Interface:
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, const LVecBase2f scale)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, const LVecBase3f scale)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, float scale)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase2f scale)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase3f scale)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, float scale)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, float su, float sv)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, float su, float sv)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, float su, float sv, float sw)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, float su, float sv, float sw)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 2-d or 3-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for 2-d or 3-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexTransform(...)
 |      C++ Interface:
 |      set_tex_transform(non-const NodePath this, non-const TextureStage stage, const TransformState transform)
 |      set_tex_transform(non-const NodePath this, const NodePath other, non-const TextureStage stage, const TransformState transform)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_transform
 |      //       Access: Published
 |      //  Description: Sets the texture matrix on the current node to the
 |      //               indicated transform for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_transform
 |      //       Access: Published
 |      //  Description: Sets the texture matrix on the current node to the
 |      //               indicated transform for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTexture(...)
 |      C++ Interface:
 |      set_texture(non-const NodePath this, non-const Texture tex)
 |      set_texture(non-const NodePath this, non-const TextureStage stage, non-const Texture tex)
 |      set_texture(non-const NodePath this, non-const Texture tex, int priority)
 |      set_texture(non-const NodePath this, non-const TextureStage stage, non-const Texture tex, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture
 |      //       Access: Published
 |      //  Description: Adds the indicated texture to the list of textures
 |      //               that will be rendered on the default texture stage.
 |      //
 |      //               This is the convenience single-texture variant of
 |      //               this method; it is now superceded by set_texture()
 |      //               that accepts a stage and texture.  You may use this
 |      //               method if you just want to adjust the default stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture
 |      //       Access: Published
 |      //  Description: Adds the indicated texture to the list of textures
 |      //               that will be rendered on the indicated multitexture
 |      //               stage.  If there are multiple texture stages
 |      //               specified (possibly on multiple different nodes at
 |      //               different levels), they will all be applied to
 |      //               geometry together, according to the stage
 |      //               specification set up in the TextureStage object.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTextureOff(...)
 |      C++ Interface:
 |      set_texture_off(non-const NodePath this)
 |      set_texture_off(non-const NodePath this, non-const TextureStage stage)
 |      set_texture_off(non-const NodePath this, int priority)
 |      set_texture_off(non-const NodePath this, non-const TextureStage stage, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no texture, on any stage.  This is different
 |      //               from not specifying a texture; rather, this
 |      //               specifically contradicts set_texture() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_texture() at a lower level).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no texture, on the indicated stage.  This is
 |      //               different from not specifying a texture; rather, this
 |      //               specifically contradicts set_texture() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_texture() at a lower level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTransform(...)
 |      C++ Interface:
 |      set_transform(non-const NodePath this, const TransformState transform)
 |      set_transform(non-const NodePath this, const TransformState transform, non-const Thread current_thread)
 |      set_transform(non-const NodePath this, const NodePath other, const TransformState transform)
 |      set_transform(non-const NodePath this, const NodePath other, const TransformState transform, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_transform
 |      //       Access: Published
 |      //  Description: Changes the complete transform object on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_transform
 |      //       Access: Published
 |      //  Description: Sets the transform object on this node, relative to
 |      //               the other node.  This computes a new transform object
 |      //               that will have the indicated value when seen from the
 |      //               other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTransparency(...)
 |      C++ Interface:
 |      set_transparency(non-const NodePath this, int mode)
 |      set_transparency(non-const NodePath this, int mode, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_transparency
 |      //       Access: Published
 |      //  Description: Specifically sets or disables transparent rendering
 |      //               mode on this particular node.  If no other nodes
 |      //               override, this will cause items with a non-1 value
 |      //               for alpha color to be rendered partially transparent.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setTwoSided(...)
 |      C++ Interface:
 |      set_two_sided(non-const NodePath this, bool two_sided)
 |      set_two_sided(non-const NodePath this, bool two_sided, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_two_sided
 |      //       Access: Published
 |      //  Description: Specifically sets or disables two-sided rendering
 |      //               mode on this particular node.  If no other nodes
 |      //               override, this will cause backfacing polygons to be
 |      //               drawn (in two-sided mode, true) or culled (in
 |      //               one-sided mode, false).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setX(...)
 |      C++ Interface:
 |      set_x(non-const NodePath this, float x)
 |      set_x(non-const NodePath this, const NodePath other, float x)
 |  
 |  setY(...)
 |      C++ Interface:
 |      set_y(non-const NodePath this, float y)
 |      set_y(non-const NodePath this, const NodePath other, float y)
 |  
 |  setZ(...)
 |      C++ Interface:
 |      set_z(non-const NodePath this, float z)
 |      set_z(non-const NodePath this, const NodePath other, float z)
 |  
 |  set_all_color_scale(...)
 |      C++ Interface:
 |      set_all_color_scale(non-const NodePath this, float scale)
 |      set_all_color_scale(non-const NodePath this, float scale, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_all_color_scale
 |      //       Access: Published
 |      //  Description: Scales all the color components of the object by the
 |      //               same amount, darkening the object, without (much)
 |      //               affecting alpha.  Note that any priority specified
 |      //               will also apply to the alpha scale.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_alpha_scale(...)
 |      C++ Interface:
 |      set_alpha_scale(non-const NodePath this, float scale)
 |      set_alpha_scale(non-const NodePath this, float scale, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_alpha_scale
 |      //       Access: Published
 |      //  Description: Sets the alpha scale component of the transform
 |      //               without (much) affecting the color scale.  Note that
 |      //               any priority specified will also apply to the color
 |      //               scale.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_antialias(...)
 |      C++ Interface:
 |      set_antialias(non-const NodePath this, unsigned int mode)
 |      set_antialias(non-const NodePath this, unsigned int mode, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_antialias
 |      //       Access: Published
 |      //  Description: Specifies the antialiasing type that should be
 |      //               applied at this node and below.  See AntialiasAttrib.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_attrib(...)
 |      C++ Interface:
 |      set_attrib(non-const NodePath this, const RenderAttrib attrib)
 |      set_attrib(non-const NodePath this, const RenderAttrib attrib, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_attrib
 |      //       Access: Published
 |      //  Description: Adds the indicated render attribute to the scene
 |      //               graph on this node.  This attribute will now apply to
 |      //               this node and everything below.  If there was already
 |      //               an attribute of the same type, it is replaced.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_audio_volume(...)
 |      C++ Interface:
 |      set_audio_volume(non-const NodePath this, float volume)
 |      set_audio_volume(non-const NodePath this, float volume, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_audio_volume
 |      //       Access: Published
 |      //  Description: Sets the audio volume component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_audio_volume_off(...)
 |      C++ Interface:
 |      set_audio_volume_off(non-const NodePath this)
 |      set_audio_volume_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_audio_volume_off
 |      //       Access: Published
 |      //  Description: Disables any audio volume attribute inherited from
 |      //               above.  This is not the same thing as
 |      //               clear_audio_volume(), which undoes any previous
 |      //               set_audio_volume() operation on this node; rather,
 |      //               this actively disables any set_audio_volume() that
 |      //               might be inherited from a parent node.
 |      //
 |      //               It is legal to specify a new volume on the same
 |      //               node with a subsequent call to set_audio_volume();
 |      //               this new scale will apply to lower nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_billboard_axis(...)
 |      C++ Interface:
 |      set_billboard_axis(non-const NodePath this)
 |      set_billboard_axis(non-const NodePath this, float offset)
 |      set_billboard_axis(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_axis
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in two dimensions around the up axis.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_axis
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in two dimensions around the up axis,
 |      //               towards a specified "camera" instead of to the
 |      //               viewing camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_billboard_point_eye(...)
 |      C++ Interface:
 |      set_billboard_point_eye(non-const NodePath this)
 |      set_billboard_point_eye(non-const NodePath this, float offset)
 |      set_billboard_point_eye(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_eye
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the top of the
 |      //               camera.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_eye
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the top of the
 |      //               camera, towards a specified "camera" instead of to
 |      //               the viewing camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_billboard_point_world(...)
 |      C++ Interface:
 |      set_billboard_point_world(non-const NodePath this)
 |      set_billboard_point_world(non-const NodePath this, float offset)
 |      set_billboard_point_world(non-const NodePath this, const NodePath camera, float offset)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_world
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the sky.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_billboard_point_world
 |      //       Access: Published
 |      //  Description: Puts a billboard transition on the node such that it
 |      //               will rotate in three dimensions about the origin,
 |      //               keeping its up vector oriented to the sky, towards a
 |      //               specified "camera" instead of to the viewing camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_bin(...)
 |      C++ Interface:
 |      set_bin(non-const NodePath this, string bin_name, int draw_order)
 |      set_bin(non-const NodePath this, string bin_name, int draw_order, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_bin
 |      //       Access: Published
 |      //  Description: Assigns the geometry at this level and below to the
 |      //               named rendering bin.  It is the user's responsibility
 |      //               to ensure that such a bin already exists, either via
 |      //               the cull-bin Configrc variable, or by explicitly
 |      //               creating a GeomBin of the appropriate type at
 |      //               runtime.
 |      //
 |      //               There are two default bins created when Panda is
 |      //               started: "default" and "fixed".  Normally, all
 |      //               geometry is assigned to "default" unless specified
 |      //               otherwise.  This bin renders opaque geometry in
 |      //               state-sorted order, followed by transparent geometry
 |      //               sorted back-to-front.  If any geometry is assigned to
 |      //               "fixed", this will be rendered following all the
 |      //               geometry in "default", in the order specified by
 |      //               draw_order for each piece of geometry so assigned.
 |      //
 |      //               The draw_order parameter is meaningful only for
 |      //               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
 |      //               bins ignore it.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_clip_plane(...)
 |      C++ Interface:
 |      set_clip_plane(non-const NodePath this, const NodePath clip_plane)
 |      set_clip_plane(non-const NodePath this, const NodePath clip_plane, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_clip_plane
 |      //       Access: Published
 |      //  Description: Adds the indicated clipping plane to the list of
 |      //               planes that apply to geometry at this node and below.
 |      //               The clipping plane itself, a PlaneNode, should be
 |      //               parented into the scene graph elsewhere, to represent
 |      //               the plane's position in space; but until
 |      //               set_clip_plane() is called it will clip no geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_clip_plane_off(...)
 |      C++ Interface:
 |      set_clip_plane_off(non-const NodePath this)
 |      set_clip_plane_off(non-const NodePath this, const NodePath clip_plane)
 |      set_clip_plane_off(non-const NodePath this, int priority)
 |      set_clip_plane_off(non-const NodePath this, const NodePath clip_plane, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_clip_plane_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no clip_planes at all.  This is different
 |      //               from not specifying a clip_plane; rather, this
 |      //               specifically contradicts set_clip_plane() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_clip_plane() at a lower level).
 |      //
 |      //               If no clip_planes are in effect on a particular piece
 |      //               of geometry, that geometry is rendered without being
 |      //               clipped (other than by the viewing frustum).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_clip_plane_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               without being clipped by the indicated PlaneNode.
 |      //               This is different from not specifying the PlaneNode;
 |      //               rather, this specifically contradicts
 |      //               set_clip_plane() at a higher node level (or, with a
 |      //               priority, overrides a set_clip_plane() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_collide_mask(...)
 |      C++ Interface:
 |      set_collide_mask(non-const NodePath this, const BitMask new_mask)
 |      set_collide_mask(non-const NodePath this, const BitMask new_mask, const BitMask bits_to_change)
 |      set_collide_mask(non-const NodePath this, const BitMask new_mask, const BitMask bits_to_change, const TypeHandle node_type)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_collide_mask
 |      //       Access: Published
 |      //  Description: Recursively applies the indicated CollideMask to the
 |      //               into_collide_masks for all nodes at this level and
 |      //               below.  If node_type is not TypeHandle::none(), then
 |      //               only nodes matching (or inheriting from) the
 |      //               indicated PandaNode subclass are modified.
 |      //
 |      //               The default is to change all bits, but if
 |      //               bits_to_change is not all bits on, then only the bits
 |      //               that are set in bits_to_change are modified, allowing
 |      //               this call to change only a subset of the bits in the
 |      //               subgraph.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_color(...)
 |      C++ Interface:
 |      set_color(non-const NodePath this, const LVecBase4f color)
 |      set_color(non-const NodePath this, const LVecBase4f color, int priority)
 |      set_color(non-const NodePath this, float r, float g, float b)
 |      set_color(non-const NodePath this, float r, float g, float b, float a)
 |      set_color(non-const NodePath this, float r, float g, float b, float a, int priority)
 |      
 |      // Methods that affect appearance of geometry: color, texture, etc.
 |      // These affect the state at the bottom level only.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color
 |      //       Access: Published
 |      //  Description: Applies a scene-graph color to the referenced node.
 |      //               This color will apply to all geometry at this level
 |      //               and below (that does not specify a new color or a
 |      //               set_color_off()).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color
 |      //       Access: Published
 |      //  Description: Applies a scene-graph color to the referenced node.
 |      //               This color will apply to all geometry at this level
 |      //               and below (that does not specify a new color or a
 |      //               set_color_off()).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_color_off(...)
 |      C++ Interface:
 |      set_color_off(non-const NodePath this)
 |      set_color_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using the geometry color.  This is normally the
 |      //               default, but it may be useful to use this to
 |      //               contradict set_color() at a higher node level (or,
 |      //               with a priority, to override a set_color() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_color_scale(...)
 |      C++ Interface:
 |      set_color_scale(non-const NodePath this, const LVecBase4f scale)
 |      set_color_scale(non-const NodePath this, const LVecBase4f scale, int priority)
 |      set_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa)
 |      set_color_scale(non-const NodePath this, float sx, float sy, float sz, float sa, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_scale
 |      //       Access: Published
 |      //  Description: Sets the color scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_scale
 |      //       Access: Published
 |      //  Description: Sets the color scale component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_color_scale_off(...)
 |      C++ Interface:
 |      set_color_scale_off(non-const NodePath this)
 |      set_color_scale_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_color_scale_off
 |      //       Access: Published
 |      //  Description: Disables any color scale attribute inherited from
 |      //               above.  This is not the same thing as
 |      //               clear_color_scale(), which undoes any previous
 |      //               set_color_scale() operation on this node; rather,
 |      //               this actively disables any set_color_scale() that
 |      //               might be inherited from a parent node.  This also
 |      //               disables set_alpha_scale() at the same time.
 |      //
 |      //               It is legal to specify a new color scale on the same
 |      //               node with a subsequent call to set_color_scale() or
 |      //               set_alpha_scale(); this new scale will apply to lower
 |      //               geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_compass(...)
 |      C++ Interface:
 |      set_compass(non-const NodePath this)
 |      set_compass(non-const NodePath this, const NodePath reference)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_compass
 |      //       Access: Published
 |      //  Description: Puts a compass effect on the node, so that it will
 |      //               retain a fixed rotation relative to the reference
 |      //               node (or render if the reference node is empty)
 |      //               regardless of the transforms above it.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_depth_offset(...)
 |      C++ Interface:
 |      set_depth_offset(non-const NodePath this, int bias)
 |      set_depth_offset(non-const NodePath this, int bias, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_depth_offset
 |      //       Access: Published
 |      //  Description: This instructs the graphics driver to apply an
 |      //               offset or bias to the generated depth values for
 |      //               rendered polygons, before they are written to the
 |      //               depth buffer. This can be used to shift polygons
 |      //               forward slightly, to resolve depth conflicts, or
 |      //               self-shadowing artifacts on thin objects.
 |      //               The bias is always an integer number, and each
 |      //               integer increment represents the smallest possible
 |      //               increment in Z that is sufficient to completely
 |      //               resolve two coplanar polygons. Positive numbers
 |      //               are closer towards the camera.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_depth_test(...)
 |      C++ Interface:
 |      set_depth_test(non-const NodePath this, bool depth_test)
 |      set_depth_test(non-const NodePath this, bool depth_test, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_depth_test
 |      //       Access: Published
 |      //  Description: Specifically sets or disables the testing of the
 |      //               depth buffer on this particular node.  This is
 |      //               normally on in the 3-d scene graph and off in the 2-d
 |      //               scene graph; it should be on for rendering most 3-d
 |      //               objects properly.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_depth_write(...)
 |      C++ Interface:
 |      set_depth_write(non-const NodePath this, bool depth_write)
 |      set_depth_write(non-const NodePath this, bool depth_write, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_depth_write
 |      //       Access: Published
 |      //  Description: Specifically sets or disables the writing to the
 |      //               depth buffer on this particular node.  This is
 |      //               normally on in the 3-d scene graph and off in the 2-d
 |      //               scene graph; it should be on for rendering most 3-d
 |      //               objects properly.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_effect(...)
 |      C++ Interface:
 |      set_effect(non-const NodePath this, const RenderEffect effect)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_effect
 |      //       Access: Published
 |      //  Description: Adds the indicated render effect to the scene
 |      //               graph on this node.  If there was already an effect
 |      //               of the same type, it is replaced.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_effects(...)
 |      C++ Interface:
 |      set_effects(non-const NodePath this, const RenderEffects effects)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_effects
 |      //       Access: Published
 |      //  Description: Sets the complete RenderEffects that will be applied
 |      //               this node.  This completely replaces whatever has
 |      //               been set on this node via repeated calls to
 |      //               set_attrib().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_fluid_pos(...)
 |      C++ Interface:
 |      set_fluid_pos(non-const NodePath this, const LVecBase3f pos)
 |      set_fluid_pos(non-const NodePath this, const NodePath other, const LVecBase3f pos)
 |      set_fluid_pos(non-const NodePath this, float x, float y, float z)
 |      set_fluid_pos(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component, without changing the
 |      //               "previous" position, so that the collision system
 |      //               will see the node as moving fluidly from its previous
 |      //               position to its new position.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component, without changing the
 |      //               "previous" position, so that the collision system
 |      //               will see the node as moving fluidly from its previous
 |      //               position to its new position.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component, without changing the
 |      //               "previous" position, so that the collision system
 |      //               will see the node as moving fluidly from its previous
 |      //               position to its new position.
 |      //     See Also: NodePath::set_pos
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fluid_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_fluid_x(...)
 |      C++ Interface:
 |      set_fluid_x(non-const NodePath this, float x)
 |      set_fluid_x(non-const NodePath this, const NodePath other, float x)
 |  
 |  set_fluid_y(...)
 |      C++ Interface:
 |      set_fluid_y(non-const NodePath this, float y)
 |      set_fluid_y(non-const NodePath this, const NodePath other, float y)
 |  
 |  set_fluid_z(...)
 |      C++ Interface:
 |      set_fluid_z(non-const NodePath this, float z)
 |      set_fluid_z(non-const NodePath this, const NodePath other, float z)
 |  
 |  set_fog(...)
 |      C++ Interface:
 |      set_fog(non-const NodePath this, non-const Fog fog)
 |      set_fog(non-const NodePath this, non-const Fog fog, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fog
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using the indicated fog.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_fog_off(...)
 |      C++ Interface:
 |      set_fog_off(non-const NodePath this)
 |      set_fog_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_fog_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no fog.  This is normally the default, but
 |      //               it may be useful to use this to contradict
 |      //               set_fog() at a higher node level (or, with a
 |      //               priority, to override a set_fog() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_h(...)
 |      C++ Interface:
 |      set_h(non-const NodePath this, float h)
 |      set_h(non-const NodePath this, const NodePath other, float h)
 |  
 |  set_hpr(...)
 |      C++ Interface:
 |      set_hpr(non-const NodePath this, const LVecBase3f hpr)
 |      set_hpr(non-const NodePath this, const NodePath other, const LVecBase3f hpr)
 |      set_hpr(non-const NodePath this, float h, float p, float r)
 |      set_hpr(non-const NodePath this, const NodePath other, float h, float p, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               leaving translation and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               leaving translation and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_hpr_scale(...)
 |      C++ Interface:
 |      set_hpr_scale(non-const NodePath this, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_hpr_scale(non-const NodePath this, const NodePath other, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_hpr_scale(non-const NodePath this, float h, float p, float r, float sx, float sy, float sz)
 |      set_hpr_scale(non-const NodePath this, const NodePath other, float h, float p, float r, float sx, float sy, float sz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.  This, or
 |      //               set_pos_hpr_scale, is the preferred way to update a
 |      //               transform when both hpr and scale are to be changed.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_hpr_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.  This, or
 |      //               set_pos_hpr_scale, is the preferred way to update a
 |      //               transform when both hpr and scale are to be changed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_instance_count(...)
 |      C++ Interface:
 |      set_instance_count(non-const NodePath this, int instance_count)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_instance_count
 |      //       Access: Published
 |      //  Description: Sets the geometry instance count, or 0 if
 |      //               geometry instancing should be disabled. Do not
 |      //               confuse with instanceTo which only applies to
 |      //               animation instancing.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_light(...)
 |      C++ Interface:
 |      set_light(non-const NodePath this, const NodePath light)
 |      set_light(non-const NodePath this, const NodePath light, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_light
 |      //       Access: Published
 |      //  Description: Adds the indicated Light or PolylightNode to the list
 |      //               of lights that illuminate geometry at this node and
 |      //               below.  The light itself should be parented into the
 |      //               scene graph elsewhere, to represent the light's
 |      //               position in space; but until set_light() is called it
 |      //               will illuminate no geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_light_off(...)
 |      C++ Interface:
 |      set_light_off(non-const NodePath this)
 |      set_light_off(non-const NodePath this, const NodePath light)
 |      set_light_off(non-const NodePath this, int priority)
 |      set_light_off(non-const NodePath this, const NodePath light, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_light_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no lights at all.  This is different
 |      //               from not specifying a light; rather, this
 |      //               specifically contradicts set_light() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_light() at a lower level).
 |      //
 |      //               If no lights are in effect on a particular piece of
 |      //               geometry, that geometry is rendered with lighting
 |      //               disabled.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_light_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               without using the indicated Light.  This is different
 |      //               from not specifying the Light; rather, this
 |      //               specifically contradicts set_light() at a higher node
 |      //               level (or, with a priority, overrides a set_light()
 |      //               at a lower level).
 |      //
 |      //               This interface does not support PolylightNodes, which
 |      //               cannot be turned off at a lower level.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_mat(...)
 |      C++ Interface:
 |      set_mat(non-const NodePath this, const LMatrix4f mat)
 |      set_mat(non-const NodePath this, const NodePath other, const LMatrix4f mat)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_mat
 |      //       Access: Published
 |      //  Description: Directly sets an arbitrary 4x4 transform matrix.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_mat
 |      //       Access: Published
 |      //  Description: Converts the indicated matrix from the other's
 |      //               coordinate space to the local coordinate space, and
 |      //               applies it to the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_material(...)
 |      C++ Interface:
 |      set_material(non-const NodePath this, non-const Material tex)
 |      set_material(non-const NodePath this, non-const Material tex, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_material
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using the indicated material.
 |      //
 |      //               Previously, this operation made a copy of the
 |      //               material structure, but nowadays it assigns the
 |      //               pointer directly.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_material_off(...)
 |      C++ Interface:
 |      set_material_off(non-const NodePath this)
 |      set_material_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_material_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no material.  This is normally the default, but
 |      //               it may be useful to use this to contradict
 |      //               set_material() at a higher node level (or, with a
 |      //               priority, to override a set_material() at a lower
 |      //               level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_name(...)
 |      C++ Interface:
 |      set_name(non-const NodePath this, string name)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_name
 |      //       Access: Published
 |      //  Description: Changes the name of the referenced node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_normal_map(...)
 |      C++ Interface:
 |      set_normal_map(non-const NodePath this, non-const Texture normal_map)
 |      set_normal_map(non-const NodePath this, non-const Texture normal_map, string texcoord_name)
 |      set_normal_map(non-const NodePath this, non-const Texture normal_map, string texcoord_name, bool preserve_color)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_normal_map
 |      //       Access: Published
 |      //  Description: A convenience function to set up a normal map on this
 |      //               geometry.  This uses the single highest-priority
 |      //               light on the object only.  It also requires
 |      //               multitexture, and consumes at least two texture
 |      //               stages, in addition to what may already be in use.
 |      //
 |      //               The normal_map parameter is the texture that contains
 |      //               the normal map information (with a 3-d delta vector
 |      //               encoded into the r,g,b of each texel).  texcoord_name is
 |      //               the name of the texture coordinate set that contains
 |      //               the tangent and binormal we wish to use.  If
 |      //               preserve_color is true, then one additional texture
 |      //               stage is consumed to blend in the geometry's original
 |      //               vertex color.
 |      //
 |      //               Only one normal map may be in effect through this
 |      //               interface at any given time.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_occluder(...)
 |      C++ Interface:
 |      set_occluder(non-const NodePath this, const NodePath occluder)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_occluder
 |      //       Access: Published
 |      //  Description: Adds the indicated occluder to the list of
 |      //               occluders that apply to geometry at this node and below.
 |      //               The occluder itself, an OccluderNode, should be
 |      //               parented into the scene graph elsewhere, to represent
 |      //               the occluder's position in space; but until
 |      //               set_occluder() is called it will clip no geometry.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_p(...)
 |      C++ Interface:
 |      set_p(non-const NodePath this, float p)
 |      set_p(non-const NodePath this, const NodePath other, float p)
 |  
 |  set_pos(...)
 |      C++ Interface:
 |      set_pos(non-const NodePath this, const LVecBase3f pos)
 |      set_pos(non-const NodePath this, const NodePath other, const LVecBase3f pos)
 |      set_pos(non-const NodePath this, float x, float y, float z)
 |      set_pos(non-const NodePath this, const NodePath other, float x, float y, float z)
 |      
 |      // Methods that get and set the matrix transform: pos, hpr, scale,
 |      // in the local coordinate system.
 |      
 |      // Methods that get and set the matrix transforms relative to some
 |      // other node in the scene graph.  These perform an implicit wrt().
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               leaving rotation and scale untouched.  This also
 |      //               resets the node's "previous" position, so that the
 |      //               collision system will see the node as having suddenly
 |      //               appeared in the new position, without passing any
 |      //               points in between.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               leaving rotation and scale untouched.  This also
 |      //               resets the node's "previous" position, so that the
 |      //               collision system will see the node as having suddenly
 |      //               appeared in the new position, without passing any
 |      //               points in between.
 |      //     See Also: NodePath::set_fluid_pos
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos
 |      //       Access: Published
 |      //  Description: Sets the translation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_pos_hpr(...)
 |      C++ Interface:
 |      set_pos_hpr(non-const NodePath this, const LVecBase3f pos, const LVecBase3f hpr)
 |      set_pos_hpr(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LVecBase3f hpr)
 |      set_pos_hpr(non-const NodePath this, float x, float y, float z, float h, float p, float r)
 |      set_pos_hpr(non-const NodePath this, const NodePath other, float x, float y, float z, float h, float p, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, leaving scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, leaving scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_pos_hpr_scale(...)
 |      C++ Interface:
 |      set_pos_hpr_scale(non-const NodePath this, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_pos_hpr_scale(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale)
 |      set_pos_hpr_scale(non-const NodePath this, float x, float y, float z, float h, float p, float r, float sx, float sy, float sz)
 |      set_pos_hpr_scale(non-const NodePath this, const NodePath other, float x, float y, float z, float h, float p, float r, float sx, float sy, float sz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components, relative
 |      //               to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Replaces the translation, rotation, and scale
 |      //               components, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components, relative
 |      //               to the other node, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_pos_hpr_scale_shear(...)
 |      C++ Interface:
 |      set_pos_hpr_scale_shear(non-const NodePath this, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale, const LVecBase3f shear)
 |      set_pos_hpr_scale_shear(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LVecBase3f hpr, const LVecBase3f scale, const LVecBase3f shear)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_hpr_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_pos_quat(...)
 |      C++ Interface:
 |      set_pos_quat(non-const NodePath this, const LVecBase3f pos, const LQuaternionf quat)
 |      set_pos_quat(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LQuaternionf quat)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, leaving scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat
 |      //       Access: Published
 |      //  Description: Sets the translation and rotation component of the
 |      //               transform, relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_pos_quat_scale(...)
 |      C++ Interface:
 |      set_pos_quat_scale(non-const NodePath this, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale)
 |      set_pos_quat_scale(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale
 |      //       Access: Published
 |      //  Description: Replaces the translation, rotation, and scale
 |      //               components, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, and scale components, relative
 |      //               to the other node, implicitly setting shear to 0.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_pos_quat_scale_shear(...)
 |      C++ Interface:
 |      set_pos_quat_scale_shear(non-const NodePath this, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale, const LVecBase3f shear)
 |      set_pos_quat_scale_shear(non-const NodePath this, const NodePath other, const LVecBase3f pos, const LQuaternionf quat, const LVecBase3f scale, const LVecBase3f shear)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_pos_quat_scale_shear
 |      //       Access: Published
 |      //  Description: Completely replaces the transform with new
 |      //               translation, rotation, scale, and shear components,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_prev_transform(...)
 |      C++ Interface:
 |      set_prev_transform(non-const NodePath this, const TransformState transform)
 |      set_prev_transform(non-const NodePath this, const TransformState transform, non-const Thread current_thread)
 |      set_prev_transform(non-const NodePath this, const NodePath other, const TransformState transform)
 |      set_prev_transform(non-const NodePath this, const NodePath other, const TransformState transform, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_prev_transform
 |      //       Access: Published
 |      //  Description: Sets the transform that represents this node's
 |      //               "previous" position, one frame ago, for the purposes
 |      //               of detecting motion for accurate collision
 |      //               calculations.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_prev_transform
 |      //       Access: Published
 |      //  Description: Sets the "previous" transform object on this node,
 |      //               relative to the other node.  This computes a new
 |      //               transform object that will have the indicated value
 |      //               when seen from the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_python_tag(...)
 |      C++ Interface:
 |      set_python_tag(non-const NodePath this, string key, any value)
 |  
 |  set_quat(...)
 |      C++ Interface:
 |      set_quat(non-const NodePath this, const LQuaternionf quat)
 |      set_quat(non-const NodePath this, const NodePath other, const LQuaternionf quat)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               leaving translation and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat
 |      //       Access: Published
 |      //  Description: Sets the rotation component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_quat_scale(...)
 |      C++ Interface:
 |      set_quat_scale(non-const NodePath this, const LQuaternionf quat, const LVecBase3f scale)
 |      set_quat_scale(non-const NodePath this, const NodePath other, const LQuaternionf quat, const LVecBase3f scale)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_quat_scale
 |      //       Access: Published
 |      //  Description: Sets the rotation and scale components of the
 |      //               transform, leaving translation untouched.  This, or
 |      //               set_pos_quat_scale, is the preferred way to update a
 |      //               transform when both quat and scale are to be changed.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_r(...)
 |      C++ Interface:
 |      set_r(non-const NodePath this, float r)
 |      set_r(non-const NodePath this, const NodePath other, float r)
 |  
 |  set_render_mode(...)
 |      C++ Interface:
 |      set_render_mode(non-const NodePath this, int mode, float thickness)
 |      set_render_mode(non-const NodePath this, int mode, float thickness, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode
 |      //       Access: Published
 |      //  Description: Sets up the geometry at this level and below (unless
 |      //               overridden) to render in the specified mode and with
 |      //               the indicated line and/or point thickness.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_render_mode_filled(...)
 |      C++ Interface:
 |      set_render_mode_filled(non-const NodePath this)
 |      set_render_mode_filled(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_filled
 |      //       Access: Published
 |      //  Description: Sets up the geometry at this level and below (unless
 |      //               overridden) to render in filled (i.e. not wireframe)
 |      //               mode.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_render_mode_perspective(...)
 |      C++ Interface:
 |      set_render_mode_perspective(non-const NodePath this, bool perspective)
 |      set_render_mode_perspective(non-const NodePath this, bool perspective, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_perspective
 |      //       Access: Published
 |      //  Description: Sets up the point geometry at this level and below to
 |      //               render as perspective sprites (that is, billboarded
 |      //               quads).  The thickness, as specified with
 |      //               set_render_mode_thickness(), is the width of each
 |      //               point in 3-D units, unless it is overridden on a
 |      //               per-vertex basis.  This does not affect geometry
 |      //               other than points.
 |      //
 |      //               If you want the quads to be individually textured,
 |      //               you should also set a TexGenAttrib::M_point_sprite on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_render_mode_thickness(...)
 |      C++ Interface:
 |      set_render_mode_thickness(non-const NodePath this, float thickness)
 |      set_render_mode_thickness(non-const NodePath this, float thickness, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_thickness
 |      //       Access: Published
 |      //  Description: Sets up the point geometry at this level and below to
 |      //               render as thick points (that is, billboarded
 |      //               quads).  The thickness is in pixels, unless
 |      //               set_render_mode_perspective is also true, in which
 |      //               case it is in 3-D units.
 |      //
 |      //               If you want the quads to be individually textured,
 |      //               you should also set a TexGenAttrib::M_point_sprite on
 |      //               the node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_render_mode_wireframe(...)
 |      C++ Interface:
 |      set_render_mode_wireframe(non-const NodePath this)
 |      set_render_mode_wireframe(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_render_mode_wireframe
 |      //       Access: Published
 |      //  Description: Sets up the geometry at this level and below (unless
 |      //               overridden) to render in wireframe mode.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_sa(...)
 |      C++ Interface:
 |      set_sa(non-const NodePath this, float sa)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sa
 |      //       Access: Published
 |      //  Description: Sets the alpha scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_sb(...)
 |      C++ Interface:
 |      set_sb(non-const NodePath this, float sb)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sb
 |      //       Access: Published
 |      //  Description: Sets the blue scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_scale(...)
 |      C++ Interface:
 |      set_scale(non-const NodePath this, const LVecBase3f scale)
 |      set_scale(non-const NodePath this, float scale)
 |      set_scale(non-const NodePath this, const NodePath other, const LVecBase3f scale)
 |      set_scale(non-const NodePath this, const NodePath other, float scale)
 |      set_scale(non-const NodePath this, float sx, float sy, float sz)
 |      set_scale(non-const NodePath this, const NodePath other, float sx, float sy, float sz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scale
 |      //       Access: Published
 |      //  Description: Sets the scale component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_scissor(...)
 |      C++ Interface:
 |      set_scissor(non-const NodePath this, const LPoint3f a, const LPoint3f b)
 |      set_scissor(non-const NodePath this, const NodePath other, const LPoint3f a, const LPoint3f b)
 |      set_scissor(non-const NodePath this, const LPoint3f a, const LPoint3f b, const LPoint3f c, const LPoint3f d)
 |      set_scissor(non-const NodePath this, float left, float right, float bottom, float top)
 |      set_scissor(non-const NodePath this, const NodePath other, const LPoint3f a, const LPoint3f b, const LPoint3f c, const LPoint3f d)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The four coordinates are
 |      //               understood to define a rectangle in screen space.
 |      //               These numbers are relative to the current
 |      //               DisplayRegion, where (0,0) is the lower-left corner
 |      //               of the DisplayRegion, and (1,1) is the upper-right
 |      //               corner.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The two points are understood
 |      //               to be relative to this node.  When these points are
 |      //               projected into screen space, they define the
 |      //               diagonally-opposite points that determine the scissor
 |      //               region.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The four points are understood
 |      //               to be relative to this node.  When these points are
 |      //               projected into screen space, they define the
 |      //               bounding volume of the scissor region (the scissor
 |      //               region is the smallest onscreen rectangle that
 |      //               encloses all four points).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The two points are understood
 |      //               to be relative to the indicated other node.  When
 |      //               these points are projected into screen space, they
 |      //               define the diagonally-opposite points that determine
 |      //               the scissor region.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_scissor
 |      //       Access: Published
 |      //  Description: Sets up a scissor region on the nodes rendered at
 |      //               this level and below.  The four points are understood
 |      //               to be relative to the indicated other node.  When
 |      //               these points are projected into screen space, they
 |      //               define the bounding volume of the scissor region (the
 |      //               scissor region is the smallest onscreen rectangle
 |      //               that encloses all four points).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_sg(...)
 |      C++ Interface:
 |      set_sg(non-const NodePath this, float sg)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sg
 |      //       Access: Published
 |      //  Description: Sets the alpha scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_shader(...)
 |      C++ Interface:
 |      set_shader(non-const NodePath this, const Shader sha)
 |      set_shader(non-const NodePath this, const Shader sha, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_shader_auto(...)
 |      C++ Interface:
 |      set_shader_auto(non-const NodePath this)
 |      set_shader_auto(non-const NodePath this, const BitMask shader_switch)
 |      set_shader_auto(non-const NodePath this, int priority)
 |      set_shader_auto(non-const NodePath this, const BitMask shader_switch, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_auto
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_auto
 |      //       Access: Published
 |      //  Description: overloaded for auto shader customization
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_shader_input(...)
 |      C++ Interface:
 |      set_shader_input(non-const NodePath this, const ShaderInput inp)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix3f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix4f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2i v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3i v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4f v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4i v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const NodePath np)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, non-const Texture tex)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, non-const Texture tex)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix3f v)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix4f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2i v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3i v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4f v)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4i v)
 |      set_shader_input(non-const NodePath this, string id, const NodePath np)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1)
 |      set_shader_input(non-const NodePath this, string id, float n1)
 |      set_shader_input(non-const NodePath this, string id, int n1)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix3f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LMatrix4f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase2i v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase3i v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4f v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const LVecBase4i v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const NodePath np, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, non-const Texture tex, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, non-const Texture tex, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix3f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LMatrix4f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase2i v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase3i v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4f v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const LVecBase4i v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const NodePath np, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, string id, const PointerToArray v, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2, float n3)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2, int n3)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2, float n3)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2, int n3)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2, float n3, float n4)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2, int n3, int n4)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2, float n3, float n4)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2, int n3, int n4)
 |      set_shader_input(non-const NodePath this, const InternalName id, float n1, float n2, float n3, float n4, int priority)
 |      set_shader_input(non-const NodePath this, const InternalName id, int n1, int n2, int n3, int n4, int priority)
 |      set_shader_input(non-const NodePath this, string id, float n1, float n2, float n3, float n4, int priority)
 |      set_shader_input(non-const NodePath this, string id, int n1, int n2, int n3, int n4, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description:
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_input
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_shader_off(...)
 |      C++ Interface:
 |      set_shader_off(non-const NodePath this)
 |      set_shader_off(non-const NodePath this, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shader_off
 |      //       Access: Published
 |      //  Description: 
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_shear(...)
 |      C++ Interface:
 |      set_shear(non-const NodePath this, const LVecBase3f shear)
 |      set_shear(non-const NodePath this, const NodePath other, const LVecBase3f shear)
 |      set_shear(non-const NodePath this, float shxy, float shxz, float shyz)
 |      set_shear(non-const NodePath this, const NodePath other, float shxy, float shxz, float shyz)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               leaving translation, rotation, and scale untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               leaving translation and rotation untouched.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_shear
 |      //       Access: Published
 |      //  Description: Sets the shear component of the transform,
 |      //               relative to the other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_shxy(...)
 |      C++ Interface:
 |      set_shxy(non-const NodePath this, float shxy)
 |      set_shxy(non-const NodePath this, const NodePath other, float shxy)
 |  
 |  set_shxz(...)
 |      C++ Interface:
 |      set_shxz(non-const NodePath this, float shxz)
 |      set_shxz(non-const NodePath this, const NodePath other, float shxz)
 |  
 |  set_shyz(...)
 |      C++ Interface:
 |      set_shyz(non-const NodePath this, float shyz)
 |      set_shyz(non-const NodePath this, const NodePath other, float shyz)
 |  
 |  set_sr(...)
 |      C++ Interface:
 |      set_sr(non-const NodePath this, float sr)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_sr
 |      //       Access: Published
 |      //  Description: Sets the red scale component of the transform
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_state(...)
 |      C++ Interface:
 |      set_state(non-const NodePath this, const RenderState state)
 |      set_state(non-const NodePath this, const RenderState state, non-const Thread current_thread)
 |      set_state(non-const NodePath this, const NodePath other, const RenderState state)
 |      set_state(non-const NodePath this, const NodePath other, const RenderState state, non-const Thread current_thread)
 |      
 |      // Aggregate transform and state information.
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_state
 |      //       Access: Published
 |      //  Description: Changes the complete state object on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_state
 |      //       Access: Published
 |      //  Description: Sets the state object on this node, relative to
 |      //               the other node.  This computes a new state object
 |      //               that will have the indicated value when seen from the
 |      //               other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_sx(...)
 |      C++ Interface:
 |      set_sx(non-const NodePath this, float sx)
 |      set_sx(non-const NodePath this, const NodePath other, float sx)
 |  
 |  set_sy(...)
 |      C++ Interface:
 |      set_sy(non-const NodePath this, float sy)
 |      set_sy(non-const NodePath this, const NodePath other, float sy)
 |  
 |  set_sz(...)
 |      C++ Interface:
 |      set_sz(non-const NodePath this, float sz)
 |      set_sz(non-const NodePath this, const NodePath other, float sz)
 |  
 |  set_tag(...)
 |      C++ Interface:
 |      set_tag(non-const NodePath this, string key, string value)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tag
 |      //       Access: Published
 |      //  Description: Associates a user-defined value with a user-defined
 |      //               key which is stored on the node.  This value has no
 |      //               meaning to Panda; but it is stored indefinitely on
 |      //               the node until it is requested again.
 |      //
 |      //               Each unique key stores a different string value.
 |      //               There is no effective limit on the number of
 |      //               different keys that may be stored or on the length of
 |      //               any one key's value.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_gen(...)
 |      C++ Interface:
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, const LPoint3f constant_value)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, int priority)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, string source_name, const NodePath light)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, const LPoint3f constant_value, int priority)
 |      set_tex_gen(non-const NodePath this, non-const TextureStage stage, int mode, string source_name, const NodePath light, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_gen
 |      //       Access: Published
 |      //  Description: Enables automatic texture coordinate generation for
 |      //               the indicated texture stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_gen
 |      //       Access: Published
 |      //  Description: Enables automatic texture coordinate generation for
 |      //               the indicated texture stage.  This version of this
 |      //               method is useful when setting M_light_vector, which
 |      //               requires the name of the texture coordinate set that
 |      //               supplies the tangent and binormal, as well as the
 |      //               specific light to generate coordinates for.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_gen
 |      //       Access: Published
 |      //  Description: Enables automatic texture coordinate generation for
 |      //               the indicated texture stage.  This version of this
 |      //               method is useful when setting M_constant, which
 |      //               requires a constant texture coordinate value.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_hpr(...)
 |      C++ Interface:
 |      set_tex_hpr(non-const NodePath this, non-const TextureStage stage, const LVecBase3f hpr)
 |      set_tex_hpr(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase3f hpr)
 |      set_tex_hpr(non-const NodePath this, non-const TextureStage stage, float h, float p, float r)
 |      set_tex_hpr(non-const NodePath this, const NodePath other, non-const TextureStage stage, float h, float p, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_hpr
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, as a 3-D HPR, to UVW's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_offset(...)
 |      C++ Interface:
 |      set_tex_offset(non-const NodePath this, non-const TextureStage stage, const LVecBase2f uv)
 |      set_tex_offset(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase2f uv)
 |      set_tex_offset(non-const NodePath this, non-const TextureStage stage, float u, float v)
 |      set_tex_offset(non-const NodePath this, const NodePath other, non-const TextureStage stage, float u, float v)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_offset
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_pos(...)
 |      C++ Interface:
 |      set_tex_pos(non-const NodePath this, non-const TextureStage stage, const LVecBase3f uvw)
 |      set_tex_pos(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase3f uvw)
 |      set_tex_pos(non-const NodePath this, non-const TextureStage stage, float u, float v, float w)
 |      set_tex_pos(non-const NodePath this, const NodePath other, non-const TextureStage stage, float u, float v, float w)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_pos
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated offset to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_projector(...)
 |      C++ Interface:
 |      set_tex_projector(non-const NodePath this, non-const TextureStage stage, const NodePath from, const NodePath to)
 |      set_tex_projector(non-const NodePath this, non-const TextureStage stage, const NodePath from, const NodePath to, int lens_index)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_projector
 |      //       Access: Published
 |      //  Description: Establishes a TexProjectorEffect on this node, which
 |      //               can be used to establish projective texturing (but
 |      //               see also the NodePath::project_texture() convenience
 |      //               function), or it can be used to bind this node's
 |      //               texture transform to particular node's position in
 |      //               space, allowing a LerpInterval (for instance) to
 |      //               adjust this node's texture coordinates.
 |      //
 |      //               If to is a LensNode, then the fourth parameter,
 |      //               lens_index, can be provided to select a particular
 |      //               lens to apply.  Otherwise lens_index is not used.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_rotate(...)
 |      C++ Interface:
 |      set_tex_rotate(non-const NodePath this, non-const TextureStage stage, float r)
 |      set_tex_rotate(non-const NodePath this, const NodePath other, non-const TextureStage stage, float r)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_rotate
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, clockwise in degrees, to UV's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_rotate
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated rotation, clockwise in degrees, to UV's
 |      //               for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_scale(...)
 |      C++ Interface:
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, const LVecBase2f scale)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, const LVecBase3f scale)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, float scale)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase2f scale)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, const LVecBase3f scale)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, float scale)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, float su, float sv)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, float su, float sv)
 |      set_tex_scale(non-const NodePath this, non-const TextureStage stage, float su, float sv, float sw)
 |      set_tex_scale(non-const NodePath this, const NodePath other, non-const TextureStage stage, float su, float sv, float sw)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 2-d or 3-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for 2-d or 3-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UV's for the given stage.
 |      //
 |      //               This call is appropriate for ordinary 2-d texture
 |      //               coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_scale
 |      //       Access: Published
 |      //  Description: Sets a texture matrix on the current node to apply
 |      //               the indicated scale to UVW's for the given stage.
 |      //
 |      //               This call is appropriate for 3-d texture coordinates.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_tex_transform(...)
 |      C++ Interface:
 |      set_tex_transform(non-const NodePath this, non-const TextureStage stage, const TransformState transform)
 |      set_tex_transform(non-const NodePath this, const NodePath other, non-const TextureStage stage, const TransformState transform)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_transform
 |      //       Access: Published
 |      //  Description: Sets the texture matrix on the current node to the
 |      //               indicated transform for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_tex_transform
 |      //       Access: Published
 |      //  Description: Sets the texture matrix on the current node to the
 |      //               indicated transform for the given stage.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_texture(...)
 |      C++ Interface:
 |      set_texture(non-const NodePath this, non-const Texture tex)
 |      set_texture(non-const NodePath this, non-const TextureStage stage, non-const Texture tex)
 |      set_texture(non-const NodePath this, non-const Texture tex, int priority)
 |      set_texture(non-const NodePath this, non-const TextureStage stage, non-const Texture tex, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture
 |      //       Access: Published
 |      //  Description: Adds the indicated texture to the list of textures
 |      //               that will be rendered on the default texture stage.
 |      //
 |      //               This is the convenience single-texture variant of
 |      //               this method; it is now superceded by set_texture()
 |      //               that accepts a stage and texture.  You may use this
 |      //               method if you just want to adjust the default stage.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture
 |      //       Access: Published
 |      //  Description: Adds the indicated texture to the list of textures
 |      //               that will be rendered on the indicated multitexture
 |      //               stage.  If there are multiple texture stages
 |      //               specified (possibly on multiple different nodes at
 |      //               different levels), they will all be applied to
 |      //               geometry together, according to the stage
 |      //               specification set up in the TextureStage object.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_texture_off(...)
 |      C++ Interface:
 |      set_texture_off(non-const NodePath this)
 |      set_texture_off(non-const NodePath this, non-const TextureStage stage)
 |      set_texture_off(non-const NodePath this, int priority)
 |      set_texture_off(non-const NodePath this, non-const TextureStage stage, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no texture, on any stage.  This is different
 |      //               from not specifying a texture; rather, this
 |      //               specifically contradicts set_texture() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_texture() at a lower level).
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_texture_off
 |      //       Access: Published
 |      //  Description: Sets the geometry at this level and below to render
 |      //               using no texture, on the indicated stage.  This is
 |      //               different from not specifying a texture; rather, this
 |      //               specifically contradicts set_texture() at a higher
 |      //               node level (or, with a priority, overrides a
 |      //               set_texture() at a lower level).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_transform(...)
 |      C++ Interface:
 |      set_transform(non-const NodePath this, const TransformState transform)
 |      set_transform(non-const NodePath this, const TransformState transform, non-const Thread current_thread)
 |      set_transform(non-const NodePath this, const NodePath other, const TransformState transform)
 |      set_transform(non-const NodePath this, const NodePath other, const TransformState transform, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_transform
 |      //       Access: Published
 |      //  Description: Changes the complete transform object on this node.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_transform
 |      //       Access: Published
 |      //  Description: Sets the transform object on this node, relative to
 |      //               the other node.  This computes a new transform object
 |      //               that will have the indicated value when seen from the
 |      //               other node.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_transparency(...)
 |      C++ Interface:
 |      set_transparency(non-const NodePath this, int mode)
 |      set_transparency(non-const NodePath this, int mode, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_transparency
 |      //       Access: Published
 |      //  Description: Specifically sets or disables transparent rendering
 |      //               mode on this particular node.  If no other nodes
 |      //               override, this will cause items with a non-1 value
 |      //               for alpha color to be rendered partially transparent.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_two_sided(...)
 |      C++ Interface:
 |      set_two_sided(non-const NodePath this, bool two_sided)
 |      set_two_sided(non-const NodePath this, bool two_sided, int priority)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_two_sided
 |      //       Access: Published
 |      //  Description: Specifically sets or disables two-sided rendering
 |      //               mode on this particular node.  If no other nodes
 |      //               override, this will cause backfacing polygons to be
 |      //               drawn (in two-sided mode, true) or culled (in
 |      //               one-sided mode, false).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_x(...)
 |      C++ Interface:
 |      set_x(non-const NodePath this, float x)
 |      set_x(non-const NodePath this, const NodePath other, float x)
 |  
 |  set_y(...)
 |      C++ Interface:
 |      set_y(non-const NodePath this, float y)
 |      set_y(non-const NodePath this, const NodePath other, float y)
 |  
 |  set_z(...)
 |      C++ Interface:
 |      set_z(non-const NodePath this, float z)
 |      set_z(non-const NodePath this, const NodePath other, float z)
 |  
 |  shearInterval(self, *args, **kw)
 |      #####################################################################
 |  
 |  show(...)
 |      C++ Interface:
 |      show(non-const NodePath this)
 |      show(non-const NodePath this, const BitMask camera_mask)
 |      
 |      // Variants on show and hide
 |      
 |      // Variants on show and hide
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show
 |      //       Access: Published
 |      //  Description: Undoes the effect of a previous hide() on this node:
 |      //               makes the referenced node (and the entire subgraph
 |      //               below this node) visible to all cameras.
 |      //
 |      //               This will not reveal the node if a parent node has
 |      //               been hidden.
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show
 |      //       Access: Published
 |      //  Description: Makes the referenced node visible just to the
 |      //               cameras whose camera_mask shares the indicated bits.
 |      //
 |      //               This undoes the effect of a previous hide() call.  It
 |      //               will not reveal the node if a parent node has been
 |      //               hidden.  However, see show_through().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  showAllDescendants(self)
 |      Show the node path and all its children
 |  
 |  showBounds(...)
 |      C++ Interface:
 |      show_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_bounds
 |      //       Access: Published
 |      //  Description: Causes the bounding volume of the bottom node and all
 |      //               of its descendants (that is, the bounding volume
 |      //               associated with the the bottom arc) to be rendered,
 |      //               if possible.  The rendering method is less than
 |      //               optimal; this is intended primarily for debugging.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  showCS(self, mask=None)
 |      Shows the collision solids at or below this node.  If mask is
 |      not None, it is a BitMask32 object (e.g. WallBitmask,
 |      CameraBitmask) that indicates which particular collision
 |      solids should be made visible; otherwise, all of them will be.
 |  
 |  showSiblings(self)
 |      Show all the siblings of a node path
 |  
 |  showThrough(...)
 |      C++ Interface:
 |      show_through(non-const NodePath this)
 |      show_through(non-const NodePath this, const BitMask camera_mask)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_through
 |      //       Access: Published
 |      //  Description: Makes the referenced node visible just to the
 |      //               cameras whose camera_mask shares the indicated bits.
 |      //
 |      //               Unlike show(), this will reveal the node even if a
 |      //               parent node has been hidden, thus "showing through" a
 |      //               parent's hide().
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_through
 |      //       Access: Published
 |      //  Description: Makes the referenced node visible just to the
 |      //               cameras whose camera_mask shares the indicated bits.
 |      //
 |      //               Unlike show(), this will reveal the node even if a
 |      //               parent node has been hidden via the one-parameter
 |      //               hide() method, thus "showing through" a parent's
 |      //               hide().  (However, it will not show through a
 |      //               parent's hide() call if the no-parameter form of
 |      //               hide() was used.)
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  showTightBounds(...)
 |      C++ Interface:
 |      show_tight_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_tight_bounds
 |      //       Access: Published
 |      //  Description: Similar to show_bounds(), this draws a bounding box
 |      //               representing the "tight" bounds of this node and all
 |      //               of its descendants.  The bounding box is recomputed
 |      //               every frame by reexamining all of the vertices; this
 |      //               is far from efficient, but this is intended for
 |      //               debugging.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  show_bounds(...)
 |      C++ Interface:
 |      show_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_bounds
 |      //       Access: Published
 |      //  Description: Causes the bounding volume of the bottom node and all
 |      //               of its descendants (that is, the bounding volume
 |      //               associated with the the bottom arc) to be rendered,
 |      //               if possible.  The rendering method is less than
 |      //               optimal; this is intended primarily for debugging.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  show_through(...)
 |      C++ Interface:
 |      show_through(non-const NodePath this)
 |      show_through(non-const NodePath this, const BitMask camera_mask)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_through
 |      //       Access: Published
 |      //  Description: Makes the referenced node visible just to the
 |      //               cameras whose camera_mask shares the indicated bits.
 |      //
 |      //               Unlike show(), this will reveal the node even if a
 |      //               parent node has been hidden, thus "showing through" a
 |      //               parent's hide().
 |      ////////////////////////////////////////////////////////////////////
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_through
 |      //       Access: Published
 |      //  Description: Makes the referenced node visible just to the
 |      //               cameras whose camera_mask shares the indicated bits.
 |      //
 |      //               Unlike show(), this will reveal the node even if a
 |      //               parent node has been hidden via the one-parameter
 |      //               hide() method, thus "showing through" a parent's
 |      //               hide().  (However, it will not show through a
 |      //               parent's hide() call if the no-parameter form of
 |      //               hide() was used.)
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  show_tight_bounds(...)
 |      C++ Interface:
 |      show_tight_bounds(non-const NodePath this)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::show_tight_bounds
 |      //       Access: Published
 |      //  Description: Similar to show_bounds(), this draws a bounding box
 |      //               representing the "tight" bounds of this node and all
 |      //               of its descendants.  The bounding box is recomputed
 |      //               every frame by reexamining all of the vertices; this
 |      //               is far from efficient, but this is intended for
 |      //               debugging.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  stash(...)
 |      C++ Interface:
 |      stash(non-const NodePath this)
 |      stash(non-const NodePath this, int sort)
 |      stash(non-const NodePath this, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::stash
 |      //       Access: Published
 |      //  Description: Removes the referenced node (and the entire subgraph
 |      //               below this node) from the scene graph in any normal
 |      //               sense.  The node will no longer be visible and is not
 |      //               tested for collisions; furthermore, no normal scene
 |      //               graph traversal will visit the node.  The node's
 |      //               bounding volume no longer contributes to its parent's
 |      //               bounding volume.
 |      //
 |      //               A stashed node cannot be located by a normal find()
 |      //               operation (although a special find string can still
 |      //               retrieve it).
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  stashTo(...)
 |      C++ Interface:
 |      stash_to(non-const NodePath this, const NodePath other)
 |      stash_to(non-const NodePath this, const NodePath other, int sort)
 |      stash_to(non-const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::stash_to
 |      //       Access: Published
 |      //  Description: Similar to reparent_to(), but the node is added to
 |      //               its new parent's stashed list, so that the result is
 |      //               equivalent to calling reparent_to() immediately
 |      //               followed by stash().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  stash_to(...)
 |      C++ Interface:
 |      stash_to(non-const NodePath this, const NodePath other)
 |      stash_to(non-const NodePath this, const NodePath other, int sort)
 |      stash_to(non-const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::stash_to
 |      //       Access: Published
 |      //  Description: Similar to reparent_to(), but the node is added to
 |      //               its new parent's stashed list, so that the result is
 |      //               equivalent to calling reparent_to() immediately
 |      //               followed by stash().
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  subdivideCollisions(self, numSolidsInLeaves)
 |      expand CollisionNodes out into balanced trees, with a particular number
 |      of solids in the leaves
 |      TODO: better splitting logic at each level of the tree wrt spatial separation
 |      and cost of bounding volume tests vs. cost of collision solid tests
 |  
 |  toggleVis(self)
 |      Toggles visibility of a nodePath
 |  
 |  unifyTextureStages(...)
 |      C++ Interface:
 |      unify_texture_stages(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::unify_texture_stages
 |      //       Access: Published
 |      //  Description: Searches through all TextureStages at this node and
 |      //               below.  Any TextureStages that share the same name as
 |      //               the indicated TextureStage object are replaced with
 |      //               this object, thus ensuring that all geometry at this
 |      //               node and below with a particular TextureStage name is
 |      //               using the same TextureStage object.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  unify_texture_stages(...)
 |      C++ Interface:
 |      unify_texture_stages(non-const NodePath this, non-const TextureStage stage)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::unify_texture_stages
 |      //       Access: Published
 |      //  Description: Searches through all TextureStages at this node and
 |      //               below.  Any TextureStages that share the same name as
 |      //               the indicated TextureStage object are replaced with
 |      //               this object, thus ensuring that all geometry at this
 |      //               node and below with a particular TextureStage name is
 |      //               using the same TextureStage object.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  unstash(...)
 |      C++ Interface:
 |      unstash(non-const NodePath this)
 |      unstash(non-const NodePath this, int sort)
 |      unstash(non-const NodePath this, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::unstash
 |      //       Access: Published
 |      //  Description: Undoes the effect of a previous stash() on this
 |      //               node: makes the referenced node (and the entire
 |      //               subgraph below this node) once again part of the
 |      //               scene graph.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  unstashAll(...)
 |      C++ Interface:
 |      unstash_all(non-const NodePath this)
 |      unstash_all(non-const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::unstash_all
 |      //       Access: Published
 |      //  Description: Unstashes this node and all stashed child nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  unstash_all(...)
 |      C++ Interface:
 |      unstash_all(non-const NodePath this)
 |      unstash_all(non-const NodePath this, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::unstash_all
 |      //       Access: Published
 |      //  Description: Unstashes this node and all stashed child nodes.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  verifyComplete(...)
 |      C++ Interface:
 |      verify_complete(const NodePath this)
 |      verify_complete(const NodePath this, non-const Thread current_thread)
 |      
 |      // Miscellaneous
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::verify_complete
 |      //       Access: Published
 |      //  Description: Returns true if all of the nodes described in the
 |      //               NodePath are connected, or false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  verify_complete(...)
 |      C++ Interface:
 |      verify_complete(const NodePath this)
 |      verify_complete(const NodePath this, non-const Thread current_thread)
 |      
 |      // Miscellaneous
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::verify_complete
 |      //       Access: Published
 |      //  Description: Returns true if all of the nodes described in the
 |      //               NodePath are connected, or false otherwise.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  writeBamFile(...)
 |      C++ Interface:
 |      write_bam_file(const NodePath this, const Filename filename)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::write_bam_file
 |      //       Access: Published
 |      //  Description: Writes the contents of this node and below out to a
 |      //               bam file with the indicated filename.  This file may
 |      //               then be read in again, as is, at some later point.
 |      //               Returns true if successful, false on some kind of
 |      //               error.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  writeBamStream(...)
 |      C++ Interface:
 |      write_bam_stream(const NodePath this, non-const ostream out)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::write_bam_stream
 |      //       Access: Published
 |      //  Description: Writes the contents of this node and below out to the
 |      //               indicated stream.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  writeBounds(...)
 |      C++ Interface:
 |      write_bounds(const NodePath this, non-const ostream out)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::write_bounds
 |      //       Access: Published
 |      //  Description: Writes a description of the bounding volume
 |      //               containing the bottom node and all of its descendants
 |      //               to the indicated output stream.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  write_bam_file(...)
 |      C++ Interface:
 |      write_bam_file(const NodePath this, const Filename filename)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::write_bam_file
 |      //       Access: Published
 |      //  Description: Writes the contents of this node and below out to a
 |      //               bam file with the indicated filename.  This file may
 |      //               then be read in again, as is, at some later point.
 |      //               Returns true if successful, false on some kind of
 |      //               error.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  write_bam_stream(...)
 |      C++ Interface:
 |      write_bam_stream(const NodePath this, non-const ostream out)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::write_bam_stream
 |      //       Access: Published
 |      //  Description: Writes the contents of this node and below out to the
 |      //               indicated stream.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  write_bounds(...)
 |      C++ Interface:
 |      write_bounds(const NodePath this, non-const ostream out)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::write_bounds
 |      //       Access: Published
 |      //  Description: Writes a description of the bounding volume
 |      //               containing the bottom node and all of its descendants
 |      //               to the indicated output stream.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  wrt_reparent_to(...)
 |      C++ Interface:
 |      wrt_reparent_to(non-const NodePath this, const NodePath other)
 |      wrt_reparent_to(non-const NodePath this, const NodePath other, int sort)
 |      wrt_reparent_to(non-const NodePath this, const NodePath other, int sort, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::wrt_reparent_to
 |      //       Access: Published
 |      //  Description: This functions identically to reparent_to(), except
 |      //               the transform on this node is also adjusted so that
 |      //               the node remains in the same place in world
 |      //               coordinates, even if it is reparented into a
 |      //               different coordinate system.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from panda3d.core.NodePath:
 |  
 |  this
 |      C++ 'this' pointer, if any
 |  
 |  this_metatype
 |      The dtool meta object
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from panda3d.core.NodePath:
 |  
 |  DtoolClassDict = {'DtoolClassDict': {'DtoolClassDict': {'DtoolClassDic...
 |  
 |  ETFail = 3
 |  
 |  ETNotFound = 1
 |  
 |  ETOk = 0
 |  
 |  ETRemoved = 2
 |  
 |  ET_fail = 3
 |  
 |  ET_not_found = 1
 |  
 |  ET_ok = 0
 |  
 |  ET_removed = 2
 |  
 |  __new__ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T
 |  
 |  anyPath = <built-in method any_path of type object>
 |      C++ Interface:
 |      any_path(non-const PandaNode node)
 |      any_path(non-const PandaNode node, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::any_path named constructor
 |      //       Access: Published, Static
 |      //  Description: Returns a new NodePath that represents any arbitrary
 |      //               path from the root to the indicated node.  This is
 |      //               the same thing that would be returned by
 |      //               NodePath(node), except that no warning is issued if
 |      //               the path is ambiguous.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  any_path = <built-in method any_path of type object>
 |      C++ Interface:
 |      any_path(non-const PandaNode node)
 |      any_path(non-const PandaNode node, non-const Thread current_thread)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::any_path named constructor
 |      //       Access: Published, Static
 |      //  Description: Returns a new NodePath that represents any arbitrary
 |      //               path from the root to the indicated node.  This is
 |      //               the same thing that would be returned by
 |      //               NodePath(node), except that no warning is issued if
 |      //               the path is ambiguous.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  decodeFromBamStream = <built-in method decode_from_bam_stream of type ...
 |      C++ Interface:
 |      decode_from_bam_stream(string data)
 |      decode_from_bam_stream(string data, non-const BamReader reader)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::decode_from_bam_stream
 |      //       Access: Published, Static
 |      //  Description: Reads the string created by a previous call to
 |      //               encode_to_bam_stream(), and extracts and
 |      //               returns the NodePath on that string.  Returns NULL on
 |      //               error.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  decode_from_bam_stream = <built-in method decode_from_bam_stream of ty...
 |      C++ Interface:
 |      decode_from_bam_stream(string data)
 |      decode_from_bam_stream(string data, non-const BamReader reader)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::decode_from_bam_stream
 |      //       Access: Published, Static
 |      //  Description: Reads the string created by a previous call to
 |      //               encode_to_bam_stream(), and extracts and
 |      //               returns the NodePath on that string.  Returns NULL on
 |      //               error.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  fail = <built-in method fail of type object>
 |      C++ Interface:
 |      fail()
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::fail named constructor
 |      //       Access: Published, Static
 |      //  Description: Creates a NodePath with the ET_fail error type
 |      //               set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  getClassType = <built-in method get_class_type of type object>
 |      C++ Interface:
 |      get_class_type()
 |  
 |  getMaxSearchDepth = <built-in method get_max_search_depth of type obje...
 |      C++ Interface:
 |      get_max_search_depth()
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_max_search_depth
 |      //       Access: Published, Static
 |      //  Description: Returns the current setting of the search depth
 |      //               limit.  See set_max_search_depth.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  get_class_type = <built-in method get_class_type of type object>
 |      C++ Interface:
 |      get_class_type()
 |  
 |  get_max_search_depth = <built-in method get_max_search_depth of type o...
 |      C++ Interface:
 |      get_max_search_depth()
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::get_max_search_depth
 |      //       Access: Published, Static
 |      //  Description: Returns the current setting of the search depth
 |      //               limit.  See set_max_search_depth.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  notFound = <built-in method not_found of type object>
 |      C++ Interface:
 |      not_found()
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::not_found named constructor
 |      //       Access: Published, Static
 |      //  Description: Creates a NodePath with the ET_not_found error type
 |      //               set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  not_found = <built-in method not_found of type object>
 |      C++ Interface:
 |      not_found()
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::not_found named constructor
 |      //       Access: Published, Static
 |      //  Description: Creates a NodePath with the ET_not_found error type
 |      //               set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  removed = <built-in method removed of type object>
 |      C++ Interface:
 |      removed()
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::removed named constructor
 |      //       Access: Published, Static
 |      //  Description: Creates a NodePath with the ET_removed error type
 |      //               set.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  setMaxSearchDepth = <built-in method set_max_search_depth of type obje...
 |      C++ Interface:
 |      set_max_search_depth(int max_search_depth)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_max_search_depth
 |      //       Access: Published, Static
 |      //  Description: Certain operations, such as find() or
 |      //               find_all_matches(), require a traversal of the scene
 |      //               graph to search for the target node or nodes.  This
 |      //               traversal does not attempt to detect cycles, so an
 |      //               arbitrary cap is set on the depth of the traversal as
 |      //               a poor man's cycle detection, in the event that a
 |      //               cycle has inadvertently been introduced into the
 |      //               scene graph.
 |      //
 |      //               There may be other reasons you'd want to truncate a
 |      //               search before the bottom of the scene graph has been
 |      //               reached.  In any event, this function sets the limit
 |      //               on the number of levels that a traversal will
 |      //               continue, and hence the maximum length of a path that
 |      //               may be returned by a traversal.
 |      //
 |      //               This is a static method, and so changing this
 |      //               parameter affects all of the NodePaths in the
 |      //               universe.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  set_max_search_depth = <built-in method set_max_search_depth of type o...
 |      C++ Interface:
 |      set_max_search_depth(int max_search_depth)
 |      
 |      ////////////////////////////////////////////////////////////////////
 |      //     Function: NodePath::set_max_search_depth
 |      //       Access: Published, Static
 |      //  Description: Certain operations, such as find() or
 |      //               find_all_matches(), require a traversal of the scene
 |      //               graph to search for the target node or nodes.  This
 |      //               traversal does not attempt to detect cycles, so an
 |      //               arbitrary cap is set on the depth of the traversal as
 |      //               a poor man's cycle detection, in the event that a
 |      //               cycle has inadvertently been introduced into the
 |      //               scene graph.
 |      //
 |      //               There may be other reasons you'd want to truncate a
 |      //               search before the bottom of the scene graph has been
 |      //               reached.  In any event, this function sets the limit
 |      //               on the number of levels that a traversal will
 |      //               continue, and hence the maximum length of a path that
 |      //               may be returned by a traversal.
 |      //
 |      //               This is a static method, and so changing this
 |      //               parameter affects all of the NodePaths in the
 |      //               universe.
 |      ////////////////////////////////////////////////////////////////////
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from dtoolconfig.DTOOL_SUPER_BASE111:
 |  
 |  DtoolGetSuperBase = <built-in method DtoolGetSuperBase of type object>
 |      Will Return SUPERbase Class
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from otp.avatar.ShadowCaster.ShadowCaster:
 |  
 |  deleteDropShadow(self)
 |  
 |  hideShadow(self)
 |  
 |  initializeDropShadow(self, hasGeomNode=True)
 |  
 |  setActiveShadow(self, isActive=1)
 |  
 |  setShadowHeight(self, shadowHeight)
 |  
 |  showShadow(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from otp.avatar.PlayerBase.PlayerBase:
 |  
 |  atLocation(self, locationId)
 |  
 |  isGM(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from otp.distributed.TelemetryLimited.TelemetryLimited:
 |  
 |  addTelemetryLimit(self, limit)
 |  
 |  enforceTelemetryLimits(self)
 |  
 |  getTelemetryLimiterId(self)
 |  
 |  removeTelemetryLimit(self, limit)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from otp.distributed.TelemetryLimited.TelemetryLimited:
 |  
 |  Sng = <direct.showbase.PythonUtil.SerialNumGen instance>
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from direct.distributed.DistributedSmoothNodeBase.DistributedSmoothNodeBase:
 |  
 |  b_clearSmoothing(self)
 |  
 |  d_clearSmoothing(self)
 |  
 |  getPosHprBroadcastPeriod(self)
 |  
 |  getPosHprBroadcastTaskName(self)
 |  
 |  posHprBroadcastStarted(self)
 |  
 |  sendCurrentPosition(self)
 |  
 |  setPosHprBroadcastPeriod(self, period)
 |  
 |  startPosHprBroadcast(self, period=0.2, stagger=0, type=None)
 |  
 |  stopPosHprBroadcast(self)
 |  
 |  wantSmoothPosBroadcastTask(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from direct.distributed.DistributedSmoothNodeBase.DistributedSmoothNodeBase:
 |  
 |  BroadcastTypes = <direct.showbase.PythonUtil.Enum instance>
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from toontown.distributed.DelayDeletable.DelayDeletable:
 |  
 |  acquireDelayDelete(self, name)
 |  
 |  delayDelete(self)
 |  
 |  forceAllowDelayDelete(self)
 |  
 |  getDelayDeleteNames(self)
 |  
 |  releaseDelayDelete(self, token)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from toontown.distributed.DelayDeletable.DelayDeletable:
 |  
 |  DelayDeleteSerialGen = <direct.showbase.PythonUtil.SerialNumGen instan...

None
Battle Event localtoon-battle-event-634
Actor Little Zippy, parts = ['head', 'legs', 'torso'], LODs = ['1000', '500', '250'], anims = ['right-hand-start', 'firehose', 'rotateL-putt', 'slip-forward', 'catch-eatnrun', 'tickle', 'water-gun', 'leverNeutral', 'swim', 'catch-run', 'sad-neutral', 'pet-loop', 'jump-squat', 'taunt', 'wave', 'reel-neutral', 'pole-neutral', 'bank', 'scientistGame', 'takePhone', 'good-putt', 'victory', 'lose', 'cringe', 'right', 'headdown-putt', 'conked', 'jump', 'into-putt', 'fish-end', 'running-jump-land', 'shrug', 'sprinkle-dust', 'hold-bottle', 'right-hand', 'melt', 'pet-start', 'look-putt', 'loop-putt', 'lookloop-putt', 'juggle', 'run', 'pushbutton', 'sidestep-right', 'water', 'right-point-start', 'jump-land', 'struggle', 'running-jump', 'callPet', 'throw', 'catch-eatneutral', 'tug-o-war', 'bow', 'swing', 'climb', 'scientistWork', 'think', 'catch-intro-throw', 'walk', 'down', 'pole', 'periscope', 'duck', 'curtsy', 'bad-putt', 'loop-dig', 'angry', 'bored', 'swing-putt', 'pet-end', 'spit', 'right-point', 'start-dig', 'castlong', 'running-jump-squat', 'neutral', 'jump-idle', 'reel', 'slip-backward', 'sound', 'sidestep-left', 'up', 'fish-again', 'cast', 'phoneBack', 'phoneNeutral', 'scientistJealous', 'battlecast', 'sit-start', 'toss', 'happy-dance', 'confused', 'teleport', 'sit', 'sad-walk', 'give-props-start', 'book', 'fish-neutral', 'scientistEmcee', 'leverPull', 'tutorial-neutral', 'badloop-putt', 'give-props', 'hold-magnet', 'hypnotize', 'left-point', 'leverReach', 'feedPet', 'reel-H', 'applause', 'smooch', 'rotateR-putt', 'running-jump-idle', 'push', 'catch-neutral', 'left']
Battle Event localtoon-battle-event-639
<class 'toontown.toon.LocalToon.LocalToon'>
Reading DNA file... phase_8/dna/storage_BR_sz.pdna
Reading DNA file... phase_8/dna/the_burrrgh_sz.pdna
empty flat building with no walls
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
<class 'toontown.toon.LocalToon.LocalToon'>
frame rate: 4.7 fps|0.487d|3 avs||3633|3636||0x1002|0x6738|875.3MB|1182.6MB|16330.4MB|1838|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Battle Event localtoon-battle-event-644
Battle Event localtoon-battle-event-649
Battle Event localtoon-battle-event-654
Battle Event localtoon-battle-event-659
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Battle Event localtoon-battle-event-664
Battle Event localtoon-battle-event-669
Battle Event localtoon-battle-event-674
Battle Event localtoon-battle-event-679
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3100.pdna
empty flat building with no walls
Teleporting back
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
Battle Event localtoon-battle-event-684
Battle Event localtoon-battle-event-689
Battle Event localtoon-battle-event-694
frame rate: 6.5 fps|0.064d|3 avs||3934|3937||0x1002|0x6738|863.7MB|1227.1MB|16330.4MB|1867|nt.2.6.2|3.300,3.300|3,6 cpus|OpenGL
Battle Event localtoon-battle-event-699
Reading DNA file... phase_5/dna/storage_town.pdna
Reading DNA file... phase_8/dna/storage_BR_town.pdna
Reading DNA file... phase_8/dna/the_burrrgh_3200.pdna
